Here is a coding project I am working on.
It starts with the full structure of the project, then you will have each file title and file content.

Respond with 'OK' and for now, just understand the project completely.
I will ask for help in the next prompt so you can assist me with this project.



--- PROJECT STRUCTURE ---


{
    "eiganights/": {
        ".gitignore": {},
        "add.php": {},
        "admin_action.php": {},
        "admin_edit_content.php": {},
        "admin_edit_faq.php": {},
        "admin_panel.php": {},
        "api_tmdb_proxy.php": {},
        "config.php": {},
        "contact.php": {},
        "faq.php": {},
        "forum.php": {},
        "forum_create_thread.php": {},
        "forum_view_thread.php": {},
        "friend_action.php": {},
        "index.php": {},
        "login.php": {},
        "logout.php": {},
        "movie_details.php": {},
        "profile.php": {},
        "rate_comment.php": {},
        "README.md": {},
        "register.php": {},
        "remove_from_watchlist.php": {},
        "terms.php": {},
        "users_list.php": {},
        "view_profile.php": {},
        ".git/": {},
        "assets/": {
            "style.css": {},
            "images/": {
                "appletv_logo.png": {},
                "disney_logo.png": {},
                "eiganights_logo.png": {},
                "eiganights_logov1.png": {},
                "eiganights_logov2.png": {},
                "hbomax_logo.png": {},
                "hulu_logo.png": {},
                "netflix_logo.png": {},
                "no_actor_photo.png": {},
                "no_poster_available.png": {},
                "paramount_logo.png": {},
                "primevideo_logo.png": {},
                "youtubepremium_logo.png": {}
            },
            "videos/": {
                "comedy central.gif": {},
                "Digital Marketing.gif": {},
                "disaster_artist_ad.gif": {},
                "filmdoo_ad.gif": {},
                "home rob.gif": {},
                "Social Media Marketing.gif": {},
                "south_park_ad.gif": {}
            }
        },
        "db/": {
            "setup.sql": {}
        },
        "includes/": {
            "footer.php": {},
            "function.php": {},
            "header.php": {}
        },
        "venv/": {}
    }
}


--- FILE : add.php ---


<?php
session_start();
include('config.php');

if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

$redirectUrl = 'index.php'; // Default redirect
if (isset($_POST['redirect_url']) && !empty($_POST['redirect_url'])) {
    // Basic validation for local redirect
    if (parse_url($_POST['redirect_url'], PHP_URL_HOST) === null || parse_url($_POST['redirect_url'], PHP_URL_HOST) === $_SERVER['HTTP_HOST']) {
        $redirectUrl = $_POST['redirect_url'];
    }
}


if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $userId = $_SESSION['user_id'];
    $movieId = (int)$_POST['movie_id'];
    $movieTitle = $conn->real_escape_string($_POST['movie_title']);
    $posterPath = $conn->real_escape_string($_POST['poster_path']);

    // Vérifier si le film est déjà dans la watchlist
    $stmtCheck = $conn->prepare("SELECT id FROM watchlist WHERE user_id = ? AND movie_id = ?");
    $stmtCheck->bind_param("ii", $userId, $movieId);
    $stmtCheck->execute();
    $stmtCheck->store_result();

    if ($stmtCheck->num_rows === 0) {
        $stmtInsert = $conn->prepare("INSERT INTO watchlist (user_id, movie_id, movie_title, poster_path) VALUES (?, ?, ?, ?)");
        $stmtInsert->bind_param("iiss", $userId, $movieId, $movieTitle, $posterPath);
        if ($stmtInsert->execute()) {
            $_SESSION['message'] = "Film ajouté à votre watchlist.";
        } else {
            $_SESSION['error'] = "Erreur lors de l'ajout du film: " . $stmtInsert->error;
        }
        $stmtInsert->close();
    } else {
        $_SESSION['message'] = "Ce film est déjà dans votre watchlist.";
    }
    $stmtCheck->close();
} 

// If redirecting back to movie_details, use its session messages
if (strpos($redirectUrl, 'movie_details.php') !== false) {
    // Keep the generic session message, movie_details.php doesn't have its own for this action
}


header('Location: ' . $redirectUrl);
exit;


--- FILE : admin_action.php ---


<?php
/*
 * admin_action.php
 * Handles actions performed by admins, like banning/unbanning users.
 */
include_once 'config.php'; // Includes session_start(), db connection ($conn)

// --- Admin Access Control ---
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    $_SESSION['admin_error'] = "Action non autorisée. Droits admin requis.";
    header('Location: admin_panel.php'); // Or login.php if session totally invalid
    exit;
}

// --- Validate Request ---
if ($_SERVER['REQUEST_METHOD'] !== 'POST' ||
    !isset($_POST['action']) || !isset($_POST['user_id_to_manage']) ||
    !is_numeric($_POST['user_id_to_manage'])) {

    $_SESSION['admin_error'] = "Requête invalide ou données manquantes.";
    header('Location: admin_panel.php');
    exit;
}

$action = trim($_POST['action']);
$userIdToManage = (int)$_POST['user_id_to_manage'];
$loggedInAdminId = (int)$_SESSION['user_id'];

// Admin cannot ban themselves
if ($userIdToManage === $loggedInAdminId) {
    $_SESSION['admin_error'] = "Vous ne pouvez pas vous bannir vous-même.";
    header('Location: admin_panel.php');
    exit;
}


// --- Perform Action ---
switch ($action) {
    case 'ban_user':
        $sql = "UPDATE users SET is_banned = 1 WHERE id = ? AND role != 'admin'"; // Prevent banning other admins easily
        $stmt = $conn->prepare($sql);
        if (!$stmt) {
            error_log("Prepare failed (ADMIN_BAN): " . $conn->error);
            $_SESSION['admin_error'] = "Erreur système (ban). (AA01)";
        } else {
            $stmt->bind_param("i", $userIdToManage);
            if ($stmt->execute()) {
                if ($stmt->affected_rows > 0) {
                    $_SESSION['admin_message'] = "Utilisateur banni avec succès.";
                } else {
                    $_SESSION['admin_warning'] = "L'utilisateur n'a pas pu être banni (déjà banni, admin, ou non trouvé).";
                }
            } else {
                error_log("Execute failed (ADMIN_BAN): " . $stmt->error);
                $_SESSION['admin_error'] = "Erreur lors du bannissement. (AA02)";
            }
            $stmt->close();
        }
        break;

    case 'unban_user':
        $sql = "UPDATE users SET is_banned = 0 WHERE id = ?";
        $stmt = $conn->prepare($sql);
         if (!$stmt) {
            error_log("Prepare failed (ADMIN_UNBAN): " . $conn->error);
            $_SESSION['admin_error'] = "Erreur système (unban). (AA03)";
        } else {
            $stmt->bind_param("i", $userIdToManage);
            if ($stmt->execute()) {
                 if ($stmt->affected_rows > 0) {
                    $_SESSION['admin_message'] = "Utilisateur débanni avec succès.";
                } else {
                    $_SESSION['admin_warning'] = "L'utilisateur n'a pas pu être débanni (déjà actif ou non trouvé).";
                }
            } else {
                error_log("Execute failed (ADMIN_UNBAN): " . $stmt->error);
                $_SESSION['admin_error'] = "Erreur lors du débannissement. (AA04)";
            }
            $stmt->close();
        }
        break;

    default:
        $_SESSION['admin_error'] = "Action non reconnue.";
}

header('Location: admin_panel.php');
exit;
?>



--- FILE : admin_edit_content.php ---


<?php
include_once 'config.php';

if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    $_SESSION['error'] = "Accès non autorisé.";
    header('Location: login.php');
    exit;
}

$pageTitle = "Gérer le Contenu du Site - Admin";
$edit_slug = null;
$content_title = '';
$content_body = ''; // HTML content

// Handle Form Submission (POST)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $content_slug = trim($_POST['content_slug'] ?? '');
    $content_title = trim($_POST['content_title'] ?? '');
    $content_body = $_POST['content_body'] ?? ''; // Allow HTML, sanitize on display if needed or use WYSIWYG

    if (empty($content_slug) || empty($content_title) || empty($content_body)) {
        $_SESSION['admin_error'] = "Le slug, le titre et le contenu sont requis.";
    } else {
        // Check if slug exists for update, otherwise it's an error for now (no new content creation via this simple form)
        $stmt_check = $conn->prepare("SELECT id FROM site_content WHERE slug = ?");
        $stmt_check->bind_param("s", $content_slug);
        $stmt_check->execute();
        $stmt_check->store_result();

        if ($stmt_check->num_rows > 0) { // Update existing content
            $sql = "UPDATE site_content SET title = ?, content = ? WHERE slug = ?";
            $stmt = $conn->prepare($sql);
            // Note: Be very careful with allowing HTML directly.
            // Consider using a WYSIWYG editor that sanitizes or use a markdown parser.
            $stmt->bind_param("sss", $content_title, $content_body, $content_slug);
            if ($stmt->execute()) {
                $_SESSION['admin_message'] = "Contenu '" . htmlspecialchars($content_title) . "' mis à jour avec succès.";
            } else {
                $_SESSION['admin_error'] = "Erreur lors de la mise à jour: " . $stmt->error;
            }
             if(isset($stmt)) $stmt->close();
        } else {
             $_SESSION['admin_error'] = "Slug de contenu non trouvé pour la mise à jour. La création de nouveau contenu via ce formulaire n'est pas supportée.";
        }
        $stmt_check->close();
        header("Location: admin_edit_content.php?edit_slug=" . urlencode($content_slug)); // Refresh
        exit;
    }
}

// Load Content for editing (GET)
if (isset($_GET['edit_slug'])) {
    $edit_slug = trim($_GET['edit_slug']);
    $sql = "SELECT title, content FROM site_content WHERE slug = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $edit_slug);
    $stmt->execute();
    $result = $stmt->get_result();
    if ($content_data = $result->fetch_assoc()) {
        $content_title = $content_data['title'];
        $content_body = $content_data['content'];
    } else {
        $_SESSION['admin_error'] = "Contenu avec le slug '" . htmlspecialchars($edit_slug) . "' non trouvé.";
        // Optionally redirect or just show empty form
    }
    $stmt->close();
}

// List all site content for navigation
$site_contents = [];
$result_list_content = $conn->query("SELECT slug, title FROM site_content ORDER BY title ASC");
if($result_list_content) {
    while($row = $result_list_content->fetch_assoc()){
        $site_contents[] = $row;
    }
}


include_once 'includes/header.php';
?>
<main class="container admin-panel-page">
    <h1>Gérer le Contenu du Site</h1>
    <p><a href="admin_panel.php">« Retour au Panneau d'Administration</a></p>

    <?php if (!empty($_SESSION['admin_message'])): ?>
        <div class="alert alert-success"><?php echo htmlspecialchars($_SESSION['admin_message']); unset($_SESSION['admin_message']); ?></div>
    <?php endif; ?>
    <?php if (!empty($_SESSION['admin_error'])): ?>
        <div class="alert alert-danger"><?php echo htmlspecialchars($_SESSION['admin_error']); unset($_SESSION['admin_error']); ?></div>
    <?php endif; ?>

    <section class="card">
        <h2><?php echo $edit_slug ? 'Modifier: ' . htmlspecialchars($content_title) : 'Sélectionner un contenu à modifier'; ?></h2>

        <?php if (empty($edit_slug) && !empty($site_contents)): ?>
            <p>Veuillez sélectionner un élément à modifier :</p>
            <ul>
                <?php foreach($site_contents as $sc): ?>
                    <li><a href="admin_edit_content.php?edit_slug=<?php echo urlencode($sc['slug']); ?>"><?php echo htmlspecialchars($sc['title']); ?></a></li>
                <?php endforeach; ?>
            </ul>

        <?php elseif ($edit_slug): ?>
        <form method="POST" action="admin_edit_content.php?edit_slug=<?php echo urlencode($edit_slug);?>">
            <input type="hidden" name="content_slug" value="<?php echo htmlspecialchars($edit_slug); ?>">
            <div class="form-group">
                <label for="content_title">Titre:</label>
                <input type="text" name="content_title" id="content_title" value="<?php echo htmlspecialchars($content_title); ?>" required>
            </div>
            <div class="form-group">
                <label for="content_body">Contenu (HTML autorisé - Soyez prudent):</label>
                <textarea name="content_body" id="content_body" rows="15" required><?php echo htmlspecialchars($content_body); // Escape for textarea display, but it's stored as HTML ?></textarea>
                <small>Pour les sauts de ligne, utilisez <p>paragraphes</p> ou <br>. Pour les titres, <h2>Titre</h2>, etc.</small>
            </div>
            <button type="submit" class="button-primary">Mettre à jour le Contenu</button>
             <a href="admin_edit_content.php" class="button button-secondary">Choisir un autre contenu</a>
        </form>
        <?php elseif (empty($site_contents)): ?>
             <p>Aucun contenu de site n'a été défini.</p>
        <?php endif; ?>
    </section>
</main>
<?php include_once 'includes/footer.php'; ?>


--- FILE : admin_edit_faq.php ---


<?php
include_once 'config.php';

if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    $_SESSION['error'] = "Accès non autorisé.";
    header('Location: login.php');
    exit;
}

$pageTitle = "Gérer les FAQs - Admin";
$edit_id = null;
$question = '';
$answer = '';
$sort_order = 0;

// Handle Form Submission (POST)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $question = trim($_POST['question'] ?? '');
    $answer = trim($_POST['answer'] ?? '');
    $sort_order = (int)($_POST['sort_order'] ?? 0);
    $faq_id = (int)($_POST['faq_id'] ?? 0); // For updates

    if (empty($question) || empty($answer)) {
        $_SESSION['admin_error'] = "La question et la réponse sont requises.";
    } else {
        if ($faq_id > 0) { // Update existing FAQ
            $sql = "UPDATE faq_items SET question = ?, answer = ?, sort_order = ? WHERE id = ?";
            $stmt = $conn->prepare($sql);
            $stmt->bind_param("ssii", $question, $answer, $sort_order, $faq_id);
            if ($stmt->execute()) {
                $_SESSION['admin_message'] = "FAQ mise à jour avec succès.";
            } else {
                $_SESSION['admin_error'] = "Erreur lors de la mise à jour de la FAQ: " . $stmt->error;
            }
        } else { // Insert new FAQ
            $sql = "INSERT INTO faq_items (question, answer, sort_order) VALUES (?, ?, ?)";
            $stmt = $conn->prepare($sql);
            $stmt->bind_param("ssi", $question, $answer, $sort_order);
            if ($stmt->execute()) {
                $_SESSION['admin_message'] = "FAQ ajoutée avec succès.";
            } else {
                $_SESSION['admin_error'] = "Erreur lors de l'ajout de la FAQ: " . $stmt->error;
            }
        }
        if(isset($stmt)) $stmt->close();
        header("Location: admin_edit_faq.php"); // Refresh or redirect to list
        exit;
    }
}

// Handle Delete
if (isset($_GET['delete_id']) && is_numeric($_GET['delete_id'])) {
    $delete_id = (int)$_GET['delete_id'];
    $sql = "DELETE FROM faq_items WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $delete_id);
    if ($stmt->execute()) {
        $_SESSION['admin_message'] = "FAQ supprimée avec succès.";
    } else {
        $_SESSION['admin_error'] = "Erreur lors de la suppression: " . $stmt->error;
    }
    $stmt->close();
    header("Location: admin_edit_faq.php");
    exit;
}


// Load FAQ for editing (GET)
if (isset($_GET['edit_id']) && is_numeric($_GET['edit_id'])) {
    $edit_id = (int)$_GET['edit_id'];
    $sql = "SELECT question, answer, sort_order FROM faq_items WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $edit_id);
    $stmt->execute();
    $result = $stmt->get_result();
    if ($faq_data = $result->fetch_assoc()) {
        $question = $faq_data['question'];
        $answer = $faq_data['answer'];
        $sort_order = $faq_data['sort_order'];
    }
    $stmt->close();
}

// Fetch all FAQs for listing
$faqs = [];
$result_list = $conn->query("SELECT id, question, sort_order FROM faq_items ORDER BY sort_order ASC, id ASC");
if ($result_list) {
    while($row = $result_list->fetch_assoc()) {
        $faqs[] = $row;
    }
}

include_once 'includes/header.php';
?>
<main class="container admin-panel-page">
    <h1>Gérer les FAQs</h1>
    <p><a href="admin_panel.php">« Retour au Panneau d'Administration</a></p>

    <?php if (!empty($_SESSION['admin_message'])): ?>
        <div class="alert alert-success"><?php echo htmlspecialchars($_SESSION['admin_message']); unset($_SESSION['admin_message']); ?></div>
    <?php endif; ?>
    <?php if (!empty($_SESSION['admin_error'])): ?>
        <div class="alert alert-danger"><?php echo htmlspecialchars($_SESSION['admin_error']); unset($_SESSION['admin_error']); ?></div>
    <?php endif; ?>

    <section class="card">
        <h2><?php echo $edit_id ? 'Modifier la FAQ' : 'Ajouter une FAQ'; ?></h2>
        <form method="POST" action="admin_edit_faq.php">
            <input type="hidden" name="faq_id" value="<?php echo $edit_id ? (int)$edit_id : 0; ?>">
            <div class="form-group">
                <label for="question">Question:</label>
                <textarea name="question" id="question" rows="3" required><?php echo htmlspecialchars($question); ?></textarea>
            </div>
            <div class="form-group">
                <label for="answer">Réponse:</label>
                <textarea name="answer" id="answer" rows="6" required><?php echo htmlspecialchars($answer); ?></textarea>
            </div>
            <div class="form-group">
                <label for="sort_order">Ordre d'affichage (plus petit = plus haut):</label>
                <input type="number" name="sort_order" id="sort_order" value="<?php echo (int)$sort_order; ?>">
            </div>
            <button type="submit" class="button-primary"><?php echo $edit_id ? 'Mettre à jour' : 'Ajouter'; ?></button>
            <?php if ($edit_id): ?>
                <a href="admin_edit_faq.php" class="button button-secondary">Annuler l'édition</a>
            <?php endif; ?>
        </form>
    </section>

    <section class="card">
        <h2>Liste des FAQs Actuelles</h2>
        <?php if (!empty($faqs)): ?>
        <table class="admin-users-table"> <!-- Re-use style for now -->
            <thead><tr><th>Question</th><th>Ordre</th><th>Actions</th></tr></thead>
            <tbody>
            <?php foreach($faqs as $item): ?>
                <tr>
                    <td><?php echo htmlspecialchars(mb_strimwidth($item['question'], 0, 70, "...")); ?></td>
                    <td><?php echo (int)$item['sort_order']; ?></td>
                    <td>
                        <a href="admin_edit_faq.php?edit_id=<?php echo (int)$item['id']; ?>" class="button-small button-secondary">Modifier</a>
                        <a href="admin_edit_faq.php?delete_id=<?php echo (int)$item['id']; ?>" class="button-small button-danger" onclick="return confirm('Êtes-vous sûr de vouloir supprimer cette FAQ ?');">Supprimer</a>
                    </td>
                </tr>
            <?php endforeach; ?>
            </tbody>
        </table>
        <?php else: ?>
        <p>Aucune FAQ pour le moment.</p>
        <?php endif; ?>
    </section>
</main>
<?php include_once 'includes/footer.php'; ?>


--- FILE : admin_panel.php ---


<?php
/*
 * admin_panel.php
 * Admin dashboard for user management.
 */
include_once 'config.php'; // Includes session_start(), $conn

// --- Admin Access Control ---
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    $_SESSION['error'] = "Accès non autorisé.";
    header('Location: login.php');
    exit;
}

$pageTitle = "Panneau d'Administration - Eiganights";
$loggedInUserId = (int)$_SESSION['user_id'];
$users = [];

// --- Fetch all users (except the admin him/herself) ---
$sql = "SELECT id, username, role, is_banned, created_at FROM users WHERE id != ? ORDER BY username ASC";
$stmt = $conn->prepare($sql);
if (!$stmt) {
    error_log("Prepare failed (ADMIN_PANEL_USERS_SEL): " . $conn->error);
    $_SESSION['admin_error'] = "Erreur lors du chargement des utilisateurs. (AP01)";
} else {
    $stmt->bind_param("i", $loggedInUserId);
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        while ($row = $result->fetch_assoc()) {
            $users[] = $row;
        }
    } else {
        error_log("Execute failed (ADMIN_PANEL_USERS_SEL): " . $stmt->error);
        $_SESSION['admin_error'] = "Erreur lors de la récupération des utilisateurs. (AP02)";
    }
    $stmt->close();
}

include_once 'includes/header.php';
?>

<main class="container admin-panel-page">
    <h1>Panneau d'Administration</h1>

    <?php if (!empty($_SESSION['admin_message'])): ?>
        <div class="alert alert-success"><?php echo htmlspecialchars($_SESSION['admin_message']); unset($_SESSION['admin_message']); ?></div>
    <?php endif; ?>
    <?php if (!empty($_SESSION['admin_error'])): ?>
        <div class="alert alert-danger"><?php echo htmlspecialchars($_SESSION['admin_error']); unset($_SESSION['admin_error']); ?></div>
    <?php endif; ?>
    <?php if (!empty($_SESSION['admin_warning'])): ?>
        <div class="alert alert-warning"><?php echo htmlspecialchars($_SESSION['admin_warning']); unset($_SESSION['admin_warning']); ?></div>
    <?php endif; ?>

    <section class="user-management-section card">
        <h2>Gestion des Utilisateurs</h2>
        <?php if (!empty($users)): ?>
            <table class="admin-users-table">
                <thead>
                    <tr>
                        <th>Nom d'utilisateur</th>
                        <th>Rôle</th>
                        <th>Statut</th>
                        <th>Inscrit le</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach ($users as $user): ?>
                        <tr>
                            <td>
                                <a href="view_profile.php?id=<?php echo (int)$user['id']; ?>">
                                    <?php echo htmlspecialchars($user['username'], ENT_QUOTES, 'UTF-8'); ?>
                                </a>
                            </td>
                            <td><?php echo htmlspecialchars(ucfirst($user['role']), ENT_QUOTES, 'UTF-8'); ?></td>
                            <td>
                                <?php if ($user['is_banned']): ?>
                                    <span class="status-banned">Banni</span>
                                <?php else: ?>
                                    <span class="status-active">Actif</span>
                                <?php endif; ?>
                            </td>
                            <td><?php echo date('d/m/Y H:i', strtotime($user['created_at'])); ?></td>
                            <td>
                                <form method="POST" action="admin_action.php" class="inline-form">
                                    <input type="hidden" name="user_id_to_manage" value="<?php echo (int)$user['id']; ?>">
                                    <?php if ($user['is_banned']): ?>
                                        <input type="hidden" name="action" value="unban_user">
                                        <button type="submit" class="button-success button-small">Débannir</button>
                                    <?php else: ?>
                                        <input type="hidden" name="action" value="ban_user">
                                        <button type="submit" class="button-danger button-small">Bannir</button>
                                    <?php endif; ?>
                                </form>
                            </td>
                        </tr>
                    <?php endforeach; ?>
                </tbody>
            </table>
        <?php else: ?>
            <p>Aucun autre utilisateur à gérer.</p>
        <?php endif; ?>
    </section>
      <hr>

    <section class="faq-management-section card">
        <h2>Gestion des FAQs</h2>
        <p><a href="admin_edit_faq.php" class="button-primary">Gérer les FAQs</a></p>
        <?php
            // Optional: Display a quick list of FAQs here
            $stmtFaqList = $conn->query("SELECT id, question FROM faq_items ORDER BY sort_order ASC LIMIT 5");
            if ($stmtFaqList && $stmtFaqList->num_rows > 0) {
                echo "<ul>";
                while ($faq_row = $stmtFaqList->fetch_assoc()) {
                    echo "<li>" . htmlspecialchars($faq_row['question']) . 
                         " (<a href='admin_edit_faq.php?edit_id=" . $faq_row['id'] . "'>Modifier</a>)</li>";
                }
                echo "</ul>";
            } else {
                echo "<p>Aucune FAQ n'a encore été ajoutée.</p>";
            }
        ?>
    </section>

    <hr>

    <section class="content-management-section card">
        <h2>Gestion du Contenu du Site (Ex: Conditions)</h2>
        <p><a href="admin_edit_content.php" class="button-primary">Gérer le Contenu</a></p>
         <?php
            $stmtContentList = $conn->query("SELECT id, slug, title FROM site_content ORDER BY title ASC LIMIT 5");
            if ($stmtContentList && $stmtContentList->num_rows > 0) {
                echo "<ul>";
                while ($content_row = $stmtContentList->fetch_assoc()) {
                    echo "<li>" . htmlspecialchars($content_row['title']) . " (" . htmlspecialchars($content_row['slug']). ")" .
                         " (<a href='admin_edit_content.php?edit_slug=" . htmlspecialchars($content_row['slug']) . "'>Modifier</a>)</li>";
                }
                echo "</ul>";
            } else {
                echo "<p>Aucun contenu de site n'a encore été ajouté.</p>";
            }
        ?>
    </section>
</main>

<?php
include_once 'includes/footer.php';
?>



--- FILE : api_tmdb_proxy.php ---


<?php
// api_tmdb_proxy.php

include 'config.php'; // Doit définir TMDB_API_KEY

header('Content-Type: application/json');

// Vérification de la requête GET
if (!isset($_GET['query']) || empty(trim($_GET['query']))) {
    http_response_code(400);
    echo json_encode(['error' => 'Paramètre "query" manquant ou vide.']);
    exit;
}

$query = trim($_GET['query']);
$url = "https://api.themoviedb.org/3/search/movie?api_key=" . urlencode(TMDB_API_KEY) . "&language=fr-FR&query=" . urlencode($query);

// Configuration du contexte HTTP (timeout, etc.)
$context = stream_context_create([
    'http' => [
        'timeout' => 5 // Timeout de 5 secondes
    ]
]);

$response = file_get_contents($url, false, $context);

// Facultatif : pour les appels JS cross-domain
header("Access-Control-Allow-Origin: *");

if ($response !== false) {
    echo $response;
} else {
    http_response_code(502); // Bad Gateway
    echo json_encode(['error' => 'Service TMDB temporairement indisponible.']);
}



--- FILE : config.php ---


--- FILE TOO LARGE / NO NEED TO READ ---


--- FILE : contact.php ---


<?php
/*
 * contact.php
 * Handles user contact submissions.
 */
include_once 'config.php'; // Includes session_start(), $conn

$pageTitle = "Contactez-nous - Eiganights";
$message_sent = false;
$error_message = '';
$form_data = ['name' => '', 'email' => '', 'subject' => '', 'message' => ''];

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $form_data['name'] = trim($_POST['name'] ?? '');
    $form_data['email'] = trim($_POST['email'] ?? '');
    $form_data['subject'] = trim($_POST['subject'] ?? '');
    $form_data['message'] = trim($_POST['message'] ?? '');

    if (empty($form_data['name']) || empty($form_data['email']) || empty($form_data['subject']) || empty($form_data['message'])) {
        $error_message = "Tous les champs sont requis.";
    } elseif (!filter_var($form_data['email'], FILTER_VALIDATE_EMAIL)) {
        $error_message = "Veuillez fournir une adresse e-mail valide.";
    } else {
        // For a minimal viable product, we'll simulate sending.
        // In a real application, you would use PHP's mail() function or a library.
        // $to = "admin@eiganights.com"; // Your admin email
        // $email_subject = "Contact Eiganights: " . htmlspecialchars($form_data['subject']);
        // $email_body = "Vous avez reçu un nouveau message de la part de " . htmlspecialchars($form_data['name']) . " (" . htmlspecialchars($form_data['email']) . ").\n\n" .
        //               "Message:\n" . htmlspecialchars($form_data['message']);
        // $headers = "From: noreply@eiganights.com\r\n"; // Or use the sender's email if your server allows
        // $headers .= "Reply-To: " . htmlspecialchars($form_data['email']) . "\r\n";

        // if (mail($to, $email_subject, $email_body, $headers)) {
        //     $message_sent = true;
        // } else {
        //     $error_message = "Désolé, une erreur est survenue lors de l'envoi de votre message. Veuillez réessayer plus tard.";
        //     error_log("Contact form mail() failed.");
        // }

        // --- MVP Simulation ---
        $message_sent = true; // Simulate successful sending
        // In a real app, you might save to DB or actually send email
        $_SESSION['contact_message_log'] = "Message de: {$form_data['name']} <{$form_data['email']}> Sujet: {$form_data['subject']} - {$form_data['message']}";
        // Clear form data on success
        $form_data = ['name' => '', 'email' => '', 'subject' => '', 'message' => ''];
    }
}

include_once 'includes/header.php';
?>

<main class="container auth-form-container"> <?php // Re-using auth form style for simplicity ?>
    <h1>Contactez-nous</h1>

    <?php if ($message_sent): ?>
        <div class="alert alert-success">
            Merci pour votre message ! Nous vous répondrons dès que possible.
        </div>
    <?php endif; ?>
    <?php if (!empty($error_message)): ?>
        <div class="alert alert-danger">
            <?php echo htmlspecialchars($error_message); ?>
        </div>
    <?php endif; ?>

    <?php if (!$message_sent): ?>
    <form method="POST" action="contact.php" novalidate>
        <div class="form-group">
            <label for="name">Votre Nom:</label>
            <input type="text" id="name" name="name" value="<?php echo htmlspecialchars($form_data['name']); ?>" required>
        </div>
        <div class="form-group">
            <label for="email">Votre E-mail:</label>
            <input type="email" id="email" name="email" value="<?php echo htmlspecialchars($form_data['email']); ?>" required>
        </div>
        <div class="form-group">
            <label for="subject">Sujet:</label>
            <input type="text" id="subject" name="subject" value="<?php echo htmlspecialchars($form_data['subject']); ?>" required>
        </div>
        <div class="form-group">
            <label for="message">Message:</label>
            <textarea id="message" name="message" rows="6" required><?php echo htmlspecialchars($form_data['message']); ?></textarea>
        </div>
        <div class="form-group">
            <button type="submit" class="button-primary">Envoyer le Message</button>
        </div>
    </form>
    <?php endif; ?>
</main>

<?php
include_once 'includes/footer.php';
?>


--- FILE : faq.php ---


<?php
/*
 * faq.php
 * Displays Frequently Asked Questions.
 */
include_once 'config.php'; // Includes session_start(), $conn

$pageTitle = "FAQ - Eiganights";
$faqs = [];
$db_error_occurred = false; // Flag to track if a database error happened during fetch

$sql = "SELECT question, answer FROM faq_items ORDER BY sort_order ASC, id ASC";
$stmt = $conn->prepare($sql);

if ($stmt) {
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        while ($row = $result->fetch_assoc()) {
            $faqs[] = $row;
        }
    } else {
        error_log("Execute failed (FAQ_SEL): " . $stmt->error);
        $db_error_occurred = true; // Set flag on execute error
    }
    $stmt->close(); // Close statement after use
} else {
    error_log("Prepare failed (FAQ_SEL): " . $conn->error);
    $db_error_occurred = true; // Set flag on prepare error
}

include_once 'includes/header.php';
?>

<main class="container static-page">
    <h1>Questions Fréquemment Posées (FAQ)</h1>

    <?php if (!empty($faqs)): ?>
        <dl class="faq-list">
            <?php foreach ($faqs as $faq): ?>
                <div class="faq-item">
                    <dt><?php echo nl2br(htmlspecialchars($faq['question'], ENT_QUOTES, 'UTF-8')); ?></dt>
                    <dd><?php echo nl2br(htmlspecialchars($faq['answer'], ENT_QUOTES, 'UTF-8')); ?></dd>
                </div>
            <?php endforeach; ?>
        </dl>
    <?php else: // No FAQs found or an error occurred ?>
        <p>Aucune question fréquemment posée n'est disponible pour le moment. Revenez bientôt !</p>
        <?php if ($db_error_occurred): // Check the flag instead of trying to access $stmt properties ?>
             <p class="alert alert-warning">Nous rencontrons des difficultés pour charger les FAQs actuellement. (F01)</p>
        <?php endif; ?>
    <?php endif; ?>
</main>

<?php
// $conn->close(); // Optional
include_once 'includes/footer.php';
?>


--- FILE : forum.php ---


<?php
include_once 'config.php';

$pageTitle = "Forum des discussions - Eiganights";
$threads = [];

$sql = "SELECT ft.id, ft.title, ft.movie_title, ft.movie_id, ft.created_at, ft.updated_at, 
               u.username as author_username, u.id as author_user_id, -- Added author_user_id
               ft.scene_start_time, ft.scene_description_short, -- Added scene details
               (SELECT COUNT(*) FROM forum_posts fp WHERE fp.thread_id = ft.id) as reply_count,
               (SELECT MAX(fp.created_at) FROM forum_posts fp WHERE fp.thread_id = ft.id) as last_reply_time
        FROM forum_threads ft
        JOIN users u ON ft.user_id = u.id
        ORDER BY ft.updated_at DESC, ft.created_at DESC
        LIMIT 50";

$stmt = $conn->prepare($sql);
if ($stmt) {
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        while ($row = $result->fetch_assoc()) {
            $threads[] = $row;
        }
    } else {
        error_log("Execute failed (FORUM_LIST_SEL): " . $stmt->error);
        $_SESSION['forum_error'] = "Erreur lors du chargement des discussions.";
    }
    $stmt->close();
} else {
    error_log("Prepare failed (FORUM_LIST_SEL): " . $conn->error);
    $_SESSION['forum_error'] = "Erreur système lors du chargement du forum.";
}

include_once 'includes/header.php';
?>

<main class="container forum-page">
    <h1>Forum des Discussions</h1>

    <?php if (isset($_SESSION['user_id'])): ?>
        <div class="create-thread-link">
            <a href="forum_create_thread.php" class="button-primary">Créer une Nouvelle Discussion</a>
        </div>
    <?php else: ?>
        <p><a href="login.php?redirect=forum.php">Connectez-vous</a> pour créer une discussion.</p>
    <?php endif; ?>

    <?php if (!empty($_SESSION['forum_message'])): ?>
        <div class="alert alert-success"><?php echo htmlspecialchars($_SESSION['forum_message']); unset($_SESSION['forum_message']); ?></div>
    <?php endif; ?>
    <?php if (!empty($_SESSION['forum_error'])): ?>
        <div class="alert alert-danger"><?php echo htmlspecialchars($_SESSION['forum_error']); unset($_SESSION['forum_error']); ?></div>
    <?php endif; ?>

    <?php if (!empty($threads)): ?>
        <table class="forum-threads-table">
            <thead>
                <tr>
                    <th>Sujet de Discussion</th>
                    <th>Film Associé</th>
                    <th>Auteur</th>
                    <th>Réponses</th>
                    <th>Dernière Activité</th>
                </tr>
            </thead>
                            <!-- Updated <tbody> in forum.php -->
                <tbody>
                    <?php foreach ($threads as $thread): ?>
                        <tr>
                            <td>
                                <a href="forum_view_thread.php?id=<?php echo (int)$thread['id']; ?>">
                                    <?php echo htmlspecialchars($thread['title'], ENT_QUOTES, 'UTF-8'); ?>
                                </a>
                                <?php if (!empty($thread['scene_start_time']) || !empty($thread['scene_description_short'])): ?>
                                    <span class="scene-annotation-tag">[Annotation de Scène]</span>
                                <?php endif; ?>
                            </td>
                            <td>
                                <a href="movie_details.php?id=<?php echo (int)$thread['movie_id']; ?>">
                                    <?php echo htmlspecialchars($thread['movie_title'], ENT_QUOTES, 'UTF-8'); ?>
                                </a>
                            </td>
                            <td>
                                <a href="view_profile.php?id=<?php echo (int)$thread['author_user_id']; ?>"> {/* Use author_user_id */}
                                    <?php echo htmlspecialchars($thread['author_username'], ENT_QUOTES, 'UTF-8'); ?>
                                </a>
                            </td>
                            <td><?php echo (int)$thread['reply_count']; ?></td>
                            <td>
                                <?php
                                $last_active = $thread['last_reply_time'] ? $thread['last_reply_time'] : $thread['created_at'];
                                echo date('d/m/Y H:i', strtotime($last_active));
                                ?>
                            </td>
                        </tr>
                    <?php endforeach; ?>
                </tbody>
        </table>
    <?php elseif (empty($_SESSION['forum_error'])): ?>
        <p>Aucune discussion n'a encore été créée. Soyez le premier !</p>
    <?php endif; ?>
</main>

<?php include_once 'includes/footer.php'; ?>


--- FILE : forum_create_thread.php ---


<?php
include_once 'config.php';

if (!isset($_SESSION['user_id'])) {
    $_SESSION['error'] = "Vous devez être connecté pour créer une discussion.";
    header('Location: login.php?redirect=forum_create_thread.php');
    exit;
}

$pageTitle = "Créer une Nouvelle Discussion - Eiganights";
$loggedInUserId = (int)$_SESSION['user_id'];

// Form data and errors
$form_data = ['movie_id' => '', 'movie_title_display' => '', 'thread_title' => '', 'initial_post' => '', 'scene_start_time' => '', 'scene_end_time' => '', 'scene_description_short' => ''];
$error_message = '';
// Inside forum_create_thread.php, in the POST handling block
// Pre-fill from GET parameters if available (coming from movie_details page)
if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    if (isset($_GET['movie_id']) && is_numeric($_GET['movie_id'])) {
        $form_data['movie_id'] = (int)$_GET['movie_id'];
        // Fetch movie title from TMDB API to ensure it's correct and to display it
        // Or, trust the GET param for movie_title for MVP if passed
        if (isset($_GET['movie_title'])) {
             $form_data['movie_title_display'] = trim(urldecode($_GET['movie_title']));
        } else if ($form_data['movie_id'] > 0) {
            // Minimal: Could fetch from TMDB API here to get the title if not passed.
            // For MVP, we'll rely on it being passed or user search.
        }
    }
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $movieId = filter_input(INPUT_POST, 'movie_id', FILTER_VALIDATE_INT);
    $movieTitle = trim($_POST['movie_title_hidden'] ?? '');
    $threadTitle = trim($_POST['thread_title'] ?? '');
    $initialPost = trim($_POST['initial_post'] ?? ''); // This is the annotation

    // >> NEW: Get scene data <<
    $sceneStartTime = trim($_POST['scene_start_time'] ?? '');
    $sceneEndTime = trim($_POST['scene_end_time'] ?? '');
    $sceneDescriptionShort = trim($_POST['scene_description_short'] ?? '');

    $form_data['movie_id'] = $movieId;
    $form_data['movie_title_display'] = $movieTitle;
    $form_data['thread_title'] = $threadTitle;
    $form_data['initial_post'] = $initialPost;
    // >> NEW: Repopulate scene data <<
    $form_data['scene_start_time'] = $sceneStartTime;
    $form_data['scene_end_time'] = $sceneEndTime;
    $form_data['scene_description_short'] = $sceneDescriptionShort;

    // --- Validation (keep existing, can add validation for time format if needed) ---
    if (!$movieId || $movieId <= 0) { /* ... */ }
    // ... other validations ...
    // For MVP, we won't strictly validate time format, but you could add regex checks.
    // A title is still required for the discussion.
    elseif (empty($threadTitle)) {
        $error_message = "Le titre de votre annotation/discussion est requis.";
    } elseif (empty($initialPost)) {
        $error_message = "Le contenu de l'annotation/discussion est requis.";
    }
    // If scene_start_time is provided, a scene_description_short might be nice
    elseif (!empty($sceneStartTime) && empty($sceneDescriptionShort)) {
         // $error_message = "Si vous spécifiez un début de scène, veuillez aussi la décrire brièvement.";
         // Making scene_description_short optional even if time is set for MVP
    }
    else {
        // All good, insert into database
        // >> UPDATE SQL AND BIND_PARAM <<
        $sql = "INSERT INTO forum_threads (user_id, movie_id, movie_title, title, 
                                         scene_start_time, scene_end_time, scene_description_short, 
                                         initial_post_content, updated_at) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW())"; // 8 placeholders
        $stmt = $conn->prepare($sql);
        if ($stmt) {
            // Ensure scene times are NULL if empty, not empty strings
            $sceneStartTimeDb = !empty($sceneStartTime) ? $sceneStartTime : null;
            $sceneEndTimeDb = !empty($sceneEndTime) ? $sceneEndTime : null;
            $sceneDescriptionShortDb = !empty($sceneDescriptionShort) ? $sceneDescriptionShort : null;

            $stmt->bind_param("iissssss", $loggedInUserId, $movieId, $movieTitle, $threadTitle,
                                          $sceneStartTimeDb, $sceneEndTimeDb, $sceneDescriptionShortDb,
                                          $initialPost);
            if ($stmt->execute()) {
                // ... (rest of success logic) ...
            } else {
                error_log("Execute failed (CREATE_THREAD_SCENE_INS): " . $stmt->error);
                $error_message = "Erreur lors de la création de l'annotation/discussion. (CTS01)";
            }
            $stmt->close();
        } else {
            error_log("Prepare failed (CREATE_THREAD_SCENE_INS): " . $conn->error);
            $error_message = "Erreur système. (CTS02)";
        }
    }
}

include_once 'includes/header.php';
?>
    <main class="container create-thread-page">
        <h1>Créer une Nouvelle Discussion</h1>

        <?php if (!empty($error_message)): ?>
            <div class="alert alert-danger"><?php echo htmlspecialchars($error_message); ?></div>
        <?php endif; ?>

        <form method="POST" action="forum_create_thread.php" id="createThreadForm" class="card">
            <div class="form-group">
                <label for="movie_search">Film Associé:</label>
                <input type="text" id="movie_search_input" placeholder="Rechercher un film (Ex: Inception)...">
                <div id="movie_search_results" class="movie-search-results-dropdown"></div>

                <!-- V V V V V   NEW UPDATED BLOCK STARTS HERE   V V V V V -->
                <input type="hidden" name="movie_id" id="selected_movie_id" value="<?php echo htmlspecialchars($form_data['movie_id']); ?>">
                <input type="hidden" name="movie_title_hidden" id="selected_movie_title_hidden" value="<?php echo htmlspecialchars($form_data['movie_title_display']); ?>">
                <p id="selected_movie_display" class="selected-movie-text">
                    <?php if(!empty($form_data['movie_id']) && !empty($form_data['movie_title_display'])): ?>
                        Film sélectionné : <strong><?php echo htmlspecialchars($form_data['movie_title_display']); ?></strong>
                    <?php else: ?>
                        Aucun film sélectionné.
                    <?php endif; ?>
                </p>
                <!-- ^ ^ ^ ^ ^   NEW UPDATED BLOCK ENDS HERE   ^ ^ ^ ^ ^ -->

            </div>

            <fieldset class="scene-details-fieldset card">
        <legend>Détails de la Scène (Optionnel mais recommandé)</legend>
        <div class="form-group">
            <label for="scene_start_time">Début de la scène (ex: 00:45:12 ou 2712s):</label>
            <input type="text" name="scene_start_time" id="scene_start_time" value="<?php echo htmlspecialchars($form_data['scene_start_time']); ?>" placeholder="HH:MM:SS ou secondes">
        </div>
        <div class="form-group">
            <label for="scene_end_time">Fin de la scène (ex: 00:46:00 ou 2760s):</label>
            <input type="text" name="scene_end_time" id="scene_end_time" value="<?php echo htmlspecialchars($form_data['scene_end_time']); ?>" placeholder="HH:MM:SS ou secondes (optionnel)">
        </div>
        <div class="form-group">
            <label for="scene_description_short">Brève description de la scène:</label>
            <input type="text" name="scene_description_short" id="scene_description_short" value="<?php echo htmlspecialchars($form_data['scene_description_short']); ?>" maxlength="200" placeholder="Ex: Confrontation dans l'entrepôt">
            <small>Ce sera affiché avec votre annotation.</small>
        </div>
    </fieldset>

    <div class="form-group"> <!-- Existing Thread Title -->
        <label for="thread_title">Titre de votre Annotation/Discussion:</label>
        <input type="text" name="thread_title" id="thread_title" value="<?php echo htmlspecialchars($form_data['thread_title']); ?>" required maxlength="255">
        <small>Ex: "Symbolisme des couleurs dans cette scène" ou "Question sur la motivation du personnage ici"</small>
    </div>

        <div class="form-group">
            <label for="thread_title">Titre de la Discussion:</label>
            <input type="text" name="thread_title" id="thread_title" value="<?php echo htmlspecialchars($form_data['thread_title']); ?>" required maxlength="255">
            <small>Ex: "Analyse de la scène du rêve dans Inception (01:15:30)"</small>
        </div>

        <div class="form-group">
            <label for="initial_post">Votre premier message / description de la scène :</label>
            <textarea name="initial_post" id="initial_post" rows="8" required><?php echo htmlspecialchars($form_data['initial_post']); ?></textarea>
        </div>

        <button type="submit" class="button-primary">Créer la Discussion</button>
    </form>
</main>

<script>
// Basic JavaScript for TMDB Movie Search
const searchInput = document.getElementById('movie_search_input');
const resultsContainer = document.getElementById('movie_search_results');
const selectedMovieIdInput = document.getElementById('selected_movie_id');
const selectedMovieTitleInput = document.getElementById('selected_movie_title_hidden');
const selectedMovieDisplay = document.getElementById('selected_movie_display');
const tmdbApiKey = '<?php echo TMDB_API_KEY; ?>'; // Get API key from PHP

let searchTimeout;

if (searchInput) {
    searchInput.addEventListener('keyup', function() {
        clearTimeout(searchTimeout);
        const query = this.value.trim();

        if (query.length < 3) {
            resultsContainer.innerHTML = '';
            resultsContainer.style.display = 'none';
            return;
        }

        searchTimeout = setTimeout(() => {
            fetch(`https://api.themoviedb.org/3/search/movie?api_key=${tmdbApiKey}&language=fr-FR&query=${encodeURIComponent(query)}&page=1&include_adult=false`)
                .then(response => response.json())
                .then(data => {
                    resultsContainer.innerHTML = '';
                    if (data.results && data.results.length > 0) {
                        const ul = document.createElement('ul');
                        data.results.slice(0, 5).forEach(movie => { // Show top 5 results
                            const li = document.createElement('li');
                            const year = movie.release_date ? ` (${movie.release_date.substring(0,4)})` : '';
                            li.textContent = `${movie.title}${year}`;
                            li.dataset.movieId = movie.id;
                            li.dataset.movieTitle = movie.title;
                            li.addEventListener('click', function() {
                                selectedMovieIdInput.value = this.dataset.movieId;
                                selectedMovieTitleInput.value = this.dataset.movieTitle; // For submission
                                selectedMovieDisplay.innerHTML = `Film sélectionné : <strong>${this.dataset.movieTitle}${year}</strong>`;
                                searchInput.value = `${this.dataset.movieTitle}${year}`; // Update input to show selection
                                resultsContainer.innerHTML = '';
                                resultsContainer.style.display = 'none';
                            });
                            ul.appendChild(li);
                        });
                        resultsContainer.appendChild(ul);
                        resultsContainer.style.display = 'block';
                    } else {
                        resultsContainer.innerHTML = '<li>Aucun film trouvé.</li>';
                        resultsContainer.style.display = 'block';
                    }
                })
                .catch(error => {
                    console.error('Error fetching movies:', error);
                    resultsContainer.innerHTML = '<li>Erreur de recherche.</li>';
                    resultsContainer.style.display = 'block';
                });
        }, 300); // Debounce API calls
    });

    // Hide results if clicked outside
    document.addEventListener('click', function(event) {
        if (resultsContainer && !resultsContainer.contains(event.target) && event.target !== searchInput) {
            resultsContainer.style.display = 'none';
        }
    });
}
</script>

<?php include_once 'includes/footer.php'; ?>


--- FILE : forum_view_thread.php ---


<?php
include_once 'config.php';

if (!isset($_GET['id']) || !is_numeric($_GET['id'])) {
    $_SESSION['forum_error'] = "ID de discussion invalide.";
    header('Location: forum.php');
    exit;
}
$thread_id = (int)$_GET['id'];
$loggedInUserId = $_SESSION['user_id'] ?? null;

// Fetch Thread Details
$thread = null;
$sql_thread = "SELECT ft.id, ft.title, ft.initial_post_content, ft.movie_id, ft.movie_title, 
                      ft.created_at as thread_created_at, 
                      u.username as thread_author_username, u.id as thread_author_id,
                      ft.scene_start_time, ft.scene_end_time, ft.scene_description_short -- << NEW
               FROM forum_threads ft
               JOIN users u ON ft.user_id = u.id
               WHERE ft.id = ?";
$stmt_thread = $conn->prepare($sql_thread);


if ($stmt_thread) {
    $stmt_thread->bind_param("i", $thread_id);
    if ($stmt_thread->execute()) {
        $result_thread = $stmt_thread->get_result();
        if (!($thread = $result_thread->fetch_assoc())) {
            $_SESSION['forum_error'] = "Discussion non trouvée.";
            header('Location: forum.php');
            exit;
        }
    } else {
        error_log("Execute failed (VIEW_THREAD_SEL): " . $stmt_thread->error);
        $_SESSION['forum_error'] = "Erreur lors du chargement de la discussion.";
        header('Location: forum.php'); exit;
    }
    $stmt_thread->close();
} else {
    error_log("Prepare failed (VIEW_THREAD_SEL): " . $conn->error);
    $_SESSION['forum_error'] = "Erreur système (discussion).";
    header('Location: forum.php'); exit;
}

$pageTitle = htmlspecialchars($thread['title']) . " - Forum Eiganights";

// Handle New Post/Comment
$post_error = '';
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['post_content']) && $loggedInUserId) {
    $post_content = trim($_POST['post_content']);
    // $parent_post_id = isset($_POST['parent_post_id']) && is_numeric($_POST['parent_post_id']) ? (int)$_POST['parent_post_id'] : null; // For threaded replies later

    if (empty($post_content)) {
        $post_error = "Le contenu de la réponse ne peut pas être vide.";
    } else {
        $sql_insert_post = "INSERT INTO forum_posts (thread_id, user_id, content) VALUES (?, ?, ?)";
        $stmt_insert_post = $conn->prepare($sql_insert_post);
        if ($stmt_insert_post) {
            $stmt_insert_post->bind_param("iis", $thread_id, $loggedInUserId, $post_content);
            if ($stmt_insert_post->execute()) {
                // Update thread's updated_at timestamp
                $conn->query("UPDATE forum_threads SET updated_at = NOW() WHERE id = " . $thread_id);
                $_SESSION['forum_message'] = "Réponse ajoutée.";
                header("Location: forum_view_thread.php?id=" . $thread_id . "#post-" . $conn->insert_id); // Redirect to new post
                exit;
            } else {
                error_log("Execute failed (INSERT_POST): " . $stmt_insert_post->error);
                $post_error = "Erreur lors de l'ajout de la réponse.";
            }
            $stmt_insert_post->close();
        } else {
            error_log("Prepare failed (INSERT_POST): " . $conn->error);
            $post_error = "Erreur système (réponse).";
        }
    }
}


// Fetch Posts for this Thread
$posts = [];
$sql_posts = "SELECT fp.id, fp.content, fp.created_at, u.username as post_author_username, u.id as post_author_id
              FROM forum_posts fp
              JOIN users u ON fp.user_id = u.id
              WHERE fp.thread_id = ?
              ORDER BY fp.created_at ASC";
$stmt_posts = $conn->prepare($sql_posts);
if ($stmt_posts) {
    $stmt_posts->bind_param("i", $thread_id);
    if ($stmt_posts->execute()) {
        $result_posts = $stmt_posts->get_result();
        while ($row = $result_posts->fetch_assoc()) {
            $posts[] = $row;
        }
    } else {
        error_log("Execute failed (VIEW_POSTS_SEL): " . $stmt_posts->error);
        // Display error on page if posts fail to load but thread loaded
    }
    $stmt_posts->close();
} else {
    error_log("Prepare failed (VIEW_POSTS_SEL): " . $conn->error);
}


include_once 'includes/header.php';
?>
<main class="container view-thread-page">
    <nav aria-label="breadcrumb" class="forum-breadcrumb">
        <ol>
            <li><a href="forum.php">Forum</a></li>
            <li><?php echo htmlspecialchars($thread['title']); ?></li>
        </ol>
    </nav>

    <h1><?php echo htmlspecialchars($thread['title']); ?></h1>
    <p class="thread-meta">
        Discussion pour le film: <a href="movie_details.php?id=<?php echo (int)$thread['movie_id']; ?>"><?php echo htmlspecialchars($thread['movie_title']); ?></a>
    </p>


        <!-- In forum_view_thread.php, after $thread_meta <p> tag -->

    <?php if (!empty($thread['scene_start_time']) || !empty($thread['scene_description_short'])): ?>
        <section class="scene-annotation-info card">
            <h3>Scène Annotée :</h3>
            <?php if (!empty($thread['scene_description_short'])): ?>
                <p class="scene-desc"><strong>Description de la scène :</strong> <?php echo htmlspecialchars($thread['scene_description_short']); ?></p>
            <?php endif; ?>
            <?php if (!empty($thread['scene_start_time'])): ?>
                <p class="scene-time">
                    <strong>Temps :</strong> <?php echo htmlspecialchars($thread['scene_start_time']); ?>
                    <?php if (!empty($thread['scene_end_time'])): ?>
                        - <?php echo htmlspecialchars($thread['scene_end_time']); ?>
                    <?php endif; ?>
                </p>
            <?php endif; ?>
            <?php /* Future: Link to jump to scene in an embedded player if possible */ ?>
        </section>
    <?php endif; ?>

    <article class="forum-post original-post card" id="thread-op"> <!-- Existing OP -->

    <?php if (!empty($_SESSION['forum_message'])): ?>
        <div class="alert alert-success"><?php echo htmlspecialchars($_SESSION['forum_message']); unset($_SESSION['forum_message']); ?></div>
    <?php endif; ?>
    <?php if (!empty($post_error)): ?>
        <div class="alert alert-danger"><?php echo htmlspecialchars($post_error); ?></div>
    <?php endif; ?>
    
    <article class="forum-post original-post card" id="thread-op">
        <header class="post-header">
            <a href="view_profile.php?id=<?php echo (int)$thread['thread_author_id']; ?>">
                <strong><?php echo htmlspecialchars($thread['thread_author_username']); ?></strong>
            </a>
            <span class="post-date">a posté le <?php echo date('d/m/Y à H:i', strtotime($thread['thread_created_at'])); ?></span>
        </header>
        <div class="post-content">
            <?php echo nl2br(htmlspecialchars($thread['initial_post_content'], ENT_QUOTES, 'UTF-8')); ?>
        </div>
    </article>

    <section class="forum-replies">
        <h2>Réponses (<?php echo count($posts); ?>)</h2>
        <?php if (!empty($posts)): ?>
            <?php foreach ($posts as $post): ?>
                <article class="forum-post card" id="post-<?php echo (int)$post['id']; ?>">
                    <header class="post-header">
                         <a href="view_profile.php?id=<?php echo (int)$post['post_author_id']; ?>">
                            <strong><?php echo htmlspecialchars($post['post_author_username']); ?></strong>
                        </a>
                        <span class="post-date">a répondu le <?php echo date('d/m/Y à H:i', strtotime($post['created_at'])); ?></span>
                    </header>
                    <div class="post-content">
                        <?php echo nl2br(htmlspecialchars($post['content'], ENT_QUOTES, 'UTF-8')); ?>
                    </div>
                    <footer>
                        <?php /* Reply to specific post link - for later threaded replies */ ?>
                        <?php /* <a href="#reply-form" class="reply-to-post-link" data-parent-id="<?php echo (int)$post['id']; ?>">Répondre</a> */ ?>
                    </footer>
                </article>
            <?php endforeach; ?>
        <?php else: ?>
            <p>Aucune réponse pour le moment. Soyez le premier à répondre !</p>
        <?php endif; ?>
    </section>

    <?php if ($loggedInUserId): ?>
        <section class="reply-form-section card" id="reply-form">
            <h2>Laisser une Réponse</h2>
            <form method="POST" action="forum_view_thread.php?id=<?php echo $thread_id; ?>">
                <?php /* <input type="hidden" name="parent_post_id" id="parent_post_id_field" value=""> */ ?>
                <div class="form-group">
                    <label for="post_content" class="visually-hidden">Votre réponse</label>
                    <textarea name="post_content" id="post_content" rows="6" placeholder="Écrivez votre réponse ici..." required></textarea>
                </div>
                <button type="submit" class="button-primary">Envoyer la Réponse</button>
            </form>
        </section>
    <?php else: ?>
        <p><a href="login.php?redirect=<?php echo urlencode($_SERVER['REQUEST_URI']); ?>">Connectez-vous</a> pour répondre à cette discussion.</p>
    <?php endif; ?>

</main>
<?php include_once 'includes/footer.php'; ?>


--- FILE : friend_action.php ---


<?php
/*
 * friend_action.php
 * Handles all friendship-related actions: send, cancel, accept, decline, unfriend.
 */
include_once 'config.php'; // Includes session_start(), db connection ($conn)

// Error reporting: should be set in config.php
// For development, ensure errors are displayed. For production, they should be logged.

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    $_SESSION['error'] = "Vous devez être connecté pour effectuer cette action.";
    header('Location: login.php');
    exit;
}

// Validate request method and essential parameters
if ($_SERVER['REQUEST_METHOD'] !== 'POST' || 
    !isset($_POST['action'], $_POST['profile_user_id']) ||
    empty(trim($_POST['action'])) || !is_numeric($_POST['profile_user_id'])) {
    
    $_SESSION['error'] = "Requête invalide ou données manquantes.";
    header('Location: index.php'); // Or a more appropriate default page
    exit;
}

$loggedInUserId = (int)$_SESSION['user_id'];
$profileUserId = (int)$_POST['profile_user_id'];
$action = trim($_POST['action']);

// Users cannot perform friend actions on themselves
if ($loggedInUserId === $profileUserId) {
    $_SESSION['error'] = "Vous ne pouvez pas effectuer cette action avec vous-même.";
    header('Location: profile.php'); // Redirect to their own profile
    exit;
}

// For database consistency (user_one_id < user_two_id)
$user_one_id = min($loggedInUserId, $profileUserId);
$user_two_id = max($loggedInUserId, $profileUserId);

// Determine redirect URL with security check
$redirectUrl = 'view_profile.php?id=' . $profileUserId; // Default redirect
if (isset($_POST['redirect_url']) && !empty(trim($_POST['redirect_url']))) {
    $postedRedirectUrl = trim($_POST['redirect_url']);
    $urlComponents = parse_url($postedRedirectUrl);
    if (empty($urlComponents['host']) || $urlComponents['host'] === $_SERVER['HTTP_HOST']) {
        $redirectUrl = $postedRedirectUrl;
    }
    // If not a local path, $redirectUrl remains the default.
}


// --- Main switch logic for friendship actions ---
switch ($action) {
    case 'send_request':
        $stmt_check = $conn->prepare("SELECT status FROM friendships WHERE user_one_id = ? AND user_two_id = ?");
        if (!$stmt_check) {
            error_log("Prepare failed (FS_CHK_SR): " . $conn->error);
            $_SESSION['error'] = "Erreur système. Veuillez réessayer. (Code: FS01)";
            break;
        }
        $stmt_check->bind_param("ii", $user_one_id, $user_two_id);
        if (!$stmt_check->execute()) {
            error_log("Execute failed (FS_CHK_SR): " . $stmt_check->error);
            $_SESSION['error'] = "Erreur système. Veuillez réessayer. (Code: FS02)";
            $stmt_check->close();
            break;
        }
        $result_check = $stmt_check->get_result();

        if ($row = $result_check->fetch_assoc()) { // Existing relationship
            if ($row['status'] === 'accepted') {
                $_SESSION['message'] = "Vous êtes déjà amis.";
            } elseif ($row['status'] === 'pending') {
                $_SESSION['message'] = "Une demande d'ami est déjà en attente.";
            } elseif ($row['status'] === 'declined') {
                // Allow re-sending request if it was declined by the other user
                // The action_user_id for 'declined' would be the one who declined.
                // If $loggedInUserId is sending again, it's a new intent.
                $stmt_update = $conn->prepare("UPDATE friendships SET status = 'pending', action_user_id = ?, requested_at = NOW(), updated_at = NOW() WHERE user_one_id = ? AND user_two_id = ? AND status = 'declined'");
                if (!$stmt_update) { error_log("Prepare failed (FS_UPD_DEC): " . $conn->error); $_SESSION['error'] = "Erreur système. (Code: FS03)"; $stmt_check->close(); break; }
                $stmt_update->bind_param("iii", $loggedInUserId, $user_one_id, $user_two_id);
                $_SESSION['message'] = $stmt_update->execute() ? "Demande d'ami envoyée." : "Erreur lors de la mise à jour de la demande. (Code: FS04)";
                if (!$stmt_update->execute()) error_log("Execute failed (FS_UPD_DEC): " . $stmt_update->error);
                $stmt_update->close();
            } elseif ($row['status'] === 'blocked') {
                 $_SESSION['error'] = "Impossible d'envoyer une demande à cet utilisateur pour le moment.";
            }
        } else { // No existing relationship, insert new request
            $stmt_insert = $conn->prepare("INSERT INTO friendships (user_one_id, user_two_id, status, action_user_id) VALUES (?, ?, 'pending', ?)");
            if (!$stmt_insert) { error_log("Prepare failed (FS_INS_SR): " . $conn->error); $_SESSION['error'] = "Erreur système. (Code: FS05)"; $stmt_check->close(); break; }
            $stmt_insert->bind_param("iii", $user_one_id, $user_two_id, $loggedInUserId);
            if ($stmt_insert->execute()) {
                $_SESSION['message'] = "Demande d'ami envoyée.";
            } else {
                error_log("Execute failed (FS_INS_SR): " . $stmt_insert->error . " UserOne: $user_one_id, UserTwo: $user_two_id");
                // Check for specific errors like CHECK constraint violation FS06-C (errno 3819 for MySQL 8+)
                $_SESSION['error'] = "Erreur lors de l'envoi de la demande. (Code: FS06)";
            }
            $stmt_insert->close();
        }
        $stmt_check->close();
        break;

    case 'cancel_request':
        $stmt_delete = $conn->prepare("DELETE FROM friendships WHERE user_one_id = ? AND user_two_id = ? AND status = 'pending' AND action_user_id = ?");
        if (!$stmt_delete) { error_log("Prepare failed (FS_DEL_CR): " . $conn->error); $_SESSION['error'] = "Erreur système. (Code: FS07)"; break; }
        $stmt_delete->bind_param("iii", $user_one_id, $user_two_id, $loggedInUserId); // LoggedInUser must be the action_user_id
        if ($stmt_delete->execute()) {
            $_SESSION['message'] = ($stmt_delete->affected_rows > 0) ? "Demande d'ami annulée." : "Aucune demande à annuler trouvée ou action non autorisée.";
        } else {
            error_log("Execute failed (FS_DEL_CR): " . $stmt_delete->error);
            $_SESSION['error'] = "Erreur lors de l'annulation. (Code: FS08)";
        }
        $stmt_delete->close();
        break;

    case 'accept_request':
        // Request was sent by $profileUserId, so $profileUserId should be the action_user_id in DB for 'pending' status
        $stmt_update = $conn->prepare("UPDATE friendships SET status = 'accepted', action_user_id = ?, updated_at = NOW() WHERE user_one_id = ? AND user_two_id = ? AND status = 'pending' AND action_user_id = ?");
        if (!$stmt_update) { error_log("Prepare failed (FS_UPD_AR): " . $conn->error); $_SESSION['error'] = "Erreur système. (Code: FS09)"; break; }
        $stmt_update->bind_param("iiii", $loggedInUserId, $user_one_id, $user_two_id, $profileUserId);
        if ($stmt_update->execute()) {
            $_SESSION['message'] = ($stmt_update->affected_rows > 0) ? "Demande d'ami acceptée." : "Aucune demande à accepter ou action déjà effectuée/invalide.";
        } else {
            error_log("Execute failed (FS_UPD_AR): " . $stmt_update->error);
            $_SESSION['error'] = "Erreur lors de l'acceptation. (Code: FS10)";
        }
        $stmt_update->close();
        break;

    case 'decline_request':
        // Request was sent by $profileUserId
        $stmt_update = $conn->prepare("UPDATE friendships SET status = 'declined', action_user_id = ?, updated_at = NOW() WHERE user_one_id = ? AND user_two_id = ? AND status = 'pending' AND action_user_id = ?");
        if (!$stmt_update) { error_log("Prepare failed (FS_UPD_DR): " . $conn->error); $_SESSION['error'] = "Erreur système. (Code: FS11)"; break; }
        $stmt_update->bind_param("iiii", $loggedInUserId, $user_one_id, $user_two_id, $profileUserId);
        if ($stmt_update->execute()) {
            $_SESSION['message'] = ($stmt_update->affected_rows > 0) ? "Demande d'ami refusée." : "Aucune demande à refuser ou action déjà effectuée/invalide.";
        } else {
            error_log("Execute failed (FS_UPD_DR): " . $stmt_update->error);
            $_SESSION['error'] = "Erreur lors du refus. (Code: FS12)";
        }
        $stmt_update->close();
        break;

    case 'unfriend':
        $stmt_delete = $conn->prepare("DELETE FROM friendships WHERE user_one_id = ? AND user_two_id = ? AND status = 'accepted'");
        if (!$stmt_delete) { error_log("Prepare failed (FS_DEL_UF): " . $conn->error); $_SESSION['error'] = "Erreur système. (Code: FS13)"; break; }
        $stmt_delete->bind_param("ii", $user_one_id, $user_two_id);
        if ($stmt_delete->execute()) {
            $_SESSION['message'] = ($stmt_delete->affected_rows > 0) ? "Ami retiré." : "Relation d'amitié non trouvée.";
        } else {
            error_log("Execute failed (FS_DEL_UF): " . $stmt_delete->error);
            $_SESSION['error'] = "Erreur lors du retrait de l'ami. (Code: FS14)";
        }
        $stmt_delete->close();
        break;
    
    // case 'block_user':
    // case 'unblock_user':
        // Implement with similar error checking and logic if needed.
        // $_SESSION['error'] = "Cette fonctionnalité n'est pas encore disponible.";
        // break;

    default:
        $_SESSION['error'] = "Action non reconnue ou invalide.";
}

// $conn->close(); // Optional: close if this is the absolute end of DB interaction for this request.
header('Location: ' . $redirectUrl);
exit;
?>


--- FILE : index.php ---


<?php
/*
 * index.php
 * Homepage: Displays trending movies and movie search functionality.
 */
include_once 'config.php'; // Includes session_start(), $conn, TMDB_API_KEY

// Initialize variables
$searchResults = [];
$searchQueryDisplay = ''; // For displaying in the form, HTML escaped
$searchQueryParam = '';   // For using in API calls, raw
$trendingMovies = [];
$pageTitle = "Accueil - Eiganights"; // Default page title

// --- Fetch Trending Movies ---
$trendingUrl = "https://api.themoviedb.org/3/trending/movie/week?api_key=" . urlencode(TMDB_API_KEY) . "&language=fr-FR";
$trendingResponseJson = @file_get_contents($trendingUrl); // Suppress errors for network issues

if ($trendingResponseJson !== false) {
    $trendingData = json_decode($trendingResponseJson, true);
    if (json_last_error() === JSON_ERROR_NONE && !empty($trendingData['results'])) {
        $trendingMovies = array_slice($trendingData['results'], 0, 10); // Get top 10 trending
    } else {
        error_log("Failed to decode trending movies JSON or results empty. URL: $trendingUrl Error: " . json_last_error_msg());
    }
} else {
    error_log("Failed to fetch trending movies from TMDB. URL: $trendingUrl");
    // $_SESSION['warning'] = "Impossible de charger les films Ã  la tendance pour le moment."; // Optional user message
}

// --- Handle Movie Search ---
if (isset($_GET['search'])) {
    $searchQueryParam = trim($_GET['search']);
    $searchQueryDisplay = htmlspecialchars($searchQueryParam, ENT_QUOTES, 'UTF-8');
    $pageTitle = "Recherche: " . $searchQueryDisplay . " - Eiganights";

    if (!empty($searchQueryParam)) {
        $searchUrl = "https://api.themoviedb.org/3/search/movie?api_key=" . urlencode(TMDB_API_KEY) . 
                     "&language=fr-FR&query=" . urlencode($searchQueryParam);
        
        $searchResponseJson = @file_get_contents($searchUrl);
        if ($searchResponseJson !== false) {
            $searchData = json_decode($searchResponseJson, true);
            if (json_last_error() === JSON_ERROR_NONE && isset($searchData['results'])) {
                $searchResults = $searchData['results'];
            } else {
                error_log("Failed to decode search results JSON or 'results' key missing. Query: $searchQueryParam, URL: $searchUrl, Error: " . json_last_error_msg());
            }
        } else {
            error_log("Failed to fetch search results from TMDB. Query: $searchQueryParam, URL: $searchUrl");
            $_SESSION['error'] = "Erreur lors de la communication avec le service de films pour la recherche.";
        }
    }
    // If $searchQueryParam is empty after trim, no search is performed, shows trending by default.
}

include_once 'includes/header.php'; // Sets $pageTitle in <title>
?>
<?php
// echo '<main class="container">';
// echo '<h1>' . (defined('SITE_NAME') ? htmlspecialchars(SITE_NAME) : 'Eiganights') . '</h1>';
// // Display session messages (ensure CSS for these classes exists)
?>


    
    <?php if (!empty($_SESSION['message'])): ?>
        <div class="alert alert-success">
            <?php echo htmlspecialchars($_SESSION['message']); unset($_SESSION['message']); ?>
        </div>
    <?php endif; ?>
    <?php if (!empty($_SESSION['error'])): ?>
        <div class="alert alert-danger">
            <?php echo htmlspecialchars($_SESSION['error']); unset($_SESSION['error']); ?>
        </div>
    <?php endif; ?>
    <?php if (!empty($_SESSION['warning'])): ?>
        <div class="alert alert-warning">
            <?php echo htmlspecialchars($_SESSION['warning']); unset($_SESSION['warning']); ?>
        </div>
    <?php endif; ?>

    <section class="search-section" aria-labelledby="search-heading">
        <h2 id="search-heading" class="visually-hidden">Recherche de Films</h2> <?php // Hidden heading for accessibility ?>
        <form method="GET" action="index.php" class="search-box">
            <label for="search-input" class="visually-hidden">Rechercher un film</label> <?php // Hidden label for accessibility ?>
            <input type="text" id="search-input" name="search" placeholder="Ex: Inception, Star Wars..." value="<?php echo $searchQueryDisplay; ?>" />
            <input type="submit" value="Rechercher" />
        </form>
    </section>

    <?php if (!empty($searchResults)): ?>
        <section class="results-section" aria-labelledby="results-heading">
            <h2 id="results-heading">RÃ©sultats pour "<?php echo $searchQueryDisplay; ?>" :</h2>
            <div class="movies-grid">
                <?php foreach ($searchResults as $movie): ?>
                    <?php
                        $movie_id = $movie['id'] ?? null;
                        if (!$movie_id) continue; // Skip if essential data like ID is missing

                        $movie_title = $movie['title'] ?? 'Titre Inconnu';
                        $movie_poster_path = $movie['poster_path'] ?? null;
                        $movie_release_year = !empty($movie['release_date']) ? substr($movie['release_date'], 0, 4) : 'N/A';
                        $movie_overview_full = $movie['overview'] ?? 'Pas de description disponible.';
                        // Ensure mb_strimwidth is available (usually is with mbstring extension)
                        $movie_overview_short = function_exists('mb_strimwidth') 
                                                ? mb_strimwidth($movie_overview_full, 0, 100, "...")
                                                : substr($movie_overview_full, 0, 97) . (strlen($movie_overview_full) > 100 ? "..." : "");
                    ?>
                    <article class="movie">
                        <a href="movie_details.php?id=<?php echo (int)$movie_id; ?>" aria-label="DÃ©tails pour <?php echo htmlspecialchars($movie_title); ?>">
                            <?php if ($movie_poster_path): ?>
                                <img src="https://image.tmdb.org/t/p/w300<?php echo htmlspecialchars($movie_poster_path); ?>" 
                                     alt="Affiche de <?php echo htmlspecialchars($movie_title); ?>" loading="lazy" />
                            <?php else: ?>
                                <img src="assets/images/no_poster_available.png" 
                                     alt="Pas d'affiche disponible pour <?php echo htmlspecialchars($movie_title); ?>" 
                                     class="movie-poster-placeholder" loading="lazy" />
                            <?php endif; ?>
                        </a>
                        <div class="movie-info">
                            <h3 class="movie-title">
                                <a href="movie_details.php?id=<?php echo (int)$movie_id; ?>"><?php echo htmlspecialchars($movie_title); ?> (<?php echo htmlspecialchars($movie_release_year); ?>)</a>
                            </h3>
                            <p class="movie-overview"><?php echo nl2br(htmlspecialchars($movie_overview_short)); ?></p>

                            <?php if (isset($_SESSION['user_id'])): ?>
                                <form method="POST" action="add.php" class="add-watchlist-form">
                                    <input type="hidden" name="movie_id" value="<?php echo (int)$movie_id; ?>">
                                    <input type="hidden" name="movie_title" value="<?php echo htmlspecialchars($movie_title); ?>">
                                    <input type="hidden" name="poster_path" value="<?php echo htmlspecialchars($movie_poster_path ?? ''); ?>">
                                    <input type="hidden" name="redirect_url" value="<?php echo htmlspecialchars(htmlspecialchars($_SERVER['REQUEST_URI'])); // Redirect back to current page with its params ?>">
                                    <input type="submit" value="Ajouter Ã  ma watchlist" />
                                </form>
                            <?php else: ?>
                                <p class="login-prompt">
                                    <a href="login.php?redirect=<?php echo urlencode($_SERVER['REQUEST_URI']); ?>">Connectez-vous</a> pour ajouter.
                                </p>
                            <?php endif; ?>
                        </div>
                    </article>
                <?php endforeach; ?>
            </div>
        </section>
    <?php elseif (isset($_GET['search']) && $searchQueryParam !== '' && empty($searchResults)): // Executed a search but no results ?>
        <p>Aucun film trouvÃ© pour "<?php echo $searchQueryDisplay; ?>". Veuillez essayer une autre recherche ou <a href="index.php">voir les tendances</a>.</p>
    <?php else: // No search performed or search query was empty, display trending movies ?>
        <?php if (!empty($trendingMovies)): ?>
            <section class="trending-section" aria-labelledby="trending-heading">
                <h2 id="trending-heading">Films Ã  la Tendance cette semaine</h2>
                <div class="trending-movies-container">
                    <?php foreach ($trendingMovies as $movie): ?>
                        <?php
                            $movie_id = $movie['id'] ?? null;
                            if (!$movie_id) continue;

                            $movie_title = $movie['title'] ?? 'Titre Inconnu';
                            $movie_poster_path = $movie['poster_path'] ?? null;
                            $movie_release_year = !empty($movie['release_date']) ? substr($movie['release_date'], 0, 4) : '';
                            $link_title = htmlspecialchars($movie_title . ($movie_release_year ? " ($movie_release_year)" : ''));
                        ?>
                        <article class="trending-movie-item">
                            <a href="movie_details.php?id=<?php echo (int)$movie_id; ?>" title="<?php echo $link_title; ?>" aria-label="DÃ©tails pour <?php echo $link_title; ?>">
                                <?php if ($movie_poster_path): ?>
                                    <img src="https://image.tmdb.org/t/p/w300<?php echo htmlspecialchars($movie_poster_path); ?>" 
                                         alt="Affiche de <?php echo htmlspecialchars($movie_title); ?>" loading="lazy" />
                                <?php else: ?>
                                     <img src="assets/images/no_poster_available.png" 
                                          alt="Pas d'affiche disponible pour <?php echo htmlspecialchars($movie_title); ?>" 
                                          class="movie-poster-placeholder" loading="lazy" />
                                <?php endif; ?>
                            </a>
                        </article>
                    <?php endforeach; ?>
                </div>
            </section>
        <?php elseif (!isset($_GET['search'])): // Only show this if it's the initial page load and trending failed ?>
            <p>Impossible de charger les films Ã  la tendance pour le moment. Veuillez <a href="index.php">rÃ©essayer</a>.</p>
        <?php endif; ?>
    <?php endif; ?>
</main>

<?php
include_once 'includes/footer.php';
?>


--- FILE : login.php ---


<?php
/*
 * login.php
 * Handles user login and authentication.
 */
include_once 'config.php'; // Includes session_start(), $conn, TMDB_API_KEY

// If user is already logged in, redirect them to their profile page
if (isset($_SESSION['user_id'])) {
    header('Location: profile.php');
    exit;
}

$pageTitle = "Connexion - Eiganights";
$error_message = ''; // For displaying login errors to the user
$username_value = ''; // To repopulate username field on error

// Determine redirect URL after successful login
$redirectAfterLogin = 'profile.php'; // Default redirect
if (isset($_GET['redirect']) && !empty(trim($_GET['redirect']))) {
    $postedRedirectUrl = trim($_GET['redirect']);
    $urlComponents = parse_url($postedRedirectUrl);
    // Allow only relative paths or paths on the same host (simple validation)
    if (empty($urlComponents['host']) || $urlComponents['host'] === $_SERVER['HTTP_HOST']) {
        // Further validation: ensure it's not pointing to logout.php or other sensitive scripts directly
        if (!preg_match('/(logout|register|login)\.php/i', $postedRedirectUrl)) {
            $redirectAfterLogin = $postedRedirectUrl;
        }
    }
}


if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Validate that username and password are provided
    if (!isset($_POST['username'], $_POST['password']) || 
        empty(trim($_POST['username'])) || 
        empty($_POST['password']) ) { // Password can't be just spaces
        
        $error_message = "Nom d'utilisateur et mot de passe requis.";
        // Repopulate username if submitted
        if(isset($_POST['username'])) {
            $username_value = htmlspecialchars(trim($_POST['username']), ENT_QUOTES, 'UTF-8');
        }
    } else {
        $username = trim($_POST['username']);
        $password = $_POST['password']; // Do not trim password, spaces can be part of it

        // Store username for repopulation in case of error
        $username_value = htmlspecialchars($username, ENT_QUOTES, 'UTF-8');

        // Prepare SQL to prevent SQL injection (even though we only fetch)
        $sql = "SELECT id, username, password, role, is_banned FROM users WHERE username = ?";
        $stmt = $conn->prepare($sql);

        if (!$stmt) {
            error_log("Prepare failed for login: (" . $conn->errno . ") " . $conn->error . " (Code: LGN_PREP)");
            $error_message = "Une erreur système est survenue. Veuillez réessayer. (L01)";
        } else {
            $stmt->bind_param("s", $username);
            if (!$stmt->execute()) {
                error_log("Execute failed for login: (" . $stmt->errno . ") " . $stmt->error . " (Code: LGN_EXEC)");
                $error_message = "Une erreur système est survenue. Veuillez réessayer. (L02)";
            } else {
                $result = $stmt->get_result();
                if ($result->num_rows === 1) {
                    $user = $result->fetch_assoc();
                    // Check if user is banned FIRST
                    if ($user['is_banned'] == 1) {
                       $error_message = "Votre compte a été suspendu. Veuillez contacter l'assistance.";
                    } elseif (password_verify($password, $user['password'])) { // If not banned, verify password
    // Password is correct, set session variables
                       $_SESSION['user_id'] = $user['id'];
                       $_SESSION['username'] = $user['username'];
                       $_SESSION['role'] = $user['role']; // Store the user's role


                        // Regenerate session ID upon successful login to prevent session fixation
                        session_regenerate_id(true); 

                        $_SESSION['message'] = "Connexion réussie ! Bienvenue, " . htmlspecialchars($user['username']) . ".";

                          if ($user['role'] === 'admin') {
                            header('Location: admin_panel.php'); 
                          } else { 
                            header('Location: ' . $redirectAfterLogin);
                          }
                        exit;
                    } else {
                        $error_message = "Nom d'utilisateur ou mot de passe incorrect.";
                    }
                } else {
                    // Username not found
                    $error_message = "Nom d'utilisateur ou mot de passe incorrect.";
                }
            }
            $stmt->close();
        }
    }
}

include_once 'includes/header.php';
?>

<main class="container auth-form-container">
    <h1>Connexion</h1>

    <?php if (!empty($error_message)): ?>
        <div class="alert alert-danger">
            <?php echo htmlspecialchars($error_message); ?>
        </div>
    <?php endif; ?>
    <?php // Display general session messages if any (e.g., from a redirect) ?>
    <?php if (!empty($_SESSION['message'])): ?>
        <div class="alert alert-success">
            <?php echo htmlspecialchars($_SESSION['message']); unset($_SESSION['message']); ?>
        </div>
    <?php endif; ?>
     <?php if (!empty($_SESSION['login_required_message'])): ?>
        <div class="alert alert-info">
            <?php echo htmlspecialchars($_SESSION['login_required_message']); unset($_SESSION['login_required_message']); ?>
        </div>
    <?php endif; ?>


    <form method="POST" action="login.php<?php echo $redirectAfterLogin !== 'profile.php' ? '?redirect=' . urlencode($redirectAfterLogin) : ''; ?>" novalidate>
        <div class="form-group">
            <label for="username">Nom d'utilisateur:</label>
            <input type="text" id="username" name="username" placeholder="Votre nom d'utilisateur" value="<?php echo $username_value; ?>" required autofocus />
        </div>
        <div class="form-group">
            <label for="password">Mot de passe:</label>
            <input type="password" id="password" name="password" placeholder="Votre mot de passe" required />
        </div>
        <div class="form-group">
            <input type="submit" value="Se connecter" class="button-primary" />
        </div>
    </form>
    <p class="auth-links">
        Pas encore de compte ? <a href="register.php<?php echo $redirectAfterLogin !== 'profile.php' ? '?redirect=' . urlencode($redirectAfterLogin) : ''; ?>">Inscrivez-vous ici</a>.
    </p>
</main>

<?php
// $conn->close(); // Optional for scripts like this.
include_once 'includes/footer.php';
?>



--- FILE : logout.php ---


<?php
/*
 * logout.php
 * Handles user logout by destroying the session.
 */

// It's good practice to include config for consistent session handling,
// even if this script's primary goal is to destroy the session.
// config.php now ensures session_start() is called.
include_once 'config.php';

// Unset all session variables.
// This clears the data from the $_SESSION superglobal array.
$_SESSION = array();

// If it's desired to kill the session on the client side as well,
// also delete the session cookie.
// Note: This will destroy the session cookie, and not just the session data!
if (ini_get("session.use_cookies")) {
    $params = session_get_cookie_params();
    setcookie(session_name(), '', time() - 42000, // Set to a time in the past
        $params["path"], $params["domain"],
        $params["secure"], $params["httponly"]
    );
}

// Finally, destroy the session on the server.
// This invalidates the session ID.
session_destroy();

// Optional: Set a message for the next page.
// To do this, a new session would need to be started after destroying the old one.
// For simplicity, we often rely on the UI change (e.g., nav bar) as logout confirmation.
/*
if (session_status() === PHP_SESSION_NONE) { // Start a new, clean session for the message
    session_start();
}
$_SESSION['message'] = "Vous avez été déconnecté avec succès.";
*/

// Redirect to the homepage or login page.
// Homepage is generally a good default after logout.
header('Location: index.php');
exit; // Crucial to prevent further script execution after redirection.
?>


--- FILE : movie_details.php ---


<?php
/*
 * movie_details.php
 * Affiche les informations détaillées d'un film.
 * Gère la récupération des données depuis TMDB et la base de données locale.
 * Inclut des fonctionnalités de monétisation simulées pour un projet scolaire.
 */
require_once 'config.php'; // Contient les constantes, la connexion DB, et inclut functions.php

// -----------------------------------------------------------------------------
// 1. INITIALISATION & VALIDATION DES PARAMÈTRES
// -----------------------------------------------------------------------------
$movieId = null;
$loggedInUserId = $_SESSION['user_id'] ?? null;
$pageError = null;
$pageTitle = defined('SITE_NAME') ? SITE_NAME : "EigaNights";

$movieDetailsAPI = null;
$movieCreditsAPI = null;
$movieVideosAPI = null;
$movieWatchProvidersAPI = null;

$isInWatchlist = false;
$userRating = null;
$userCommentText = '';
$publicComments = [];
$sceneAnnotationThreads = [];

if (!defined('TMDB_API_KEY') || empty(TMDB_API_KEY) || TMDB_API_KEY === 'YOUR_ACTUAL_TMDB_API_KEY') {
    error_log("TMDB_API_KEY non définie ou placeholder dans config.php.");
    $pageError = "Erreur de configuration critique : La clé API pour le service de films est manquante ou incorrecte. Veuillez contacter l'administrateur du site.";
    $pageTitle = "Erreur de Configuration - " . (defined('SITE_NAME') ? SITE_NAME : "EigaNights");
}

if (!$pageError) {
    if (!isset($_GET['id']) || !is_numeric($_GET['id']) || (int)$_GET['id'] <= 0) {
        $pageError = "ID de film invalide ou manquant.";
        if (!headers_sent()) {
            $_SESSION['error'] = $pageError;
            header("Location: " . BASE_URL . "index.php");
            exit;
        }
        $pageTitle = "Erreur - " . (defined('SITE_NAME') ? SITE_NAME : "EigaNights");
    } else {
        $movieId = (int)$_GET['id'];
    }
}

// -----------------------------------------------------------------------------
// 2. RÉCUPÉRATION DES DONNÉES TMDB
// -----------------------------------------------------------------------------
if (!$pageError && $movieId) {
    $tmdbApiKey = urlencode(TMDB_API_KEY);
    $detailsUrl = "https://api.themoviedb.org/3/movie/{$movieId}?api_key={$tmdbApiKey}&language=fr-FR&append_to_response=credits,videos,watch/providers";

    if (!function_exists('fetch_tmdb_data_from_url')) { // Définir la fonction si elle n'existe pas (au cas où functions.php n'est pas inclus)
        function fetch_tmdb_data_from_url($url) {
            $context = stream_context_create(['http' => ['ignore_errors' => true]]);
            $responseJson = @file_get_contents($url, false, $context);
            if ($responseJson === false) return ['error' => "Impossible de contacter le service de films (TMDB).", 'data' => null, 'http_code' => null];
            $http_code = null;
            if (isset($http_response_header) && is_array($http_response_header)) { foreach ($http_response_header as $header) { if (preg_match('/^HTTP\/\d\.\d\s+(\d+)/', $header, $matches)) { $http_code = (int)$matches[1]; break; } } }
            $data = json_decode($responseJson, true);
            if (json_last_error() !== JSON_ERROR_NONE || ($http_code && $http_code >= 400) || !isset($data['id'])) {
                $apiError = "Erreur lors de la récupération des informations du film.";
                if (isset($data['status_message'])) $apiError = htmlspecialchars($data['status_message']);
                elseif ($http_code === 401) $apiError = "Clé API TMDB invalide ou non autorisée.";
                elseif ($http_code === 404 || (isset($data['status_code']) && $data['status_code'] == 34)) $apiError = "Film non trouvé avec l'ID fourni.";
                return ['error' => $apiError, 'data' => null, 'http_code' => $http_code];
            }
            return ['error' => null, 'data' => $data, 'http_code' => $http_code];
        }
    }

    $tmdbResult = fetch_tmdb_data_from_url($detailsUrl);

    if ($tmdbResult['error']) {
        error_log("Erreur TMDB pour MovieID {$movieId}: " . $tmdbResult['error'] . " (Code HTTP: " . ($tmdbResult['http_code'] ?? 'N/A') . ") URL: " . $detailsUrl);
        $pageError = $tmdbResult['error'];
    } else {
        $movieDetailsAPI = $tmdbResult['data'];
        $movieCreditsAPI = $movieDetailsAPI['credits'] ?? null;
        $movieVideosAPI = $movieDetailsAPI['videos']['results'] ?? null;
        $movieWatchProvidersAPI = $movieDetailsAPI['watch/providers']['results'] ?? null;
        unset($movieDetailsAPI['credits'], $movieDetailsAPI['videos'], $movieDetailsAPI['watch/providers']);
    }
}

// -----------------------------------------------------------------------------
// 3. RÉCUPÉRATION DES DONNÉES LOCALES
// -----------------------------------------------------------------------------
if (!$pageError && $movieDetailsAPI && $movieId) {
    if ($loggedInUserId) {
        try {
            $stmt = $conn->prepare("SELECT 1 FROM watchlist WHERE user_id = ? AND movie_id = ?");
            if ($stmt) { $stmt->bind_param("ii", $loggedInUserId, $movieId); $stmt->execute(); $stmt->store_result(); $isInWatchlist = ($stmt->num_rows > 0); $stmt->close(); } else { error_log("Erreur DB Prepare (MD_WL_CHK): " . $conn->error); }
        } catch (mysqli_sql_exception $e) { error_log("Exception DB (MD_WL_CHK): " . $e->getMessage());}

        try {
            $stmt = $conn->prepare("SELECT rating FROM ratings WHERE user_id = ? AND movie_id = ?");
            if ($stmt) { $stmt->bind_param("ii", $loggedInUserId, $movieId); $stmt->execute(); $result = $stmt->get_result(); if ($row = $result->fetch_assoc()) $userRating = (int)$row['rating']; $stmt->close(); } else { error_log("Erreur DB Prepare (MD_URAT_SEL): " . $conn->error); }
        } catch (mysqli_sql_exception $e) { error_log("Exception DB (MD_URAT_SEL): " . $e->getMessage());}
        
        try {
            $stmt = $conn->prepare("SELECT comment FROM comments WHERE user_id = ? AND movie_id = ? ORDER BY commented_at DESC LIMIT 1");
            if ($stmt) { $stmt->bind_param("ii", $loggedInUserId, $movieId); $stmt->execute(); $result = $stmt->get_result(); if ($row = $result->fetch_assoc()) $userCommentText = $row['comment']; $stmt->close(); } else { error_log("Erreur DB Prepare (MD_UCOM_SEL): " . $conn->error); }
        } catch (mysqli_sql_exception $e) { error_log("Exception DB (MD_UCOM_SEL): " . $e->getMessage());}
    }

    try {
        $stmt = $conn->prepare("SELECT c.comment, c.commented_at, u.username, u.id as comment_user_id FROM comments c JOIN users u ON c.user_id = u.id WHERE c.movie_id = ? ORDER BY c.commented_at DESC");
        if ($stmt) { $stmt->bind_param("i", $movieId); $stmt->execute(); $result = $stmt->get_result(); while ($row = $result->fetch_assoc()) $publicComments[] = $row; $stmt->close(); } else { error_log("Erreur DB Prepare (MD_PCOM_SEL): " . $conn->error); }
    } catch (mysqli_sql_exception $e) { error_log("Exception DB (MD_PCOM_SEL): " . $e->getMessage());}

    try {
        $stmt = $conn->prepare("SELECT ft.id, ft.title, ft.scene_start_time, ft.scene_description_short, u.username as author_username, u.id as author_id, ft.created_at FROM forum_threads ft JOIN users u ON ft.user_id = u.id WHERE ft.movie_id = ? AND (ft.scene_start_time IS NOT NULL OR ft.scene_description_short IS NOT NULL) ORDER BY ft.created_at DESC");
        if ($stmt) { $stmt->bind_param("i", $movieId); $stmt->execute(); $result = $stmt->get_result(); while ($row = $result->fetch_assoc()) $sceneAnnotationThreads[] = $row; $stmt->close(); } else { error_log("Erreur DB Prepare (MD_SCENE_THREADS_SEL): " . $conn->error); }
    } catch (mysqli_sql_exception $e) { error_log("Exception DB (MD_SCENE_THREADS_SEL): " . $e->getMessage());}
}

// -----------------------------------------------------------------------------
// 4. PRÉPARATION DES DONNÉES POUR L'AFFICHAGE
// -----------------------------------------------------------------------------
$site_name_const = defined('SITE_NAME') ? SITE_NAME : "EigaNights";

if ($pageError) {
    if (!isset($pageTitle) || $pageTitle === $site_name_const) $pageTitle = "Erreur - " . $site_name_const;
    $displayTitle = "Erreur";
    $posterAltText = "Erreur de chargement";
} elseif ($movieDetailsAPI && !empty($movieDetailsAPI['title'])) {
    $displayTitle = htmlspecialchars($movieDetailsAPI['title']);
    $pageTitle = $displayTitle . " - " . $site_name_const;
    $posterAltText = "Affiche de " . $displayTitle;
} else {
    $displayTitle = "Détails du Film Indisponibles";
    $pageTitle = $displayTitle . " - " . $site_name_const;
    $posterAltText = "Pas d'affiche disponible";
    if (!$pageError) $pageError = "Les informations de ce film n'ont pu être chargées.";
}

$posterPath = $movieDetailsAPI['poster_path'] ?? null;
$posterUrl = ($pageError && !$posterPath)
    ? BASE_URL . "assets/images/no_poster_available.png"
    : ($posterPath ? "https://image.tmdb.org/t/p/w500" . htmlspecialchars($posterPath) : BASE_URL . "assets/images/no_poster_available.png");

$releaseYear = !empty($movieDetailsAPI['release_date']) ? substr($movieDetailsAPI['release_date'], 0, 4) : 'N/A';
$tagline = !empty($movieDetailsAPI['tagline']) ? htmlspecialchars($movieDetailsAPI['tagline']) : '';
$genres = !empty($movieDetailsAPI['genres']) ? htmlspecialchars(implode(', ', array_column($movieDetailsAPI['genres'], 'name'))) : 'N/A';
$runtimeMinutes = $movieDetailsAPI['runtime'] ?? 0;
$runtime = $runtimeMinutes > 0 ? $runtimeMinutes . ' minutes' : 'N/A';
$tmdbVoteAverage = !empty($movieDetailsAPI['vote_average']) && $movieDetailsAPI['vote_average'] > 0 ? number_format($movieDetailsAPI['vote_average'], 1) . '/10' : 'N/A';
$tmdbVoteCount = (int)($movieDetailsAPI['vote_count'] ?? 0);
$overview = !empty($movieDetailsAPI['overview']) ? nl2br(htmlspecialchars($movieDetailsAPI['overview'])) : 'Synopsis non disponible.';

$trailerKey = null;
if (!empty($movieVideosAPI)) {
    foreach ($movieVideosAPI as $video) {
        if (isset($video['site'], $video['type']) && strtolower($video['site']) === 'youtube' && strtolower($video['type']) === 'trailer' && !empty($video['key'])) {
            $trailerKey = htmlspecialchars($video['key']);
            break;
        }
    }
}

$directors = [];
if (!empty($movieCreditsAPI['crew'])) {
    foreach ($movieCreditsAPI['crew'] as $crewMember) {
        if (isset($crewMember['job'], $crewMember['name']) && $crewMember['job'] === 'Director') {
            $directors[] = htmlspecialchars($crewMember['name']);
        }
    }
}
$directorsFormatted = !empty($directors) ? implode(', ', $directors) : 'N/A';
$cast = !empty($movieCreditsAPI['cast']) ? array_slice($movieCreditsAPI['cast'], 0, 10) : [];

// -----------------------------------------------------------------------------
// DÉBUT DE L'AFFICHAGE HTML
// -----------------------------------------------------------------------------
include_once 'includes/header.php';
?>

<main class="container movie-detail-page" role="main">

    <?php foreach (['message', 'error', 'warning', 'rate_comment_message', 'rate_comment_error', 'rate_comment_warning'] as $msgKey): ?>
        <?php if (!empty($_SESSION[$msgKey])): ?>
            <div class="alert <?php echo strpos($msgKey, 'error') !== false ? 'alert-danger' : (strpos($msgKey, 'warning') !== false ? 'alert-warning' : 'alert-success'); ?>" role="alert">
                <?php echo htmlspecialchars($_SESSION[$msgKey]); unset($_SESSION[$msgKey]); ?>
            </div>
        <?php endif; ?>
    <?php endforeach; ?>

    <?php if ($pageError && !$movieDetailsAPI): ?>
        <div class="alert alert-danger" role="alert"><?php echo htmlspecialchars($pageError); ?></div>
    <?php elseif ($pageError && $movieDetailsAPI): ?>
         <div class="alert alert-warning" role="alert">
            <?php echo htmlspecialchars($pageError); ?>
            <br><small>Les informations de base du film sont affichées ci-dessous.</small>
        </div>
    <?php endif; ?>

    <?php if ($movieDetailsAPI): // Afficher les détails seulement si $movieDetailsAPI est chargé ?>
    <article class="movie-details-content card" aria-labelledby="movie-title-heading">
        <header class="movie-main-header">
            <div class="movie-poster">
                <img src="<?php echo $posterUrl; ?>" alt="<?php echo $posterAltText; ?>" class="movie-detail-poster" loading="lazy">
            </div>
            <div class="movie-meta-info">
                <h1 id="movie-title-heading"><?php echo $displayTitle; ?> <span class="release-year">(<?php echo $releaseYear; ?>)</span></h1>
                <?php if ($tagline): ?><p class="tagline"><em><?php echo $tagline; ?></em></p><?php endif; ?>
                
                <div class="meta-grid">
                    <p><strong>Genres:</strong> <?php echo $genres; ?></p>
                    <p><strong>Durée:</strong> <?php echo $runtime; ?></p>
                    <p><strong>Note TMDB:</strong> <?php echo $tmdbVoteAverage; ?> (<?php echo number_format($tmdbVoteCount); ?> votes)</p>
                    <p><strong>Réalisateur(s):</strong> <?php echo $directorsFormatted; ?></p>
                </div>

                <?php // Section Liens de Streaming
                if (defined('DIRECT_STREAMING_LINKS_ENABLED') && DIRECT_STREAMING_LINKS_ENABLED && !empty($movieWatchProvidersAPI) && defined('STREAMING_PLATFORMS_OFFICIAL_LINKS') && is_array(STREAMING_PLATFORMS_OFFICIAL_LINKS)) {
                    $availableStreams = [];
                    $targetRegions = (defined('ALLOWED_API_REGIONS') && is_array(ALLOWED_API_REGIONS) && !empty(ALLOWED_API_REGIONS))
                                     ? ALLOWED_API_REGIONS
                                     : array_keys($movieWatchProvidersAPI);

                    foreach ($targetRegions as $regionCode) {
                        if (isset($movieWatchProvidersAPI[$regionCode]) && is_array($movieWatchProvidersAPI[$regionCode])) {
                            $providerTypesToShow = ['flatrate']; // Uniquement flatrate
                            foreach ($providerTypesToShow as $type) {
                                if (isset($movieWatchProvidersAPI[$regionCode][$type]) && is_array($movieWatchProvidersAPI[$regionCode][$type])) {
                                    foreach ($movieWatchProvidersAPI[$regionCode][$type] as $provider) {
                                        if (isset($provider['provider_id'], STREAMING_PLATFORMS_OFFICIAL_LINKS[$provider['provider_id']])) {
                                            $platformInfo = STREAMING_PLATFORMS_OFFICIAL_LINKS[$provider['provider_id']];
                                            $searchUrl = str_replace('{MOVIE_TITLE_URL_ENCODED}', urlencode($displayTitle), $platformInfo['search_url_pattern']);
                                            $streamKey = $provider['provider_id'] . '-' . $regionCode; // Clé simplifiée
                                            if (!isset($availableStreams[$streamKey])) {
                                                $availableStreams[$streamKey] = [
                                                    'name' => $platformInfo['name'],
                                                    'logo' => BASE_URL . $platformInfo['logo'],
                                                    'url' => $searchUrl,
                                                    'region' => $regionCode
                                                ];
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (!empty($availableStreams)): ?>
                    <section class="movie-streaming-options" aria-labelledby="streaming-options-heading">
                        <h3 id="streaming-options-heading">Regarder ce film maintenant (Liens simulés) :</h3>
                        <div class="streaming-providers-list">
                            <?php foreach ($availableStreams as $streamInfo): ?>
                                <a href="<?php echo htmlspecialchars($streamInfo['url']); ?>" target="_blank" rel="noopener noreferrer sponsored" class="streaming-provider-link" title="Chercher <?php echo $displayTitle; ?> sur <?php echo htmlspecialchars($streamInfo['name']); ?> (<?php echo htmlspecialchars($streamInfo['region']); ?>)">
                                    <img src="<?php echo htmlspecialchars($streamInfo['logo']); ?>" alt="Logo <?php echo htmlspecialchars($streamInfo['name']); ?>">
                                    <span><?php echo htmlspecialchars($streamInfo['name']); ?> <small>(<?php echo htmlspecialchars($streamInfo['region']); ?>)</small></span>
                                </a>
                            <?php endforeach; ?>
                        </div>
                        <small class="affiliate-disclosure">Note: Simulation pour projet scolaire. La disponibilité réelle peut varier.</small>
                    </section>
                    <?php elseif (defined('DIRECT_STREAMING_LINKS_ENABLED') && DIRECT_STREAMING_LINKS_ENABLED): ?>
                    <section class="movie-streaming-options">
                        <p><small>Aucune option d'abonnement direct trouvée pour ce film dans les régions configurées via TMDB.</small></p>
                    </section>
                    <?php endif;
                }
                ?>

                <div class="movie-user-actions">
                    <?php if ($loggedInUserId): ?>
                        <form method="POST" action="<?php echo $isInWatchlist ? (BASE_URL.'remove_from_watchlist.php') : (BASE_URL.'add.php'); ?>" class="inline-form">
                            <input type="hidden" name="movie_id" value="<?php echo $movieId; ?>">
                            <input type="hidden" name="movie_title" value="<?php echo $displayTitle; ?>">
                            <input type="hidden" name="poster_path" value="<?php echo htmlspecialchars($posterPath ?? ''); ?>">
                            <input type="hidden" name="redirect_url" value="<?php echo htmlspecialchars($_SERVER['REQUEST_URI']); ?>">
                            <button type="submit" class="button <?php echo $isInWatchlist ? 'button-danger' : 'button-primary'; ?>">
                                <?php echo $isInWatchlist ? '➖ Retirer Watchlist' : '➕ Ajouter Watchlist'; ?>
                            </button>
                        </form>
                    <?php else: ?>
                        <p class="login-prompt-actions"><a href="<?php echo BASE_URL; ?>login.php?redirect=<?php echo urlencode($_SERVER['REQUEST_URI']); ?>">Connectez-vous</a> pour gérer votre watchlist ou noter.</p>
                    <?php endif; ?>
                </div>
            </div>
        </header>

        <div class="movie-content-columns">
            <div class="main-column">
                <?php if ($overview !== 'Synopsis non disponible.'): ?>
                <section class="movie-synopsis card-section" aria-labelledby="synopsis-heading">
                    <h2 id="synopsis-heading">Synopsis</h2>
                    <p><?php echo $overview; ?></p>
                </section>
                <?php endif; ?>

                <?php if ($trailerKey): ?>
                <section class="movie-trailer card-section" aria-labelledby="trailer-heading">
                    <h2 id="trailer-heading">Bande-annonce</h2>
                    <div class="trailer-container">
                        <iframe src="https://www.youtube.com/embed/<?php echo $trailerKey; ?>" 
                                title="Bande-annonce YouTube pour <?php echo $displayTitle; ?>"
                                frameborder="0" 
                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                                allowfullscreen loading="lazy"></iframe>
                    </div>
                </section>
                <?php endif; ?>

                <?php if (!empty($cast)): ?>
                <section class="movie-cast card-section" aria-labelledby="cast-heading">
                    <h2 id="cast-heading">Acteurs Principaux</h2>
                    <div class="cast-list">
                        <?php foreach ($cast as $actor):
                            $actorName = htmlspecialchars($actor['name'] ?? 'Nom inconnu');
                            $actorChar = htmlspecialchars($actor['character'] ?? 'Rôle inconnu');
                            $actorPhotoUrl = !empty($actor['profile_path']) 
                                        ? 'https://image.tmdb.org/t/p/w185' . htmlspecialchars($actor['profile_path'])
                                        : BASE_URL . 'assets/images/no_actor_photo.png';
                        ?>
                        <figure class="actor">
                            <img src="<?php echo $actorPhotoUrl; ?>" alt="Photo de <?php echo $actorName; ?>" loading="lazy">
                            <figcaption>
                                <strong><?php echo $actorName; ?></strong><br>
                                <small>en <?php echo $actorChar; ?></small>
                            </figcaption>
                        </figure>
                        <?php endforeach; ?>
                    </div>
                </section>
                <?php endif; ?>
                
                <?php // L'ancien emplacement de la pub principale ("banner_slots") a été déplacé en bas de page. ?>
            </div>

            <aside class="sidebar-column">
                <?php // Publicité simulée dans la sidebar (à côté du synopsis/trailer/cast) ?>
                <?php if (defined('PLACEHOLDER_ADS_ENABLED') && PLACEHOLDER_ADS_ENABLED && function_exists('generate_simulated_ad_slot_content')): ?>
                <section class="advertisement-slot card-section sticky-sidebar-ad" role="complementary" aria-label="Espace publicitaire sidebar (simulation)">
                    <?php echo generate_simulated_ad_slot_content(); // Appel simplifié, la fonction choisit au hasard dans le dossier configuré ?>
                </section>
                <?php endif; ?>

                <?php if ($loggedInUserId): ?>
                <section class="user-interaction-section card-section card" aria-labelledby="user-rating-comment-heading">
                    <h2 id="user-rating-comment-heading">Votre Avis</h2>
                    <form method="POST" action="<?php echo BASE_URL; ?>rate_comment.php" novalidate>
                        <input type="hidden" name="movie_id" value="<?php echo $movieId; ?>">
                        <input type="hidden" name="redirect_url" value="<?php echo htmlspecialchars($_SERVER['REQUEST_URI']); ?>">
                        <div class="form-group">
                            <label for="rating">Votre Note (1-10):</label>
                            <select name="rating" id="rating">
                                <option value="">-- Non Noté --</option>
                                <?php for ($i = 10; $i >= 1; $i--): ?>
                                    <option value="<?php echo $i; ?>" <?php echo ($userRating === $i) ? 'selected' : ''; ?>><?php echo $i; ?> ★</option>
                                <?php endfor; ?>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="comment">Votre Commentaire:</label>
                            <textarea name="comment" id="comment" rows="5" placeholder="Laissez un commentaire..."><?php echo htmlspecialchars($userCommentText); ?></textarea>
                        </div>
                        <button type="submit" class="button button-primary">Soumettre l'Avis</button>
                    </form>
                </section>
                
                <section class="annotate-scene-action card-section card" aria-labelledby="annotate-scene-heading">
                    <h2 id="annotate-scene-heading">Discuter une Scène</h2>
                    <p>Analysez une scène de "<?php echo $displayTitle; ?>" ou posez une question.</p>
                    <a href="<?php echo BASE_URL; ?>forum_create_thread.php?movie_id=<?php echo $movieId; ?>&movie_title=<?php echo urlencode($displayTitle); ?>" class="button button-secondary">
                        💬 Annoter & Démarrer une Discussion
                    </a>
                </section>
                <?php endif; ?>
            </aside>
        </div> <?php // Fin .movie-content-columns ?>

        <?php // Sections pleine largeur en dessous des colonnes ?>
        <?php if (!empty($sceneAnnotationThreads)): ?>
        <section class="scene-annotations-list-section card-section card" aria-labelledby="scene-annotations-heading">
            <h2 id="scene-annotations-heading">Discussions de Scènes (<?php echo count($sceneAnnotationThreads); ?>)</h2>
            <ul class="annotations-list">
                <?php foreach ($sceneAnnotationThreads as $saThread): ?>
                    <li class="annotation-item">
                        <a href="<?php echo BASE_URL; ?>forum_view_thread.php?id=<?php echo (int)$saThread['id']; ?>" class="annotation-title">
                            <strong><?php echo htmlspecialchars($saThread['title']); ?></strong>
                        </a>
                        <?php if (!empty($saThread['scene_description_short'])): ?>
                            <p class="scene-desc-preview"><em>Scène : <?php echo htmlspecialchars($saThread['scene_description_short']); ?></em></p>
                        <?php endif; ?>
                        <?php if (!empty($saThread['scene_start_time'])): ?>
                            <p class="scene-time-preview">Temps : <?php echo htmlspecialchars($saThread['scene_start_time']); ?></p>
                        <?php endif; ?>
                        <p class="annotation-meta">
                            Par <a href="<?php echo BASE_URL; ?>view_profile.php?id=<?php echo (int)$saThread['author_id']; ?>"><?php echo htmlspecialchars($saThread['author_username']); ?></a>
                            le <?php echo date('d/m/Y', strtotime($saThread['created_at'])); ?>
                        </p>
                    </li>
                <?php endforeach; ?>
            </ul>
        </section>
        <?php elseif ($loggedInUserId && $movieDetailsAPI && !$pageError): ?>
             <section class="scene-annotations-list-section card-section card text-center">
                 <p>Aucune discussion de scène pour ce film. <a href="<?php echo BASE_URL; ?>forum_create_thread.php?movie_id=<?php echo $movieId; ?>&movie_title=<?php echo urlencode($displayTitle); ?>">Soyez le premier !</a></p>
             </section>
        <?php endif; ?>

        <section class="public-comments-section card-section card" aria-labelledby="public-comments-heading">
            <h2 id="public-comments-heading">Commentaires (<?php echo count($publicComments); ?>)</h2>
            <?php if (!empty($publicComments)): ?>
                <div class="comments-list">
                    <?php foreach ($publicComments as $pComment): ?>
                        <div class="comment-item">
                            <p class="comment-meta">
                                <strong>
                                    <a href="<?php echo BASE_URL; ?>view_profile.php?id=<?php echo (int)$pComment['comment_user_id']; ?>">
                                        <?php echo htmlspecialchars($pComment['username']); ?>
                                    </a>
                                </strong>
                                <time datetime="<?php echo date('c', strtotime($pComment['commented_at'])); ?>">(Le <?php echo date('d/m/Y à H:i', strtotime($pComment['commented_at'])); ?>)</time>
                            </p>
                            <p class="comment-text"><?php echo nl2br(htmlspecialchars($pComment['comment'])); ?></p>
                        </div>
                    <?php endforeach; ?>
                </div>
            <?php else: ?>
                <p class="text-center">Aucun commentaire pour ce film. <?php if ($loggedInUserId) echo "Soyez le premier à commenter !"; else echo '<a href="'.BASE_URL.'login.php?redirect=' . urlencode($_SERVER['REQUEST_URI']) . '">Connectez-vous</a> pour commenter.'; ?></p>
            <?php endif; ?>
        </section>

        <?php // NOUVEL EMPLACEMENT : Publicité simulée en bas de page ?>
        <?php if (defined('PLACEHOLDER_ADS_ENABLED') && PLACEHOLDER_ADS_ENABLED && function_exists('generate_simulated_ad_slot_content')): ?>
        <aside class="advertisement-slot bottom-ad-slot card-section" role="complementary" aria-label="Espace publicitaire en bas de page (simulation)">
            <?php echo generate_simulated_ad_slot_content(); // Appel simplifié ?>
        </aside>
        <?php endif; ?>

    </article> <?php // Fin .movie-details-content ?>
    <?php
    elseif (!$pageError): // Si $movieDetailsAPI est null mais pas d'erreur critique explicite.
        echo '<div class="alert alert-warning" role="alert">Les informations pour ce film ne sont pas disponibles pour une raison inconnue.</div>';
    endif; // Fin de if ($movieDetailsAPI) / elseif (!$pageError)
    ?>
</main>

<?php
include_once 'includes/footer.php';
?>


--- FILE : profile.php ---


<?php
/*
 * profile.php
 * Displays and manages the logged-in user's profile.
 */
include_once 'config.php'; // Handles session_start(), $conn, TMDB_API_KEY

// Check if user is logged in; if not, redirect to login page
if (!isset($_SESSION['user_id'])) {
    $_SESSION['login_required_message'] = "Vous devez être connecté pour voir votre profil.";
    header('Location: login.php?redirect=profile.php'); // Redirect back to profile after login
    exit;
}

$loggedInUserId = (int)$_SESSION['user_id'];
$user = null; // Will hold user's profile data
$watchlist = [];
$pendingRequests = [];
$friends = [];
$pageTitle = "Mon Profil - Eiganights"; // Default

// --- Fetch User's Core Profile Data ---
$stmtUser = $conn->prepare("SELECT id, username, bio, created_at, profile_visibility FROM users WHERE id = ?");
if (!$stmtUser) {
    error_log("Prepare failed (PROF_USER_SEL): " . $conn->error);
    $_SESSION['error'] = "Erreur lors du chargement de votre profil. (P01)";
    // Redirect to a safe page or show error on current page if header/footer can still load
    header('Location: index.php');
    exit;
}
$stmtUser->bind_param("i", $loggedInUserId);
if (!$stmtUser->execute()) {
    error_log("Execute failed (PROF_USER_SEL): " . $stmtUser->error);
    $_SESSION['error'] = "Erreur lors du chargement de votre profil. (P02)";
    $stmtUser->close();
    header('Location: index.php');
    exit;
}
$resultUser = $stmtUser->get_result();
if ($user = $resultUser->fetch_assoc()) {
    $pageTitle = "Profil de " . htmlspecialchars($user['username'], ENT_QUOTES, 'UTF-8') . " - Eiganights";
} else {
    // Should not happen if user_id in session is valid, but handle defensively
    error_log("User with ID $loggedInUserId not found in database, but session exists.");
    session_destroy(); // Destroy potentially corrupt session
    $_SESSION['error'] = "Erreur de session. Veuillez vous reconnecter.";
    header('Location: login.php');
    exit;
}
$stmtUser->close();


// --- Handle Profile Update (Bio and Visibility) ---
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $updatePerformed = false;

    // Update Bio
    if (isset($_POST['bio'])) { // Presence of 'bio' key indicates intent to update it (even if empty)
        $newBio = trim($_POST['bio']); // Allow empty bio

        $stmtUpdateBio = $conn->prepare("UPDATE users SET bio = ? WHERE id = ?");
        if (!$stmtUpdateBio) {
            error_log("Prepare failed (PROF_BIO_UPD): " . $conn->error);
            $_SESSION['error'] = (isset($_SESSION['error']) ? $_SESSION['error'] . " " : "") . "Erreur système (Bio). (P03)";
        } else {
            $stmtUpdateBio->bind_param("si", $newBio, $loggedInUserId);
            if ($stmtUpdateBio->execute()) {
                $_SESSION['message'] = (isset($_SESSION['message']) ? $_SESSION['message'] . " " : "") . "Bio mise à jour.";
                $user['bio'] = $newBio; // Update local $user array
                $updatePerformed = true;
            } else {
                error_log("Execute failed (PROF_BIO_UPD): " . $stmtUpdateBio->error);
                $_SESSION['error'] = (isset($_SESSION['error']) ? $_SESSION['error'] . " " : "") . "Erreur lors de la mise à jour de la bio. (P04)";
            }
            $stmtUpdateBio->close();
        }
    }

    // Update Profile Visibility
    if (isset($_POST['profile_visibility'])) {
        $newVisibility = trim($_POST['profile_visibility']);
        $allowedVisibilities = ['public', 'friends_only', 'private'];

        if (in_array($newVisibility, $allowedVisibilities)) {
            $stmtUpdateVis = $conn->prepare("UPDATE users SET profile_visibility = ? WHERE id = ?");
            if (!$stmtUpdateVis) {
                error_log("Prepare failed (PROF_VIS_UPD): " . $conn->error);
                $_SESSION['error'] = (isset($_SESSION['error']) ? $_SESSION['error'] . " " : "") . "Erreur système (Visibilité). (P05)";
            } else {
                $stmtUpdateVis->bind_param("si", $newVisibility, $loggedInUserId);
                if ($stmtUpdateVis->execute()) {
                    $_SESSION['message'] = (isset($_SESSION['message']) ? $_SESSION['message'] . " " : "") . "Visibilité du profil mise à jour.";
                    $user['profile_visibility'] = $newVisibility; // Update local $user array
                    $updatePerformed = true;
                } else {
                    error_log("Execute failed (PROF_VIS_UPD): " . $stmtUpdateVis->error);
                    $_SESSION['error'] = (isset($_SESSION['error']) ? $_SESSION['error'] . " " : "") . "Erreur lors de la mise à jour de la visibilité. (P06)";
                }
                $stmtUpdateVis->close();
            }
        } else {
            $_SESSION['error'] = (isset($_SESSION['error']) ? $_SESSION['error'] . " " : "") . "Option de visibilité invalide sélectionnée.";
        }
    }

    if ($updatePerformed) {
        // Redirect after POST to prevent form resubmission (Post/Redirect/Get pattern)
        header('Location: profile.php');
        exit;
    }
    // If only errors occurred, no redirect here, errors will be shown on page reload.
}


// --- Fetch User's Watchlist ---
$stmtWatchlist = $conn->prepare("SELECT movie_id, movie_title, poster_path FROM watchlist WHERE user_id = ? ORDER BY added_at DESC");
if (!$stmtWatchlist) {
    error_log("Prepare failed (PROF_WL_SEL): " . $conn->error);
    $_SESSION['error_watchlist'] = "Erreur lors du chargement de la watchlist. (P07)"; // Use specific error key
} else {
    $stmtWatchlist->bind_param("i", $loggedInUserId);
    if ($stmtWatchlist->execute()) {
        $resultWatchlist = $stmtWatchlist->get_result();
        while ($row = $resultWatchlist->fetch_assoc()) {
            $watchlist[] = $row;
        }
    } else {
        error_log("Execute failed (PROF_WL_SEL): " . $stmtWatchlist->error);
        $_SESSION['error_watchlist'] = "Erreur lors du chargement de la watchlist. (P08)";
    }
    $stmtWatchlist->close();
}


// --- Fetch Pending Friend Requests (Requests sent TO the logged-in user) ---
$sqlPending = "
    SELECT u.id, u.username 
    FROM friendships f
    JOIN users u ON f.user_one_id = u.id  -- User who sent the request
    WHERE f.user_two_id = ?               -- LoggedInUser is user_two_id (receiver)
      AND f.status = 'pending' 
      AND f.action_user_id = f.user_one_id -- Action user is the sender
    UNION ALL
    SELECT u.id, u.username
    FROM friendships f
    JOIN users u ON f.user_two_id = u.id -- User who sent the request
    WHERE f.user_one_id = ?              -- LoggedInUser is user_one_id (receiver)
      AND f.status = 'pending'
      AND f.action_user_id = f.user_two_id -- Action user is the sender
";
// This complex query is due to the (user_one_id < user_two_id) constraint.
// A simpler way might be to query friendships where loggedInUserId is user_one or user_two, status is pending,
// AND action_user_id is NOT loggedInUserId.
$sqlPendingSimplified = "
    SELECT u.id, u.username, f.action_user_id
    FROM friendships f
    JOIN users u ON (CASE 
                        WHEN f.user_one_id = ? THEN f.user_two_id 
                        ELSE f.user_one_id 
                    END) = u.id
    WHERE (f.user_one_id = ? OR f.user_two_id = ?) 
      AND f.status = 'pending' 
      AND f.action_user_id != ? 
    ORDER BY u.username"; // Order for consistent display

$stmtPending = $conn->prepare($sqlPendingSimplified);
if (!$stmtPending) {
    error_log("Prepare failed (PROF_FR_PEND_SEL): " . $conn->error);
    $_SESSION['error_friends'] = "Erreur (demandes d'amis). (P09)";
} else {
    $stmtPending->bind_param("iiii", $loggedInUserId, $loggedInUserId, $loggedInUserId, $loggedInUserId);
    if ($stmtPending->execute()) {
        $resultPending = $stmtPending->get_result();
        while ($row = $resultPending->fetch_assoc()) {
            // Double check if the action_user_id is indeed the other user
            if ($row['action_user_id'] == $row['id']) { // $row['id'] is the ID of the other user
                $pendingRequests[] = $row;
            }
        }
    } else {
        error_log("Execute failed (PROF_FR_PEND_SEL): " . $stmtPending->error);
        $_SESSION['error_friends'] = "Erreur (demandes d'amis). (P10)";
    }
    $stmtPending->close();
}


// --- Fetch Accepted Friends ---
$sqlFriends = "
    SELECT u.id, u.username 
    FROM friendships f
    JOIN users u ON (CASE 
                        WHEN f.user_one_id = ? THEN f.user_two_id 
                        ELSE f.user_one_id 
                    END) = u.id
    WHERE (f.user_one_id = ? OR f.user_two_id = ?) 
      AND f.status = 'accepted'
    ORDER BY u.username"; // Order for consistent display

$stmtFriends = $conn->prepare($sqlFriends);
if (!$stmtFriends) {
    error_log("Prepare failed (PROF_FR_ACC_SEL): " . $conn->error);
     $_SESSION['error_friends'] = (isset($_SESSION['error_friends']) ? $_SESSION['error_friends'] . " " : "") . "Erreur (liste d'amis). (P11)";
} else {
    $stmtFriends->bind_param("iii", $loggedInUserId, $loggedInUserId, $loggedInUserId);
    if ($stmtFriends->execute()) {
        $resultFriends = $stmtFriends->get_result();
        while ($row = $resultFriends->fetch_assoc()) {
            $friends[] = $row;
        }
    } else {
        error_log("Execute failed (PROF_FR_ACC_SEL): " . $stmtFriends->error);
        $_SESSION['error_friends'] = (isset($_SESSION['error_friends']) ? $_SESSION['error_friends'] . " " : "") . "Erreur (liste d'amis). (P12)";
    }
    $stmtFriends->close();
}

$mySceneAnnotations = [];
$sqlMyAnnotations = "SELECT id, title, movie_title, movie_id, scene_start_time, scene_description_short, created_at 
                     FROM forum_threads 
                     WHERE user_id = ? AND (scene_start_time IS NOT NULL OR scene_description_short IS NOT NULL)
                     ORDER BY created_at DESC";
$stmtMyAnnotations = $conn->prepare($sqlMyAnnotations);
if (!$stmtMyAnnotations) {
    error_log("Prepare failed (PROF_MY_ANNOT_SEL): " . $conn->error);
    $_SESSION['error_annotations'] = "Erreur chargement annotations. (P13)";
} else {
    $stmtMyAnnotations->bind_param("i", $loggedInUserId);
    if ($stmtMyAnnotations->execute()) {
        $resultMyAnnotations = $stmtMyAnnotations->get_result();
        while ($row = $resultMyAnnotations->fetch_assoc()) {
            $mySceneAnnotations[] = $row;
        }
    } else {
        error_log("Execute failed (PROF_MY_ANNOT_SEL): " . $stmtMyAnnotations->error);
        $_SESSION['error_annotations'] = "Erreur chargement annotations. (P14)";
    }
    $stmtMyAnnotations->close();
}

include_once 'includes/header.php';
?>

<main class="container profile-page">
    <h1>Profil de <?php echo htmlspecialchars($user['username'], ENT_QUOTES, 'UTF-8'); ?></h1>

    <?php // Display session messages ?>
    <?php if (!empty($_SESSION['message'])): ?>
        <div class="alert alert-success"><?php echo htmlspecialchars($_SESSION['message']); unset($_SESSION['message']); ?></div>
    <?php endif; ?>
    <?php if (!empty($_SESSION['error'])): ?>
        <div class="alert alert-danger"><?php echo htmlspecialchars($_SESSION['error']); unset($_SESSION['error']); ?></div>
    <?php endif; ?>
    <?php if (!empty($_SESSION['warning'])): ?>
        <div class="alert alert-warning"><?php echo htmlspecialchars($_SESSION['warning']); unset($_SESSION['warning']); ?></div>
    <?php endif; ?>

    <section class="profile-management card">
        <h2>Modifier mes informations</h2>
        <form method="POST" action="profile.php" novalidate>
            <div class="form-group">
                <label for="bio">Ma Bio:</label>
                <textarea name="bio" id="bio" rows="4" placeholder="Parlez un peu de vous..."><?php echo htmlspecialchars($user['bio'] ?? '', ENT_QUOTES, 'UTF-8'); ?></textarea>
            </div>
            
            <div class="form-group">
                <label for="profile_visibility">Visibilité du profil:</label>
                <select name="profile_visibility" id="profile_visibility">
                    <option value="public" <?php echo (($user['profile_visibility'] ?? 'public') === 'public') ? 'selected' : ''; ?>>Public (Tout le monde peut voir)</option>
                    <option value="friends_only" <?php echo (($user['profile_visibility'] ?? 'public') === 'friends_only') ? 'selected' : ''; ?>>Amis Seulement</option>
                    <option value="private" <?php echo (($user['profile_visibility'] ?? 'public') === 'private') ? 'selected' : ''; ?>>Privé (Seulement moi)</option>
                </select>
            </div>
            <button type="submit" class="button-primary">Mettre à jour le profil</button>
        </form>
    </section>

    <hr>

    <section class="friend-requests card">
        <h2>Demandes d'ami en attente (<?php echo count($pendingRequests); ?>)</h2>
        <?php if (!empty($_SESSION['error_friends']) && strpos($_SESSION['error_friends'], "(demandes d'amis)") !== false) : ?>
            <div class="alert alert-danger"><?php echo htmlspecialchars($_SESSION['error_friends']); unset($_SESSION['error_friends']); ?></div>
        <?php endif; ?>
        <?php if (!empty($pendingRequests)): ?>
            <ul class="friend-request-list">
                <?php foreach ($pendingRequests as $requestUser): ?>
                    <li>
                        <span>
                            <a href="view_profile.php?id=<?php echo (int)$requestUser['id']; ?>">
                                <?php echo htmlspecialchars($requestUser['username'], ENT_QUOTES, 'UTF-8'); ?>
                            </a> vous a envoyé une demande.
                        </span>
                        <div class="actions">
                            <form action="friend_action.php" method="POST" class="inline-form">
                                <input type="hidden" name="action" value="accept_request">
                                <input type="hidden" name="profile_user_id" value="<?php echo (int)$requestUser['id']; ?>">
                                <input type="hidden" name="redirect_url" value="profile.php">
                                <button type="submit" class="button-success">Accepter</button>
                            </form>
                            <form action="friend_action.php" method="POST" class="inline-form">
                                <input type="hidden" name="action" value="decline_request">
                                <input type="hidden" name="profile_user_id" value="<?php echo (int)$requestUser['id']; ?>">
                                <input type="hidden" name="redirect_url" value="profile.php">
                                <button type="submit" class="button-danger">Refuser</button>
                            </form>
                        </div>
                    </li>
                <?php endforeach; ?>
            </ul>
        <?php elseif (empty($_SESSION['error_friends']) || strpos($_SESSION['error_friends'], "(demandes d'amis)") === false) : ?>
            <p>Aucune nouvelle demande d'ami.</p>
        <?php endif; ?>
    </section>

    <hr>

    <section class="friends-list card">
        <h2>Mes Amis (<?php echo count($friends); ?>)</h2>
        <?php if (!empty($_SESSION['error_friends']) && strpos($_SESSION['error_friends'], "(liste d'amis)") !== false) : ?>
            <div class="alert alert-danger"><?php echo htmlspecialchars($_SESSION['error_friends']); unset($_SESSION['error_friends']); ?></div>
        <?php endif; ?>
        <?php if (!empty($friends)): ?>
            <ul class="friend-list">
                <?php foreach ($friends as $friend): ?>
                    <li>
                        <a href="view_profile.php?id=<?php echo (int)$friend['id']; ?>">
                            <?php echo htmlspecialchars($friend['username'], ENT_QUOTES, 'UTF-8'); ?>
                        </a>
                        <form action="friend_action.php" method="POST" class="inline-form">
                            <input type="hidden" name="action" value="unfriend">
                            <input type="hidden" name="profile_user_id" value="<?php echo (int)$friend['id']; ?>">
                            <input type="hidden" name="redirect_url" value="profile.php">
                            <button type="submit" class="button-danger button-small">Retirer</button>
                        </form>
                    </li>
                <?php endforeach; ?>
            </ul>
        <?php elseif (empty($_SESSION['error_friends']) || strpos($_SESSION['error_friends'], "(liste d'amis)") === false) : ?>
            <p>Vous n'avez pas encore d'amis. <a href="users_list.php">Trouvez des utilisateurs !</a></p>
        <?php endif; ?>
         <?php if (isset($_SESSION['error_friends'])) unset($_SESSION['error_friends']); // Clear if partially displayed ?>
    </section>

    <hr>

    <section class="watchlist-section card">
        <h2>Ma Watchlist (<?php echo count($watchlist); ?>)</h2>
        <?php if (!empty($_SESSION['error_watchlist'])): ?>
            <div class="alert alert-danger"><?php echo htmlspecialchars($_SESSION['error_watchlist']); unset($_SESSION['error_watchlist']); ?></div>
        <?php endif; ?>
        <?php if (!empty($watchlist)): ?>
            <div class="watchlist-grid movies-grid"> <?php // Re-use movies-grid for consistency ?>
                <?php foreach ($watchlist as $movie): ?>
                    <article class="movie-in-watchlist movie"> <?php // Re-use movie class ?>
                        <a href="movie_details.php?id=<?php echo (int)$movie['movie_id']; ?>">
                            <?php if (!empty($movie['poster_path'])): ?>
                                <img src="https://image.tmdb.org/t/p/w300<?php echo htmlspecialchars($movie['poster_path'], ENT_QUOTES, 'UTF-8'); ?>" 
                                     alt="Affiche de <?php echo htmlspecialchars($movie['movie_title'], ENT_QUOTES, 'UTF-8'); ?>" loading="lazy" />
                            <?php else: ?>
                                <img src="assets/images/no_poster_available.png" 
                                     alt="Pas d'affiche pour <?php echo htmlspecialchars($movie['movie_title'], ENT_QUOTES, 'UTF-8'); ?>" 
                                     class="movie-poster-placeholder" loading="lazy" />
                            <?php endif; ?>
                        </a>
                        <div class="movie-info-watchlist movie-info"> <?php // Re-use movie-info ?>
                            <h3 class="movie-title-watchlist movie-title">
                                 <a href="movie_details.php?id=<?php echo (int)$movie['movie_id']; ?>"><?php echo htmlspecialchars($movie['movie_title'], ENT_QUOTES, 'UTF-8'); ?></a>
                            </h3>
                            <form method="POST" action="remove_from_watchlist.php" class="remove-watchlist-form">
                                <input type="hidden" name="movie_id" value="<?php echo (int)$movie['movie_id']; ?>">
                                <input type="hidden" name="redirect_url" value="profile.php">
                                <button type="submit" class="button-danger">Supprimer</button>
                            </form>
                        </div>
                    </article>
                <?php endforeach; ?>
            </div>
        <?php elseif (empty($_SESSION['error_watchlist'])): ?>
            <p>Votre watchlist est vide. <a href="index.php">Parcourez les films et ajoutez-en !</a></p>
        <?php endif; ?>
    </section>
</main>


<hr>

<section class="my-annotations-section card">
    <h2>Mes Annotations de Scènes (<?php echo count($mySceneAnnotations); ?>)</h2>
    <?php if (!empty($_SESSION['error_annotations'])): ?>
        <div class="alert alert-danger"><?php echo htmlspecialchars($_SESSION['error_annotations']); unset($_SESSION['error_annotations']); ?></div>
    <?php endif; ?>
    <?php if (!empty($mySceneAnnotations)): ?>
        <ul class="annotations-list profile-annotations-list">
            <?php foreach ($mySceneAnnotations as $annotation): ?>
                <li class="annotation-item">
                    <a href="forum_view_thread.php?id=<?php echo (int)$annotation['id']; ?>" class="annotation-title">
                        <strong><?php echo htmlspecialchars($annotation['title']); ?></strong>
                    </a>
                    <p class="movie-link">Pour le film: <a href="movie_details.php?id=<?php echo (int)$annotation['movie_id']; ?>"><?php echo htmlspecialchars($annotation['movie_title']); ?></a></p>
                    <?php if (!empty($annotation['scene_description_short'])): ?>
                        <p class="scene-desc-preview"><em>Scène : <?php echo htmlspecialchars($annotation['scene_description_short']); ?></em></p>
                    <?php endif; ?>
                    <?php if (!empty($annotation['scene_start_time'])): ?>
                        <p class="scene-time-preview">Temps : <?php echo htmlspecialchars($annotation['scene_start_time']); ?></p>
                    <?php endif; ?>
                    <p class="annotation-meta">
                        Créé le <?php echo date('d/m/Y', strtotime($annotation['created_at'])); ?>
                    </p>
                </li>
            <?php endforeach; ?>
        </ul>
    <?php elseif (empty($_SESSION['error_annotations'])): ?>
        <p>Vous n'avez pas encore créé d'annotations de scènes. <a href="index.php">Trouvez un film et lancez-vous !</a></p>
    <?php endif; ?>
</section>

<?php
// $conn->close(); // Optional.
include_once 'includes/footer.php';
?>


--- FILE : rate_comment.php ---


<?php
/*
 * rate_comment.php
 * Handles saving/updating user ratings and comments for movies.
 */
include_once 'config.php'; // Includes session_start(), $conn

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    $_SESSION['error'] = "Vous devez être connecté pour noter ou commenter un film.";
    // If accessed directly without POST, or if login is required, redirect appropriately
    if (isset($_POST['redirect_url']) && !empty(trim($_POST['redirect_url']))) {
        $redirectUrl = trim($_POST['redirect_url']); // Use this if available
        // Basic validation for local redirect
        $urlComponents = parse_url($redirectUrl);
        if (!empty($urlComponents['host']) && $urlComponents['host'] !== $_SERVER['HTTP_HOST']) {
            $redirectUrl = 'index.php'; // Fallback to a safe page if redirect is external
        }
    } else {
        $redirectUrl = 'login.php'; // Default redirect if no other info
    }
    header('Location: ' . $redirectUrl);
    exit;
}

// Default redirect URL if not specified or invalid
$defaultRedirectUrl = 'profile.php'; // A sensible default if the specific movie page isn't known
$redirectUrl = $defaultRedirectUrl;

// Validate and set redirect URL if provided in POST
if (isset($_POST['redirect_url']) && !empty(trim($_POST['redirect_url']))) {
    $postedRedirectUrl = trim($_POST['redirect_url']);
    $urlComponents = parse_url($postedRedirectUrl);
    if (empty($urlComponents['host']) || $urlComponents['host'] === $_SERVER['HTTP_HOST']) {
        $redirectUrl = $postedRedirectUrl;
    }
    // Else, $redirectUrl remains $defaultRedirectUrl
}

// This script should only process POST requests
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    $_SESSION['error'] = "Requête invalide pour cette action.";
    header('Location: ' . $redirectUrl); // Redirect to a safe page
    exit;
}

// Validate required POST parameters
if (!isset($_POST['movie_id']) || !is_numeric($_POST['movie_id'])) {
    $_SESSION['rate_comment_error'] = "ID du film manquant ou invalide.";
    header('Location: ' . $redirectUrl);
    exit;
}

$loggedInUserId = (int)$_SESSION['user_id'];
$movieId = (int)$_POST['movie_id'];

// Rating processing
$ratingInput = $_POST['rating'] ?? null; // Rating can be empty string if user wants to remove it
$rating = null;
if ($ratingInput !== null && $ratingInput !== '') {
    $rating = (int)$ratingInput;
    if ($rating < 1 || $rating > 10) {
        $_SESSION['rate_comment_error'] = "La note doit être entre 1 et 10.";
        header('Location: ' . $redirectUrl);
        exit;
    }
}

// Comment processing
$commentInput = trim($_POST['comment'] ?? ''); // Trim comment, allow empty

$actionTakenRating = false;
$actionTakenComment = false;

// --- Handle Rating ---
if ($ratingInput !== null) { // Process if 'rating' key was present in POST
    if ($rating !== null) { // User submitted a valid rating (1-10)
        // Check if a rating exists to decide on INSERT or UPDATE
        $sqlCheckRating = "SELECT id FROM ratings WHERE user_id = ? AND movie_id = ?";
        $stmtCheckRating = $conn->prepare($sqlCheckRating);
        if (!$stmtCheckRating) {
            error_log("Prepare failed (RC_CHK_RAT): " . $conn->error);
            $_SESSION['rate_comment_error'] = "Erreur système (note). (RC01)";
        } else {
            $stmtCheckRating->bind_param("ii", $loggedInUserId, $movieId);
            if (!$stmtCheckRating->execute()) {
                error_log("Execute failed (RC_CHK_RAT): " . $stmtCheckRating->error);
                $_SESSION['rate_comment_error'] = "Erreur système (note). (RC02)";
            } else {
                $stmtCheckRating->store_result();
                if ($stmtCheckRating->num_rows > 0) { // Rating exists, UPDATE
                    $stmtActionRating = $conn->prepare("UPDATE ratings SET rating = ?, rated_at = NOW() WHERE user_id = ? AND movie_id = ?");
                    if (!$stmtActionRating) { error_log("Prepare failed (RC_UPD_RAT): " . $conn->error); $_SESSION['rate_comment_error'] = "Erreur système (note). (RC03)"; }
                    else { $stmtActionRating->bind_param("iii", $rating, $loggedInUserId, $movieId); }
                } else { // No rating, INSERT
                    $stmtActionRating = $conn->prepare("INSERT INTO ratings (user_id, movie_id, rating) VALUES (?, ?, ?)");
                     if (!$stmtActionRating) { error_log("Prepare failed (RC_INS_RAT): " . $conn->error); $_SESSION['rate_comment_error'] = "Erreur système (note). (RC04)"; }
                    else { $stmtActionRating->bind_param("iii", $loggedInUserId, $movieId, $rating); }
                }

                if (isset($stmtActionRating) && $stmtActionRating->execute()) {
                    $_SESSION['rate_comment_message'] = "Note enregistrée.";
                    $actionTakenRating = true;
                } elseif(isset($stmtActionRating)) { // Execute failed
                    error_log("Execute failed (RC_ACTION_RAT): " . $stmtActionRating->error);
                    $_SESSION['rate_comment_error'] = (isset($_SESSION['rate_comment_error']) ? $_SESSION['rate_comment_error'] . " " : "") . "Erreur enregistrement note. (RC05)";
                }
                if(isset($stmtActionRating)) $stmtActionRating->close();
            }
            $stmtCheckRating->close();
        }
    } elseif ($ratingInput === '') { // User submitted an empty rating (wants to remove it)
        $sqlDeleteRating = "DELETE FROM ratings WHERE user_id = ? AND movie_id = ?";
        $stmtDeleteRating = $conn->prepare($sqlDeleteRating);
        if (!$stmtDeleteRating) {
            error_log("Prepare failed (RC_DEL_RAT): " . $conn->error);
            $_SESSION['rate_comment_error'] = "Erreur système (note). (RC06)";
        } else {
            $stmtDeleteRating->bind_param("ii", $loggedInUserId, $movieId);
            if ($stmtDeleteRating->execute()) {
                if ($stmtDeleteRating->affected_rows > 0) {
                    $_SESSION['rate_comment_message'] = "Note supprimée.";
                    $actionTakenRating = true;
                }
                // If no rows affected, it means no rating existed to delete, which is fine.
            } else {
                error_log("Execute failed (RC_DEL_RAT): " . $stmtDeleteRating->error);
                $_SESSION['rate_comment_error'] = (isset($_SESSION['rate_comment_error']) ? $_SESSION['rate_comment_error'] . " " : "") . "Erreur suppression note. (RC07)";
            }
            $stmtDeleteRating->close();
        }
    }
}

// --- Handle Comment ---
// Process if 'comment' key was present in POST (even if empty string after trim)
if (isset($_POST['comment'])) {
    if (!empty($commentInput)) { // User submitted a non-empty comment
        $sqlCheckComment = "SELECT id FROM comments WHERE user_id = ? AND movie_id = ?";
        $stmtCheckComment = $conn->prepare($sqlCheckComment);
        if (!$stmtCheckComment) {
            error_log("Prepare failed (RC_CHK_COM): " . $conn->error);
            $_SESSION['rate_comment_error'] = (isset($_SESSION['rate_comment_error']) ? $_SESSION['rate_comment_error'] . " " : "") . "Erreur système (commentaire). (RC08)";
        } else {
            $stmtCheckComment->bind_param("ii", $loggedInUserId, $movieId);
            if (!$stmtCheckComment->execute()) {
                 error_log("Execute failed (RC_CHK_COM): " . $stmtCheckComment->error);
                $_SESSION['rate_comment_error'] = (isset($_SESSION['rate_comment_error']) ? $_SESSION['rate_comment_error'] . " " : "") . "Erreur système (commentaire). (RC09)";
            } else {
                $stmtCheckComment->store_result();
                if ($stmtCheckComment->num_rows > 0) { // Comment exists, UPDATE
                    $stmtActionComment = $conn->prepare("UPDATE comments SET comment = ?, commented_at = NOW() WHERE user_id = ? AND movie_id = ?");
                    if (!$stmtActionComment) { error_log("Prepare failed (RC_UPD_COM): " . $conn->error); $_SESSION['rate_comment_error'] = (isset($_SESSION['rate_comment_error']) ? $_SESSION['rate_comment_error'] . " " : "") . "Erreur système (commentaire). (RC10)";}
                    else { $stmtActionComment->bind_param("sii", $commentInput, $loggedInUserId, $movieId); }
                } else { // No comment, INSERT
                    $stmtActionComment = $conn->prepare("INSERT INTO comments (user_id, movie_id, comment) VALUES (?, ?, ?)");
                    if (!$stmtActionComment) { error_log("Prepare failed (RC_INS_COM): " . $conn->error); $_SESSION['rate_comment_error'] = (isset($_SESSION['rate_comment_error']) ? $_SESSION['rate_comment_error'] . " " : "") . "Erreur système (commentaire). (RC11)";}
                    else { $stmtActionComment->bind_param("iis", $loggedInUserId, $movieId, $commentInput); }
                }

                if (isset($stmtActionComment) && $stmtActionComment->execute()) {
                    $_SESSION['rate_comment_message'] = (isset($_SESSION['rate_comment_message']) ? trim($_SESSION['rate_comment_message'] . " ") : "") . "Commentaire enregistré.";
                    $actionTakenComment = true;
                } elseif (isset($stmtActionComment)) { // Execute failed
                    error_log("Execute failed (RC_ACTION_COM): " . $stmtActionComment->error);
                    $_SESSION['rate_comment_error'] = (isset($_SESSION['rate_comment_error']) ? $_SESSION['rate_comment_error'] . " " : "") . "Erreur enregistrement commentaire. (RC12)";
                }
                 if(isset($stmtActionComment)) $stmtActionComment->close();
            }
            $stmtCheckComment->close();
        }
    } elseif (isset($_POST['comment']) && $commentInput === '') { // User submitted an empty comment (wants to remove it)
        $sqlDeleteComment = "DELETE FROM comments WHERE user_id = ? AND movie_id = ?";
        $stmtDeleteComment = $conn->prepare($sqlDeleteComment);
         if (!$stmtDeleteComment) {
            error_log("Prepare failed (RC_DEL_COM): " . $conn->error);
            $_SESSION['rate_comment_error'] = (isset($_SESSION['rate_comment_error']) ? $_SESSION['rate_comment_error'] . " " : "") . "Erreur système (commentaire). (RC13)";
        } else {
            $stmtDeleteComment->bind_param("ii", $loggedInUserId, $movieId);
            if ($stmtDeleteComment->execute()) {
                if ($stmtDeleteComment->affected_rows > 0) {
                    $_SESSION['rate_comment_message'] = (isset($_SESSION['rate_comment_message']) ? trim($_SESSION['rate_comment_message'] . " ") : "") . "Commentaire supprimé.";
                    $actionTakenComment = true;
                }
                // If no rows affected, no comment existed to delete, which is fine.
            } else {
                error_log("Execute failed (RC_DEL_COM): " . $stmtDeleteComment->error);
                $_SESSION['rate_comment_error'] = (isset($_SESSION['rate_comment_error']) ? $_SESSION['rate_comment_error'] . " " : "") . "Erreur suppression commentaire. (RC14)";
            }
            $stmtDeleteComment->close();
        }
    }
}

// If no action was successfully taken and no error was explicitly set for rating/comment part
if (!$actionTakenRating && !$actionTakenComment && 
    !isset($_SESSION['rate_comment_error']) && !isset($_SESSION['rate_comment_message'])) {
    // This implies that either no rating/comment data was submitted,
    // or it was submitted but didn't lead to a change or specific error.
    // Avoid overwriting specific messages if they were set.
    $_SESSION['rate_comment_warning'] = "Aucune modification n'a été soumise ou détectée.";
}

// $conn->close(); // Optional
header("Location: " . $redirectUrl);
exit;
?>


--- FILE : README.md ---



# eiganights 🎬🌙

eiganights is a collaborative movie annotation platform. Discover films, discuss specific scenes, create annotations, and share with a community of movie enthusiasts.

## Features (Current MVP)

*   User registration and login
*   Movie browsing and details (via TMDB API)
*   Watchlist management
*   User profiles with customizable visibility
*   Friendship system (send, accept, decline, unfriend)
*   Movie rating and commenting
*   Admin panel:
    *   User management (ban/unban)
    *   FAQ and Terms content management
*   Scene annotation system:
    *   Users can create discussion threads tied to specific movies and scenes (identified by timecode/description).
    *   Annotations are visible on movie detail pages and user profiles.
*   Basic forum for discussions.
*   Static pages: FAQ, Terms & Conditions, Contact Us.

## Tech Stack

*   **Backend:** PHP
*   **Database:** MySQL
*   **Frontend:** HTML, CSS, Vanilla JavaScript (for TMDB search, etc.)
*   **API:** The Movie Database (TMDB) API for movie data.

## Getting Started (Contribution Guide)

Welcome, contributor! Here's how to get eiganights running locally.

### Prerequisites

1.  **Web Server:** A local web server environment like XAMPP, MAMP, WAMP, or a manual Apache/Nginx + PHP setup.
    *   **PHP:** Version 7.4 or newer recommended (project uses `password_hash`, `mysqli`).
    *   **MySQL:** Version 5.7 or newer (or MariaDB equivalent).
2.  **TMDB API Key:** You'll need your own API key from [The Movie Database (TMDB)](https://www.themoviedb.org/settings/api). It's free to register.
3.  **Git:** For version control.

### Setup Instructions

#### 1. Clone the Repository

```bash
git clone git@github.com:grgisep/eiganights.git
cd eiganights
```

#### 2. Database Setup

1.  **Create Database:**
    Using your MySQL admin tool (phpMyAdmin, command line, etc.), create a new database. The default name used in the project is `eiganights`.
    ```sql
    CREATE DATABASE eiganights CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
    ```

2.  **Create Database User (Recommended):**
    For better security than using `root`.
    ```sql
    -- Example for creating a user 'eigaapp' with password 'yoursecurepassword'
    CREATE USER 'eigaapp'@'localhost' IDENTIFIED BY 'yoursecurepassword';
    GRANT ALL PRIVILEGES ON eiganights.* TO 'eigaapp'@'localhost';
    FLUSH PRIVILEGES;
    ```
    *Adjust `'yoursecurepassword'` and `'eigaapp'` as needed.*

3.  **Import Schema:**
    Import the `db/setup.sql` file into your newly created `eiganights` database. This will create all the necessary tables.
    *   **Using command line:**
        ```bash
        mysql -u your_db_user -p eiganights < db/setup.sql
        ```
        (Replace `your_db_user` with `eigaapp` or `root` if you skipped user creation).
    *   **Using phpMyAdmin:** Select your `eiganights` database, go to the "Import" tab, and upload `db/setup.sql`.

#### 3. Configure `config.php`

1.  In the project root (`eiganights/`), find the `config.php.template` file.
2.  **Copy and rename it** to `config.php`.
    *   On macOS/Linux:
        ```bash
        cp config.php.template config.php
        ```
    *   On Windows (Command Prompt):
        ```cmd
        copy config.php.template config.php
        ```
    *   On Windows (PowerShell):
        ```powershell
        Copy-Item config.php.template config.php
        ```

3.  **Edit `config.php`** with your local settings:
    *   `DB_USER`: Your MySQL username (e.g., `eigaapp` or `root`).
    *   `DB_PASS`: Your MySQL password (can be blank for default XAMPP/MAMP root).
    *   `DB_NAME`: Should be `eiganights` (or whatever you named it).
    *   `TMDB_API_KEY`: Paste your TMDB API key here.
    *   `BASE_URL` (script part):
        *   If you place the `eiganights` folder directly in your web server's root (e.g., `htdocs/eiganights` or `www/eiganights`), and you access it via `http://localhost/eiganights/`, then the auto-detected `$script = rtrim(dirname($_SERVER['SCRIPT_NAME']), '/\\');` should result in `'/eiganights'`.
        *   If you access it as `http://localhost/` (meaning `eiganights` contents are directly in `htdocs` or `www`), `$script` should be `''`.
        *   Adjust if necessary. For example, if your project is at `http://localhost/myprojects/eiganights/`, you might need to set `$script = '/myprojects/eiganights';` in your local `config.php`.

    **`config.php` is ignored by Git and should NOT be committed.**

#### 4. Set Up Admin Account (Optional, but useful)

If you want to access the admin panel:
1.  Create a temporary PHP file (e.g., `temp_create_admin.php` in the project root):
    ```php
    <?php
    // temp_create_admin.php
    echo password_hash('password', PASSWORD_DEFAULT);
    ?>
    ```
2.  Run it (e.g., open `http://localhost/eiganights/temp_create_admin.php` in your browser).
3.  Copy the generated hash (it will look something like `$2y$10$...`).
4.  Insert the admin user into your database using a MySQL tool:
    ```sql
    USE eiganights;
    INSERT INTO users (username, password, role) VALUES ('admin', 'PASTE_YOUR_HASHED_PASSWORD_HERE', 'admin');
    ```
5.  **Important: Delete the `temp_create_admin.php` file afterwards.**

#### 5. Access the Site

Open your web browser and navigate to your local development URL (e.g., `http://localhost/eiganights/` or `http://your-virtual-host-name/`).

### Development Environment Specifics

*   **Windows (XAMPP/WAMP):**
    *   Place the `eiganights` project folder inside your `htdocs` (XAMPP) or `www` (WAMP) directory.
    *   Start Apache and MySQL services from the XAMPP/WAMP control panel.
    *   Access phpMyAdmin via `http://localhost/phpmyadmin` for database management.
*   **macOS (MAMP or built-in Apache/PHP + Homebrew MySQL):**
    *   **MAMP:** Place the `eiganights` project folder inside MAMP's `htdocs` directory. Start servers from MAMP.
    *   **Built-in/Homebrew:** Configure Apache/Nginx virtual hosts to point to your project directory. Ensure PHP and MySQL (installed via Homebrew) are running.
*   **Linux (LAMP stack):**
    *   Place the `eiganights` project folder typically in `/var/www/html/eiganights` (or configure a virtual host to point elsewhere).
    *   Ensure Apache/Nginx, PHP, and MySQL services are running (e.g., `sudo systemctl start apache2 mysql phpX.Y-fpm`).
    *   Check file permissions if you encounter access issues. The web server user (e.g., `www-data`) might need write permissions for certain directories if you implement file uploads later.

### Contribution Guidelines (To Be Expanded)

*   Follow the existing coding style.
*   Create feature branches from `main` or `develop` (if a develop branch exists).
*   Write clear commit messages.
*   Ensure your changes work across different browsers (target modern browsers).
*   *(More guidelines can be added here: testing, pull request process, etc.)*

---

Happy annotating! 🍿
:


--- FILE : register.php ---


<?php
/*
 * register.php
 * Handles new user registration.
 */
include_once 'config.php'; // Includes session_start(), $conn

// If user is already logged in, redirect them to their profile page
if (isset($_SESSION['user_id'])) {
    header('Location: profile.php');
    exit;
}

$pageTitle = "Inscription - Eiganights";
$error_message = '';    // For displaying registration errors
$username_value = '';   // To repopulate username field on error

// Determine redirect URL after successful registration (usually profile)
$redirectAfterRegister = 'profile.php'; // Default
// Check if a redirect was passed (e.g., from login page if user chose to register)
if (isset($_GET['redirect']) && !empty(trim($_GET['redirect']))) {
    $postedRedirectUrl = trim($_GET['redirect']);
    $urlComponents = parse_url($postedRedirectUrl);
    if ((empty($urlComponents['host']) || $urlComponents['host'] === $_SERVER['HTTP_HOST']) &&
        !preg_match('/(logout|register|login)\.php/i', $postedRedirectUrl)) { // Avoid redirecting to auth pages
        $redirectAfterRegister = $postedRedirectUrl;
    }
}


if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Basic validation for presence of required fields
    if (!isset($_POST['username'], $_POST['password'], $_POST['password_confirm']) ||
        empty(trim($_POST['username'])) ||
        empty($_POST['password']) || // Password cannot be empty
        empty($_POST['password_confirm'])) {

        $error_message = "Tous les champs sont requis.";
        if (isset($_POST['username'])) {
            $username_value = htmlspecialchars(trim($_POST['username']), ENT_QUOTES, 'UTF-8');
        }
    } else {
        $username = trim($_POST['username']);
        $password = $_POST['password']; // Do not trim password
        $password_confirm = $_POST['password_confirm'];

        // Store username for repopulation in case of other errors
        $username_value = htmlspecialchars($username, ENT_QUOTES, 'UTF-8');

        // --- Further Validations ---
        // Username validation (length, characters - example)
        if (strlen($username) < 3 || strlen($username) > 50) {
            $error_message = "Le nom d'utilisateur doit contenir entre 3 et 50 caractères.";
        } elseif (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
            $error_message = "Le nom d'utilisateur ne peut contenir que des lettres, des chiffres et des underscores (_).";
        }
        // Password validation (length, complexity - example)
        elseif (strlen($password) < 6) {
            $error_message = "Le mot de passe doit contenir au moins 6 caractères.";
        }
        // Password confirmation
        elseif ($password !== $password_confirm) {
            $error_message = "Les mots de passe ne correspondent pas.";
        }

        // If no validation errors so far, proceed to check username availability and insert
        if (empty($error_message)) {
            // Check if username already exists using a prepared statement
            $sqlCheck = "SELECT id FROM users WHERE username = ?";
            $stmtCheck = $conn->prepare($sqlCheck);

            if (!$stmtCheck) {
                error_log("Prepare failed for username check: (" . $conn->errno . ") " . $conn->error . " (Code: REG_PREP_CHK)");
                $error_message = "Une erreur système est survenue. Veuillez réessayer. (R01)";
            } else {
                $stmtCheck->bind_param("s", $username);
                if (!$stmtCheck->execute()) {
                    error_log("Execute failed for username check: (" . $stmtCheck->errno . ") " . $stmtCheck->error . " (Code: REG_EXEC_CHK)");
                    $error_message = "Une erreur système est survenue. Veuillez réessayer. (R02)";
                } else {
                    $stmtCheck->store_result();
                    if ($stmtCheck->num_rows > 0) {
                        $error_message = "Ce nom d'utilisateur est déjà pris. Veuillez en choisir un autre.";
                    } else {
                        // Username is available, proceed to insert new user
                        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
                        if ($hashedPassword === false) {
                             error_log("password_hash() failed. (Code: REG_PW_HASH)");
                             $error_message = "Une erreur critique est survenue lors de la création de votre compte. (R03)";
                        } else {
                            $sqlInsert = "INSERT INTO users (username, password) VALUES (?, ?)"; // profile_visibility defaults to 'public' via DB schema
                            $stmtInsert = $conn->prepare($sqlInsert);
                            if (!$stmtInsert) {
                                error_log("Prepare failed for user insert: (" . $conn->errno . ") " . $conn->error . " (Code: REG_PREP_INS)");
                                $error_message = "Une erreur système est survenue. Veuillez réessayer. (R04)";
                            } else {
                                $stmtInsert->bind_param("ss", $username, $hashedPassword);
                                if ($stmtInsert->execute()) {
                                    $newUserId = $conn->insert_id; // Get the ID of the newly inserted user
                                    $_SESSION['user_id'] = $newUserId;
                                    $_SESSION['username'] = $username; // Store username for convenience
                                    
                                    session_regenerate_id(true); // Security: Prevent session fixation

                                    $_SESSION['message'] = "Inscription réussie ! Bienvenue, " . htmlspecialchars($username) . ".";
                                    header('Location: ' . $redirectAfterRegister);
                                    exit;
                                } else {
                                    error_log("Execute failed for user insert: (" . $stmtInsert->errno . ") " . $stmtInsert->error . " (Code: REG_EXEC_INS)");
                                    $error_message = "Une erreur est survenue lors de la création de votre compte. (R05)";
                                }
                                $stmtInsert->close();
                            }
                        }
                    }
                }
                $stmtCheck->close();
            }
        }
    }
}

include_once 'includes/header.php';
?>

<main class="container auth-form-container">
    <h1>Inscription</h1>

    <?php if (!empty($error_message)): ?>
        <div class="alert alert-danger">
            <?php echo htmlspecialchars($error_message); ?>
        </div>
    <?php endif; ?>
    <?php // Display general session messages if any (e.g., from a redirect) ?>
    <?php if (!empty($_SESSION['message'])): ?>
        <div class="alert alert-success">
            <?php echo htmlspecialchars($_SESSION['message']); unset($_SESSION['message']); ?>
        </div>
    <?php endif; ?>

    <form method="POST" action="register.php<?php echo $redirectAfterRegister !== 'profile.php' ? '?redirect=' . urlencode($redirectAfterRegister) : ''; ?>" novalidate>
        <div class="form-group">
            <label for="username">Nom d'utilisateur:</label>
            <input type="text" id="username" name="username" placeholder="Choisissez un nom d'utilisateur" 
                   value="<?php echo $username_value; ?>" required 
                   pattern="^[a-zA-Z0-9_]{3,50}$" 
                   title="3-50 caractères. Lettres, chiffres, et underscores uniquement." 
                   autofocus />
            <small class="form-text">3-50 caractères. Lettres, chiffres, et underscores (_) uniquement.</small>
        </div>
        <div class="form-group">
            <label for="password">Mot de passe:</label>
            <input type="password" id="password" name="password" placeholder="Créez un mot de passe" required 
                   minlength="6" title="Au moins 6 caractères." />
            <small class="form-text">Au moins 6 caractères.</small>
        </div>
        <div class="form-group">
            <label for="password_confirm">Confirmer le mot de passe:</label>
            <input type="password" id="password_confirm" name="password_confirm" placeholder="Retapez votre mot de passe" required />
        </div>
        <div class="form-group">
            <input type="submit" value="S'inscrire" class="button-primary" />
        </div>
    </form>
    <p class="auth-links">
        Déjà un compte ? <a href="login.php<?php echo $redirectAfterRegister !== 'profile.php' ? '?redirect=' . urlencode($redirectAfterRegister) : ''; ?>">Connectez-vous ici</a>.
    </p>
</main>

<?php
// $conn->close(); // Optional
include_once 'includes/footer.php';
?>


--- FILE : remove_from_watchlist.php ---


<?php
/*
 * remove_from_watchlist.php
 * Removes a movie from the logged-in user's watchlist.
 */
include_once 'config.php'; // Includes session_start(), db connection ($conn), TMDB_API_KEY

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    // $_SESSION['login_required_message'] = "Vous devez être connecté pour retirer un film de votre watchlist.";
    header('Location: login.php');
    exit;
}

// Default redirect URL
$defaultRedirectUrl = 'profile.php'; // Common redirect target for this action
$redirectUrl = $defaultRedirectUrl;

// Validate and set redirect URL if provided
if (isset($_POST['redirect_url']) && !empty(trim($_POST['redirect_url']))) {
    $postedRedirectUrl = trim($_POST['redirect_url']);
    $urlComponents = parse_url($postedRedirectUrl);
    if (empty($urlComponents['host']) || $urlComponents['host'] === $_SERVER['HTTP_HOST']) {
        $redirectUrl = $postedRedirectUrl;
    }
}

// This script should only process POST requests
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    $_SESSION['error'] = "Requête invalide pour cette action.";
    header('Location: ' . $redirectUrl);
    exit;
}

// Validate required POST parameter: movie_id
if (!isset($_POST['movie_id'])) {
    $_SESSION['error'] = "ID du film manquant pour la suppression.";
    header('Location: ' . $redirectUrl);
    exit;
}

$userId = (int)$_SESSION['user_id'];
$movieId = (int)$_POST['movie_id'];

// Validate movie_id
if ($movieId <= 0) {
    $_SESSION['error'] = "ID du film invalide fourni.";
    header('Location: ' . $redirectUrl);
    exit;
}

$sql = "DELETE FROM watchlist WHERE user_id = ? AND movie_id = ?";
$stmt = $conn->prepare($sql);

if (!$stmt) {
    error_log("Prepare failed for watchlist delete: (" . $conn->errno . ") " . $conn->error . " (Code: REM_PREP_DEL)");
    $_SESSION['error'] = "Une erreur système est survenue. Veuillez réessayer. (RW01)";
    header('Location: ' . $redirectUrl);
    exit;
}

$stmt->bind_param("ii", $userId, $movieId);

if ($stmt->execute()) {
    // Check if any row was actually deleted
    if ($stmt->affected_rows > 0) {
        $_SESSION['message'] = "Film retiré de votre watchlist.";
    } else {
        // No rows affected: movie wasn't in watchlist for this user, or ID was wrong
        // This can be a 'warning' or a soft 'message' depending on desired UX.
        $_SESSION['warning'] = "Le film n'était pas dans votre watchlist ou l'ID était incorrect.";
    }
} else {
    error_log("Execute failed for watchlist delete: (" . $stmt->errno . ") " . $stmt->error . " (Code: REM_EXEC_DEL)");
    $_SESSION['error'] = "Erreur lors de la suppression du film de la watchlist. (RW02)";
}

$stmt->close();
// $conn->close(); // Optional, as script exits immediately after.

header('Location: ' . $redirectUrl);
exit;
?>


--- FILE : terms.php ---


<?php
/*
 * terms.php
 * Displays Terms and Conditions.
 */
include_once 'config.php'; // Includes session_start(), $conn

$pageTitle = "Conditions Générales d'Utilisation - Eiganights";
$termsContent = null;
$termsTitle = "Conditions Générales d'Utilisation"; // Default title

$sql = "SELECT title, content FROM site_content WHERE slug = 'terms-and-conditions' LIMIT 1";
$stmt = $conn->prepare($sql);

if ($stmt) {
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        if ($row = $result->fetch_assoc()) {
            $termsTitle = htmlspecialchars($row['title'], ENT_QUOTES, 'UTF-8');
            $termsContent = $row['content']; // HTML content, display as is (ensure it's sanitized on input from admin)
        }
    } else {
        error_log("Execute failed (TERMS_SEL): " . $stmt->error);
    }
    $stmt->close();
} else {
    error_log("Prepare failed (TERMS_SEL): " . $conn->error);
}

include_once 'includes/header.php';
?>

<main class="container static-page">
    <h1><?php echo $termsTitle; ?></h1>

    <?php if ($termsContent): ?>
        <article class="terms-content">
            <?php echo $termsContent; // Outputting HTML directly from DB. Ensure admin input is sanitized. ?>
        </article>
    <?php else: ?>
        <p>Les conditions générales d'utilisation ne sont pas disponibles pour le moment.</p>
        <?php if ($conn->error || (isset($stmt) && $stmt->error)): ?>
             <p class="alert alert-warning">Nous rencontrons des difficultés pour charger ce contenu actuellement.</p>
        <?php endif; ?>
    <?php endif; ?>
</main>

<?php
include_once 'includes/footer.php';
?>


--- FILE : users_list.php ---


<?php
/*
 * users_list.php
 * Displays a list of users and allows searching for users.
 */
include_once 'config.php'; // Includes session_start(), $conn, TMDB_API_KEY

$loggedInUserId = $_SESSION['user_id'] ?? null; // Null if user is not logged in
$users = [];
$pageTitle = "Liste des Utilisateurs - Eiganights";

// --- Handle User Search ---
$searchUsernameParam = '';
$searchUsernameDisplay = '';

if (isset($_GET['search_user'])) {
    $searchUsernameParam = trim($_GET['search_user']);
    $searchUsernameDisplay = htmlspecialchars($searchUsernameParam, ENT_QUOTES, 'UTF-8');
    if (!empty($searchUsernameDisplay)) {
        $pageTitle = "Recherche Utilisateur: " . $searchUsernameDisplay . " - Eiganights";
    }
}

// --- Fetch Users from Database ---
if (!empty($searchUsernameParam)) {
    $searchTermSQL = "%" . $searchUsernameParam . "%"; // Wildcards for LIKE search
    // Exclude the logged-in user from search results if they are logged in
    if ($loggedInUserId) {
        $sql = "SELECT id, username FROM users WHERE username LIKE ? AND id != ? AND role != 'admin' AND is_banned = 0 ORDER BY username ASC";
        $stmt = $conn->prepare($sql);
        if (!$stmt) {
            error_log("Prepare failed (UL_SEARCH_LID): " . $conn->error);
            $_SESSION['error'] = "Erreur lors de la recherche d'utilisateurs. (UL01)";
        } else {
            $stmt->bind_param("si", $searchTermSQL, $loggedInUserId);
        }
    } else { // User not logged in, search all users
        $sql = "SELECT id, username FROM users WHERE username LIKE ? AND role != 'admin' AND is_banned = 0 ORDER BY username ASC";
// No change to bind_param needed
        $stmt = $conn->prepare($sql);
        if (!$stmt) {
            error_log("Prepare failed (UL_SEARCH_NOLID): " . $conn->error);
            $_SESSION['error'] = "Erreur lors de la recherche d'utilisateurs. (UL02)";
        } else {
            $stmt->bind_param("s", $searchTermSQL);
        }
    }
} else { // No search query, display a list of recent/all users (excluding logged-in user if applicable)
    $limit = 20; // Limit the number of users displayed by default
    if ($loggedInUserId) {
        $sql = "SELECT id, username FROM users WHERE id != ? AND role != 'admin' AND is_banned = 0 ORDER BY created_at DESC, username ASC LIMIT ?";
        $stmt = $conn->prepare($sql);
        if (!$stmt) {
            error_log("Prepare failed (UL_LIST_LID): " . $conn->error);
            $_SESSION['error'] = "Erreur lors du chargement des utilisateurs. (UL03)";
        } else {
            $stmt->bind_param("ii", $loggedInUserId, $limit);
        }
    } else { // User not logged in, show generic list
        $sql = "SELECT id, username FROM users WHERE role != 'admin' AND is_banned = 0 ORDER BY created_at DESC, username ASC LIMIT ?";
// No change to bind_param needed
        $stmt = $conn->prepare($sql);
        if (!$stmt) {
            error_log("Prepare failed (UL_LIST_NOLID): " . $conn->error);
            $_SESSION['error'] = "Erreur lors du chargement des utilisateurs. (UL04)";
        } else {
            $stmt->bind_param("i", $limit);
        }
    }
}

// Execute statement and fetch results if statement was prepared successfully
if (isset($stmt) && $stmt) { // Check if $stmt is not false (i.e., prepare was successful)
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        while ($row = $result->fetch_assoc()) {
            $users[] = $row;
        }
    } else {
        error_log("Execute failed (UL_EXEC): " . $stmt->error);
        $_SESSION['error'] = (isset($_SESSION['error']) ? $_SESSION['error'] . " " : "") . "Erreur lors de la récupération des données. (UL05)";
    }
    $stmt->close();
}
// If $stmt prepare failed, an error message should already be in $_SESSION['error']

include_once 'includes/header.php';
?>

<main class="container users-list-page">
    <h1>Utilisateurs Eiganights</h1>

    <?php // Display session messages ?>
    <?php if (!empty($_SESSION['message'])): ?>
        <div class="alert alert-success"><?php echo htmlspecialchars($_SESSION['message']); unset($_SESSION['message']); ?></div>
    <?php endif; ?>
    <?php if (!empty($_SESSION['error'])): ?>
        <div class="alert alert-danger"><?php echo htmlspecialchars($_SESSION['error']); unset($_SESSION['error']); ?></div>
    <?php endif; ?>
    <?php if (!empty($_SESSION['warning'])): ?>
        <div class="alert alert-warning"><?php echo htmlspecialchars($_SESSION['warning']); unset($_SESSION['warning']); ?></div>
    <?php endif; ?>

    <section class="search-user-section card">
        <form method="GET" action="users_list.php" class="search-box">
            <label for="search_user_input" class="visually-hidden">Rechercher un utilisateur</label>
            <input type="text" id="search_user_input" name="search_user" placeholder="Nom d'utilisateur..." value="<?php echo $searchUsernameDisplay; ?>" />
            <button type="submit" class="button-primary">Rechercher</button>
        </form>
    </section>

    <section class="user-results-section">
        <?php if (!empty($searchUsernameDisplay)): ?>
            <h2>Résultats de recherche pour "<?php echo $searchUsernameDisplay; ?>"</h2>
        <?php elseif (empty($users) && empty($_SESSION['error'])): ?>
            <h2>Parcourir les utilisateurs</h2> <!-- Or some other appropriate heading if no search -->
        <?php endif; ?>

        <?php if (!empty($users)): ?>
            <ul class="user-list card-list">
                <?php foreach ($users as $user): ?>
                    <li>
                        <a href="view_profile.php?id=<?php echo (int)$user['id']; ?>">
                            <?php echo htmlspecialchars($user['username'], ENT_QUOTES, 'UTF-8'); ?>
                        </a>
                        <?php // Friend action buttons could be added here, but might require more complex logic/queries per user ?>
                        <?php if ($loggedInUserId && $loggedInUserId !== (int)$user['id']): ?>
                            <a href="view_profile.php?id=<?php echo (int)$user['id']; ?>" class="button button-secondary button-small">Voir Profil</a>
                        <?php endif; ?>
                    </li>
                <?php endforeach; ?>
            </ul>
        <?php elseif (!empty($searchUsernameParam) && empty($_SESSION['error'])): ?>
            <p>Aucun utilisateur trouvé correspondant à votre recherche "<?php echo $searchUsernameDisplay; ?>".</p>
        <?php elseif (empty($_SESSION['error'])): // No users found and no search, or no error from DB
            ?>
            <p>Aucun utilisateur à afficher pour le moment. <a href="register.php">Soyez le premier à vous inscrire !</a></p>
        <?php endif; ?>
    </section>
</main>

<?php
// $conn->close(); // Optional
include_once 'includes/footer.php';
?>


--- FILE : view_profile.php ---


<?php
/*
 * view_profile.php
 * Displays the profile of a specified user.
 * (Version without 'blocked' status consideration)
 */
include_once 'config.php'; 

$profileUser = null;
$profileUserId = null; 
$loggedInUserId = $_SESSION['user_id'] ?? null; 

$identifier = null;
$identifierType = null;

if (isset($_GET['id']) && is_numeric($_GET['id']) && (int)$_GET['id'] > 0) {
    $identifier = (int)$_GET['id'];
    $identifierType = 'id';
} elseif (isset($_GET['username']) && !empty(trim($_GET['username']))) {
    $identifier = trim($_GET['username']);
    $identifierType = 'username';
}

if ($identifier === null) {
    $_SESSION['error'] = "Aucun utilisateur spécifié pour afficher le profil.";
    header('Location: users_list.php'); 
    exit;
}

if ($identifierType === 'id') {
    $sqlUser = "SELECT id, username, bio, created_at, profile_visibility FROM users WHERE id = ?";
    $stmtUser = $conn->prepare($sqlUser);
    if ($stmtUser) $stmtUser->bind_param("i", $identifier);
} else { 
    $sqlUser = "SELECT id, username, bio, created_at, profile_visibility FROM users WHERE username = ?";
    $stmtUser = $conn->prepare($sqlUser);
    if ($stmtUser) $stmtUser->bind_param("s", $identifier);
}

if (!$stmtUser) {
    error_log("Prepare failed (VP_USER_SEL): " . $conn->error);
    $_SESSION['error'] = "Erreur lors du chargement du profil. (VP01)";
    header('Location: users_list.php');
    exit;
}

if (!$stmtUser->execute()) {
    error_log("Execute failed (VP_USER_SEL): " . $stmtUser->error);
    $_SESSION['error'] = "Erreur lors du chargement du profil. (VP02)";
    $stmtUser->close();
    header('Location: users_list.php');
    exit;
}

$resultUser = $stmtUser->get_result();
$profileUser = $resultUser->fetch_assoc();
$stmtUser->close();

if (!$profileUser) {
    $_SESSION['error'] = "Utilisateur non trouvé.";
    header('Location: users_list.php');
    exit;
}
$profileUserId = (int)$profileUser['id']; 

if ($loggedInUserId && $loggedInUserId === $profileUserId) {
    header('Location: profile.php');
    exit;
}

$canViewFullProfile = false; 
$friendshipDbStatus = null; 
$friendAction = 'none';     

if ($loggedInUserId && $loggedInUserId !== $profileUserId) {
    $u1 = min($loggedInUserId, $profileUserId);
    $u2 = max($loggedInUserId, $profileUserId);

    $sqlFriendship = "SELECT status, action_user_id FROM friendships WHERE user_one_id = ? AND user_two_id = ?";
    $stmtFriendship = $conn->prepare($sqlFriendship);
    if ($stmtFriendship) {
        $stmtFriendship->bind_param("ii", $u1, $u2);
        if ($stmtFriendship->execute()) {
            $resultFriendship = $stmtFriendship->get_result();
            if ($row = $resultFriendship->fetch_assoc()) {
                $friendshipDbStatus = $row['status'];
                $actionUserIdFs = (int)$row['action_user_id'];

                if ($friendshipDbStatus === 'accepted') {
                    $friendAction = 'friends';
                } elseif ($friendshipDbStatus === 'pending') {
                    $friendAction = ($actionUserIdFs === $loggedInUserId) ? 'pending_them' : 'pending_me';
                } elseif ($friendshipDbStatus === 'declined') {
                    $friendAction = 'add_friend'; 
                }
                // 'blocked' status is no longer part of the ENUM or this logic
            } else { 
                $friendAction = 'add_friend';
            }
        } else { error_log("Execute failed (VP_FR_STATUS): " . $stmtFriendship->error); }
        $stmtFriendship->close();
    } else { error_log("Prepare failed (VP_FR_STATUS): " . $conn->error); }
}

if ($profileUser['profile_visibility'] === 'public') {
    $canViewFullProfile = true;
} elseif ($profileUser['profile_visibility'] === 'friends_only' && $friendAction === 'friends') {
    $canViewFullProfile = true;
}

$watchlist = [];
$watchlistError = null;
if ($canViewFullProfile) {
    $sqlWatchlist = "SELECT movie_id, movie_title, poster_path FROM watchlist WHERE user_id = ? ORDER BY added_at DESC";
    $stmtWatchlist = $conn->prepare($sqlWatchlist);
    if ($stmtWatchlist) {
        $stmtWatchlist->bind_param("i", $profileUserId);
        if ($stmtWatchlist->execute()) {
            $resultWatchlist = $stmtWatchlist->get_result();
            while ($row = $resultWatchlist->fetch_assoc()) {
                $watchlist[] = $row;
            }
        } else {
            error_log("Execute failed (VP_WL_SEL): " . $stmtWatchlist->error);
            $watchlistError = "Erreur lors du chargement de la watchlist de l'utilisateur. (VP03)";
        }
        $stmtWatchlist->close();
    } else {
        error_log("Prepare failed (VP_WL_SEL): " . $conn->error);
        $watchlistError = "Erreur système lors du chargement de la watchlist. (VP04)";
    }
}

        // >> NEW: Fetch Profile User's Scene Annotations <<
        $profileUserSceneAnnotations = [];
        $annotationsError = null;
        $sqlProfileUserAnnotations = "SELECT id, title, movie_title, movie_id, scene_start_time, scene_description_short, created_at 
                                 FROM forum_threads 
                                 WHERE user_id = ? AND (scene_start_time IS NOT NULL OR scene_description_short IS NOT NULL)
                                 ORDER BY created_at DESC";
        $stmtProfileUserAnnotations = $conn->prepare($sqlProfileUserAnnotations);
        if (!$stmtProfileUserAnnotations) {
            error_log("Prepare failed (VP_USER_ANNOT_SEL): " . $conn->error);
            $annotationsError = "Erreur lors du chargement des annotations de l'utilisateur. (VP05)";
        } else {
            $stmtProfileUserAnnotations->bind_param("i", $profileUserId); // Use $profileUserId here
            if ($stmtProfileUserAnnotations->execute()) {
                $resultProfileUserAnnotations = $stmtProfileUserAnnotations->get_result();
                while ($row = $resultProfileUserAnnotations->fetch_assoc()) {
                    $profileUserSceneAnnotations[] = $row;
                }
            } else {
                error_log("Execute failed (VP_USER_ANNOT_SEL): " . $stmtProfileUserAnnotations->error);
                $annotationsError = "Erreur lors du chargement des annotations de l'utilisateur. (VP06)";
            }
            $stmtProfileUserAnnotations->close();
        }
    // The if ($canViewFullProfile) block continues or ends after this.

$pageTitle = "Profil de " . htmlspecialchars($profileUser['username'], ENT_QUOTES, 'UTF-8') . " - Eiganights";
include_once 'includes/header.php';
?>

<main class="container view-profile-page">
    <header class="profile-header card">
        <h1>Profil de <?php echo htmlspecialchars($profileUser['username'], ENT_QUOTES, 'UTF-8'); ?></h1>
        <p class="meta-info">
            Membre depuis: <?php echo date('d F Y', strtotime($profileUser['created_at'])); ?><br>
            Visibilité du profil: 
            <?php
                switch ($profileUser['profile_visibility']) {
                    case 'public': echo 'Public'; break;
                    case 'friends_only': echo 'Amis Seulement'; break;
                    case 'private': echo 'Privé'; break;
                    default: echo htmlspecialchars(ucfirst($profileUser['profile_visibility'] ?? ''), ENT_QUOTES, 'UTF-8');
                }
            ?>
        </p>

        <?php if (!empty($_SESSION['message'])): ?>
            <div class="alert alert-success"><?php echo htmlspecialchars($_SESSION['message']); unset($_SESSION['message']); ?></div>
        <?php endif; ?>
        <?php if (!empty($_SESSION['error'])): ?>
            <div class="alert alert-danger"><?php echo htmlspecialchars($_SESSION['error']); unset($_SESSION['error']); ?></div>
        <?php endif; ?>

        <?php if ($loggedInUserId && $loggedInUserId !== $profileUserId && $friendAction !== 'none'): ?>
            <div class="friend-actions">
                <?php if ($friendAction === 'add_friend'): ?>
                    <form action="friend_action.php" method="POST" class="inline-form">
                        <input type="hidden" name="action" value="send_request">
                        <input type="hidden" name="profile_user_id" value="<?php echo $profileUserId; ?>">
                        <button type="submit" class="button-primary">Ajouter en ami</button>
                    </form>
                <?php elseif ($friendAction === 'pending_them'): ?>
                    <p>Demande d'ami envoyée.</p>
                    <form action="friend_action.php" method="POST" class="inline-form">
                        <input type="hidden" name="action" value="cancel_request">
                        <input type="hidden" name="profile_user_id" value="<?php echo $profileUserId; ?>">
                        <button type="submit" class="button-warning">Annuler la demande</button>
                    </form>
                <?php elseif ($friendAction === 'pending_me'): ?>
                    <p><?php echo htmlspecialchars($profileUser['username'], ENT_QUOTES, 'UTF-8'); ?> vous a envoyé une demande d'ami.</p>
                    <form action="friend_action.php" method="POST" class="inline-form">
                        <input type="hidden" name="action" value="accept_request">
                        <input type="hidden" name="profile_user_id" value="<?php echo $profileUserId; ?>">
                        <button type="submit" class="button-success">Accepter</button>
                    </form>
                    <form action="friend_action.php" method="POST" class="inline-form">
                        <input type="hidden" name="action" value="decline_request">
                        <input type="hidden" name="profile_user_id" value="<?php echo $profileUserId; ?>">
                        <button type="submit" class="button-danger">Refuser</button>
                    </form>
                <?php elseif ($friendAction === 'friends'): ?>
                    <p>Vous êtes amis avec <?php echo htmlspecialchars($profileUser['username'], ENT_QUOTES, 'UTF-8'); ?>.</p>
                    <form action="friend_action.php" method="POST" class="inline-form">
                        <input type="hidden" name="action" value="unfriend">
                        <input type="hidden" name="profile_user_id" value="<?php echo $profileUserId; ?>">
                        <button type="submit" class="button-danger">Retirer cet ami</button>
                    </form>
                <?php endif; ?>
            </div>
        <?php endif; ?>
    </header>

    <section class="profile-bio card">
        <h2>Bio</h2>
        <?php if ($canViewFullProfile || $profileUser['profile_visibility'] === 'public'): ?>
            <p><?php echo !empty($profileUser['bio']) ? nl2br(htmlspecialchars($profileUser['bio'], ENT_QUOTES, 'UTF-8')) : '<em>Cet utilisateur n\'a pas encore de bio.</em>'; ?></p>
        <?php else: ?>
            <p><em>La bio de cet utilisateur est privée ou visible uniquement par ses amis.</em></p>
        <?php endif; ?>
    </section>

    <?php if ($canViewFullProfile): ?>
        <section class="profile-watchlist card">
            <h2>Watchlist de <?php echo htmlspecialchars($profileUser['username'], ENT_QUOTES, 'UTF-8'); ?> (<?php echo count($watchlist); ?>)</h2>
            <?php if ($watchlistError): ?>
                <div class="alert alert-warning"><?php echo htmlspecialchars($watchlistError); ?></div>
            <?php elseif (!empty($watchlist)): ?>
                <div class="watchlist-grid movies-grid">
                    <?php foreach ($watchlist as $movie): ?>
                        <article class="movie-in-watchlist movie">
                            <a href="movie_details.php?id=<?php echo (int)$movie['movie_id']; ?>" aria-label="Détails pour <?php echo htmlspecialchars($movie['movie_title'] ?? '', ENT_QUOTES, 'UTF-8'); ?>">
                                <?php if (!empty($movie['poster_path'])): ?>
                                    <img src="https://image.tmdb.org/t/p/w300<?php echo htmlspecialchars($movie['poster_path'], ENT_QUOTES, 'UTF-8'); ?>" 
                                         alt="Affiche de <?php echo htmlspecialchars($movie['movie_title'] ?? '', ENT_QUOTES, 'UTF-8'); ?>" loading="lazy"/>
                                <?php else: ?>
                                    <img src="assets/images/no_poster_available.png" 
                                         alt="Pas d'affiche pour <?php echo htmlspecialchars($movie['movie_title'] ?? '', ENT_QUOTES, 'UTF-8'); ?>" 
                                         class="movie-poster-placeholder" loading="lazy"/>
                                <?php endif; ?>
                            </a>
                            <div class="movie-info-watchlist movie-info">
                                <h3 class="movie-title-watchlist movie-title">
                                    <a href="movie_details.php?id=<?php echo (int)$movie['movie_id']; ?>">
                                        <?php echo htmlspecialchars($movie['movie_title'] ?? 'Titre Inconnu', ENT_QUOTES, 'UTF-8'); ?>
                                    </a>
                                </h3>
                            </div>
                        </article>
                    <?php endforeach; ?>
                </div>
            <?php else: ?>
                <p>La watchlist de cet utilisateur est vide.</p>
            <?php endif; ?>
        </section>
    <?php elseif ($profileUser['profile_visibility'] === 'friends_only'): ?>
        <section class="profile-watchlist-private card">
            <h2>Watchlist</h2>
            <p><em>La watchlist de cet utilisateur est visible uniquement par ses amis.</em></p>
        </section>
    <?php elseif ($profileUser['profile_visibility'] === 'private'): ?>
         <section class="profile-watchlist-private card">
            <h2>Watchlist</h2>
            <p><em>La watchlist de cet utilisateur est privée.</em></p>
        </section>
    <?php endif; ?>

    <?php if ($canViewFullProfile): ?>
    <section class="profile-annotations card">
        <h2>Annotations de Scènes par <?php echo htmlspecialchars($profileUser['username'], ENT_QUOTES, 'UTF-8'); ?> (<?php echo count($profileUserSceneAnnotations); ?>)</h2>
        <?php if ($annotationsError): ?>
            <div class="alert alert-warning"><?php echo htmlspecialchars($annotationsError); ?></div>
        <?php elseif (!empty($profileUserSceneAnnotations)): ?>
            <ul class="annotations-list profile-annotations-list">
                <?php foreach ($profileUserSceneAnnotations as $annotation): ?>
                    <li class="annotation-item">
                        <a href="forum_view_thread.php?id=<?php echo (int)$annotation['id']; ?>" class="annotation-title">
                            <strong><?php echo htmlspecialchars($annotation['title']); ?></strong>
                        </a>
                        <p class="movie-link">Pour le film: <a href="movie_details.php?id=<?php echo (int)$annotation['movie_id']; ?>"><?php echo htmlspecialchars($annotation['movie_title']); ?></a></p>
                        <?php if (!empty($annotation['scene_description_short'])): ?>
                            <p class="scene-desc-preview"><em>Scène : <?php echo htmlspecialchars($annotation['scene_description_short']); ?></em></p>
                        <?php endif; ?>
                        <?php if (!empty($annotation['scene_start_time'])): ?>
                            <p class="scene-time-preview">Temps : <?php echo htmlspecialchars($annotation['scene_start_time']); ?></p>
                        <?php endif; ?>
                        <p class="annotation-meta">
                            Créé le <?php echo date('d/m/Y', strtotime($annotation['created_at'])); ?>
                        </p>
                    </li>
                <?php endforeach; ?>
            </ul>
        <?php else: ?>
            <p><?php echo htmlspecialchars($profileUser['username'], ENT_QUOTES, 'UTF-8'); ?> n'a pas encore créé d'annotations de scènes.</p>
        <?php endif; ?>
    </section>
<?php elseif ($profileUser['profile_visibility'] === 'friends_only' && !$canViewFullProfile): // Not friends, so can't see annotations ?>
    <section class="profile-annotations-private card">
        <h2>Annotations de Scènes</h2>
        <p><em>Les annotations de scènes de cet utilisateur sont visibles uniquement par ses amis.</em></p>
    </section>
<?php elseif ($profileUser['profile_visibility'] === 'private'): // Profile is private ?>
     <section class="profile-annotations-private card">
        <h2>Annotations de Scènes</h2>
        <p><em>Les annotations de scènes de cet utilisateur sont privées.</em></p>
    </section>
<?php endif; ?>
</main>

<?php
include_once 'includes/footer.php';
?>


--- FILE : assets/style.css ---


/* ==========================================================================
   1. RESET & BASE STYLES
   ========================================================================== */
*,
*::before,
*::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

html {
    font-size: 16px; /* Base font size */
    scroll-behavior: smooth;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    background-color: var(--color-bg-dark);
    color: var(--color-text-light);
    line-height: 1.65;
    font-weight: 400;
}

/* ==========================================================================
   2. CSS CUSTOM PROPERTIES (VARIABLES)
   ========================================================================== */
:root {
    /* Colors */
    --color-primary: #00bfa5;          /* Teal accent */
    --color-primary-dark: #008c7a;
    --color-primary-darker: #007a6c;
    --color-primary-contrast: #111111; /* Text color on primary bg */
    --color-primary-contrast-hover: #ffffff;

    --color-bg-dark: #1a1a1a;
    --color-bg-medium: #1f1f1f;        /* Header, Footer */
    --color-bg-light: #252525;         /* Cards */
    --color-bg-lighter: #2c2c2c;       /* Movie items, form inputs */
    --color-bg-lightest: #303030;      /* Placeholder bg */

    --color-text-light: #e0e0e0;
    --color-text-medium: #c0c0c0;
    --color-text-dark: #b0b0b0;
    --color-text-darker: #a0a0a0;
    --color-text-muted: #888888;

    --color-border-dark: #333333;
    --color-border-medium: #444444;
    --color-border-light: #555555;

    --color-danger: #e53935;
    --color-danger-dark: #c62828;
    --color-danger-darker: #b71c1c;
    --color-danger-contrast: #ffffff;
    --color-danger-bg-alert: #5c2222;
    --color-danger-text-alert: #f4c7c3;


    --color-warning: #ffb300;
    --color-warning-dark: #ffa000;
    --color-warning-darker: #ff8f00;
    --color-warning-contrast: #111111;
    --color-warning-bg-alert: #fff3cd; /* Exception for light bg for readability */
    --color-warning-text-alert: #111111;
    --color-warning-border-alert: #ffeeba;


    --color-success: #43a047;
    --color-success-dark: #388e3c;
    --color-success-darker: #2e7d32;
    --color-success-contrast: #ffffff;
    --color-success-bg-alert: #2a522a;
    --color-success-text-alert: #a5d6a7;

    --color-info-bg-alert: #1e3a5f;
    --color-info-text-alert: #abdefa;
    --color-info-border-alert: #3e7ab7;

    --color-streaming-link-hover: #007bff; /* Example for streaming links if different from primary */

    /* Typography */
    --font-family-base: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    --font-size-base: 1rem; /* Corresponds to html font-size */
    --line-height-base: 1.65;

    /* Spacing */
    --spacing-xs: 0.25rem;  /* 4px */
    --spacing-sm: 0.5rem;   /* 8px */
    --spacing-md: 1rem;     /* 16px */
    --spacing-lg: 1.5rem;   /* 24px */
    --spacing-xl: 2rem;     /* 32px */
    --spacing-xxl: 2.5rem;  /* 40px */

    /* Borders */
    --border-radius-sm: 4px;
    --border-radius-md: 6px;
    --border-radius-lg: 8px;

    /* Shadows */
    --shadow-sm: 0 2px 5px rgba(0,0,0,0.1);
    --shadow-md: 0 3px 10px rgba(0,0,0,0.15);
    --shadow-lg: 0 4px 15px rgba(0,0,0,0.2);
    --shadow-header: 0 2px 10px rgba(0,0,0,0.3);
    --shadow-footer: 0 -2px 10px rgba(0,0,0,0.2);
}

/* ==========================================================================
   3. UTILITY CLASSES
   ========================================================================== */
.visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}

.text-center {
    text-align: center;
}

/* ==========================================================================
   4. LAYOUT (Container, Header, Footer, Page Content)
   ========================================================================== */
.container {
    width: 90%;
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
    padding: 0 var(--spacing-md);
}

.page-content {
    padding-top: var(--spacing-lg);    /* Was 20px */
    padding-bottom: var(--spacing-xxl); /* Was 40px */
    min-height: calc(100vh - 180px); /* Adjusted for typical header/footer height, update if needed */
}

.site-header {
    background-color: var(--color-bg-medium);
    padding: var(--spacing-md) 0;
    box-shadow: var(--shadow-header);
    margin-bottom: var(--spacing-xl); /* Was 30px */
}

.main-navigation {
    text-align: center;
}

.main-navigation .nav-link {
    color: var(--color-text-light);
    font-weight: 500;
    margin: 0 var(--spacing-sm); /* Was 10px */
    padding: var(--spacing-sm) var(--spacing-md); /* Was 8px 12px */
    border-radius: var(--border-radius-sm);
    transition: background-color 0.2s ease, color 0.2s ease;
    display: inline-block;
    text-decoration: none;
}
.main-navigation .nav-link:hover,
.main-navigation .nav-link:focus,
.main-navigation .nav-link.active {
    background-color: var(--color-primary);
    color: var(--color-primary-contrast);
    text-decoration: none;
}

.site-footer-main {
    background-color: var(--color-bg-medium);
    color: var(--color-text-muted);
    padding: var(--spacing-xl) 0; /* Was 30px */
    text-align: center;
    font-size: 0.9rem;
    margin-top: var(--spacing-xxl); /* Was 40px */
    box-shadow: var(--shadow-footer);
}
.site-footer-main .footer-content p {
    margin-bottom: var(--spacing-xs); /* Was 5px */
}
.site-footer-main a {
    color: var(--color-text-darker); /* Was #aaa */
}
.site-footer-main a:hover {
    color: var(--color-primary);
}

/* ==========================================================================
   5. HTML ELEMENT STYLING (Typography, Links, Images, HR)
   ========================================================================== */
/* Links */
a {
    color: var(--color-primary);
    text-decoration: none;
    transition: color 0.2s ease-in-out;
}
a:hover, a:focus {
    color: var(--color-primary-dark);
    text-decoration: underline;
}

/* Images */
img {
    max-width: 100%;
    height: auto;
    display: block;
    border-style: none;
}
.movie-poster-placeholder { /* Specific to movie posters */
    border: 1px solid var(--color-border-medium);
    object-fit: contain;
    background-color: var(--color-bg-lightest);
}

/* Headings */
h1, h2, h3, h4, h5, h6 {
    color: var(--color-primary);
    margin-top: 1.5em;
    margin-bottom: 0.75em;
    line-height: 1.3;
    font-weight: 600;
}
h1 { font-size: 2.5rem; }
h2 { font-size: 2rem; }
h3 { font-size: 1.5rem; }
h4 { font-size: 1.25rem; }
h5 { font-size: 1.1rem; }
h6 { font-size: 1rem; }

h1:first-child, h2:first-child, h3:first-child, h4:first-child, h5:first-child, h6:first-child {
    margin-top: 0;
}

/* Horizontal Rule */
hr {
    border: 0;
    height: 1px;
    background-color: var(--color-border-medium);
    margin: var(--spacing-xxl) 0; /* Was 40px */
}

/* ==========================================================================
   6. COMPONENTS (Buttons, Forms, Alerts, Cards)
   ========================================================================== */
/* --- Forms --- */
.form-group {
    margin-bottom: var(--spacing-lg); /* Was 20px */
}
.form-group label {
    display: block;
    margin-bottom: var(--spacing-sm); /* Was 8px */
    font-weight: 500;
    color: var(--color-text-medium);
}
.form-text {
    display: block;
    font-size: 0.875em;
    color: var(--color-text-muted);
    margin-top: var(--spacing-xs); /* Was 5px */
}

input[type="text"],
input[type="password"],
input[type="email"],
textarea,
select {
    background-color: var(--color-bg-lighter);
    color: var(--color-text-light);
    border: 1px solid var(--color-border-light);
    border-radius: var(--border-radius-sm);
    padding: var(--spacing-sm) var(--spacing-md); /* Was 12px 15px, using sm for vertical */
    width: 100%;
    font-size: var(--font-size-base);
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
}
input[type="text"]:focus,
input[type="password"]:focus,
input[type="email"]:focus,
textarea:focus,
select:focus {
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--color-primary) 25%, transparent); /* Teal glow */
    outline: none;
}
textarea {
    min-height: 120px;
    resize: vertical;
}
select {
    appearance: none;
    background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23ababab%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E');
    background-repeat: no-repeat;
    background-position: right var(--spacing-md) center;
    background-size: 12px auto;
    padding-right: calc(var(--spacing-md) * 2 + 12px); /* Adjust padding for arrow */
}

/* --- Buttons --- */
.button, button, input[type="submit"], input[type="button"], input[type="reset"] {
    display: inline-block;
    font-weight: 500;
    text-align: center;
    vertical-align: middle;
    cursor: pointer;
    user-select: none;
    background-color: transparent;
    border: 1px solid transparent;
    padding: var(--spacing-sm) var(--spacing-lg); /* Was 10px 20px */
    font-size: var(--font-size-base);
    line-height: var(--line-height-base);
    border-radius: var(--border-radius-sm);
    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    text-decoration: none; /* Ensure buttons don't get underlined by default 'a' styles */
}
.button:hover, button:hover, input[type="submit"]:hover, input[type="button"]:hover, input[type="reset"]:hover {
    text-decoration: none;
}

/* Primary Button */
.button-primary, input[type="submit"].button-primary, input[type="submit"] { /* Added .button-primary to input[type="submit"] for consistency */
    color: var(--color-primary-contrast);
    background-color: var(--color-primary);
    border-color: var(--color-primary);
}
.button-primary:hover, input[type="submit"].button-primary:hover, input[type="submit"]:hover {
    color: var(--color-primary-contrast-hover);
    background-color: var(--color-primary-dark);
    border-color: var(--color-primary-darker);
}

/* Danger Button */
.button-danger {
    color: var(--color-danger-contrast);
    background-color: var(--color-danger);
    border-color: var(--color-danger);
}
.button-danger:hover {
    background-color: var(--color-danger-dark);
    border-color: var(--color-danger-darker);
}

/* Warning Button */
.button-warning {
    color: var(--color-warning-contrast);
    background-color: var(--color-warning);
    border-color: var(--color-warning);
}
.button-warning:hover {
    background-color: var(--color-warning-dark);
    border-color: var(--color-warning-darker);
}

/* Success Button */
.button-success {
    color: var(--color-success-contrast);
    background-color: var(--color-success);
    border-color: var(--color-success);
}
.button-success:hover {
    background-color: var(--color-success-dark);
    border-color: var(--color-success-darker);
}

/* Secondary/Outline Button */
.button-secondary {
    color: var(--color-primary);
    border-color: var(--color-primary);
}
.button-secondary:hover {
    color: var(--color-primary-contrast);
    background-color: var(--color-primary);
}

/* Small Button Variant */
.button-small {
    padding: var(--spacing-xs) var(--spacing-md); /* Was 6px 12px */
    font-size: 0.875rem;
}

/* --- Alerts / Messages --- */
.alert {
    padding: var(--spacing-md); /* Was 15px 20px */
    margin-bottom: var(--spacing-lg); /* Was 20px */
    border: 1px solid transparent;
    border-radius: var(--border-radius-sm);
    font-weight: 500;
}
.alert-success {
    color: var(--color-success-text-alert);
    background-color: var(--color-success-bg-alert);
    border-color: var(--color-success-dark); /* Or a specific border color for alerts */
}
.alert-danger {
    color: var(--color-danger-text-alert);
    background-color: var(--color-danger-bg-alert);
    border-color: var(--color-danger-dark);
}
.alert-warning {
    color: var(--color-warning-text-alert);
    background-color: var(--color-warning-bg-alert);
    border-color: var(--color-warning-border-alert);
}
.alert-info {
    color: var(--color-info-text-alert);
    background-color: var(--color-info-bg-alert);
    border-color: var(--color-info-border-alert);
}

/* --- Cards --- */
.card {
    background-color: var(--color-bg-light);
    border-radius: var(--border-radius-lg);
    padding: var(--spacing-lg); /* Was 20px, now consistent */
    margin-bottom: var(--spacing-xl); /* Was 30px */
    box-shadow: var(--shadow-md);
}

/* For lists where each item is styled like a card entry */
.card-list { /* Parent ul/ol */
    list-style: none;
    padding: 0;
}
.card-list li {
    background-color: var(--color-bg-lighter);
    padding: var(--spacing-md);
    margin-bottom: var(--spacing-sm); /* Was 10px */
    border-radius: var(--border-radius-md);
    border-left: 4px solid var(--color-primary);
}
.card-list li:last-child {
    margin-bottom: 0;
}

/* ==========================================================================
   7. PAGE-SPECIFIC SECTIONS
   ========================================================================== */

/* --- Auth Pages (Login, Register) --- */
.auth-form-container {
    max-width: 480px;
    margin: var(--spacing-xxl) auto; /* Was 40px */
    padding: var(--spacing-lg) var(--spacing-xl); /* Was 25px 30px */
    background-color: var(--color-bg-light); /* Consistent with .card */
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-lg);
}
.auth-form-container h1 {
    text-align: center;
    margin-bottom: var(--spacing-lg); /* Was 25px */
    font-size: 2rem;
}
.auth-form-container .button-primary, /* Adjusted selector */
.auth-form-container input[type="submit"] {
    width: 100%;
    padding: var(--spacing-sm) var(--spacing-md); /* Consistent button padding */
    font-size: 1.1rem;
}
.auth-links {
    text-align: center;
    margin-top: var(--spacing-lg); /* Was 25px */
    font-size: 0.95em;
}
.auth-links a {
    font-weight: 500;
}

/* --- Search Boxes --- */
.search-box { /* General search box, e.g., homepage movie search, user search */
    display: flex;
    flex-wrap: wrap; /* Allow wrapping */
    gap: var(--spacing-sm); /* Was 10px */
    margin-bottom: var(--spacing-xl); /* Was 30px */
    align-items: stretch;
}
.search-box input[type="text"] {
    flex-grow: 1;
    margin-bottom: 0; /* Gap handles spacing */
    min-width: 200px; /* Minimum width before wrapping */
}
.search-box input[type="submit"], .search-box button {
    margin-bottom: 0; /* Gap handles spacing */
    flex-shrink: 0; /* Prevent button from shrinking too much */
}

/* --- Movie Grids & Items (Homepage, Watchlist) --- */
.movies-grid, .watchlist-grid { /* Generic grid for movie cards */
    display: grid;
    gap: var(--spacing-lg); /* Was 20px */
    grid-template-columns: repeat(auto-fill, minmax(160px, 1fr)); /* Mobile first */
}
.trending-movies-container { /* Could be merged if styling is identical */
    display: grid;
    gap: var(--spacing-lg);
    grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
}

.movie, .movie-in-watchlist, .trending-movie-item { /* Individual movie card */
    background-color: var(--color-bg-lighter);
    border-radius: var(--border-radius-md);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    box-shadow: var(--shadow-sm); /* Was 0 4px 8px rgba(0,0,0,0.2) */
    transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
}
.movie:hover, .movie-in-watchlist:hover, .trending-movie-item:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-md); /* Was 0 8px 16px rgba(0,0,0,0.3) */
}
.movie img, .movie-in-watchlist img, .trending-movie-item img {
    aspect-ratio: 2 / 3; /* Maintain aspect ratio */
    object-fit: cover;
    width: 100%;
}
.movie-info, .movie-info-watchlist { /* Text content of movie card */
    padding: var(--spacing-md);
    flex-grow: 1; /* Allow this part to grow to fill space */
    display: flex;
    flex-direction: column; /* Stack elements vertically */
}
.movie-title, .movie-title-watchlist {
    font-size: 1.05rem;
    font-weight: 600;
    margin-bottom: var(--spacing-sm); /* Was 8px */
    line-height: 1.3;
    color: var(--color-text-light);
}
.movie-title a, .movie-title-watchlist a {
    color: inherit;
}
.movie-title a:hover, .movie-title-watchlist a:hover {
    color: var(--color-primary);
}
.movie-overview {
    font-size: 0.9rem;
    color: var(--color-text-dark);
    margin-bottom: var(--spacing-md); /* Was 12px */
    flex-grow: 1; /* Allow overview to take available space */
}
.movie-info .add-watchlist-form, /* Forms at the bottom of movie card */
.movie-info-watchlist .remove-watchlist-form {
    margin-top: auto; /* Push to bottom */
}
.movie-info .add-watchlist-form input[type="submit"],
.movie-info-watchlist .remove-watchlist-form button {
    width: 100%;
    padding: var(--spacing-sm); /* Was 8px */
    font-size: 0.9rem;
}
.login-prompt { /* For "Login to add" text */
    margin-top: auto; /* Push to bottom */
    font-size: 0.9rem;
}

/* --- Movie Detail Page --- */
.movie-detail-page .card { /* The main container for movie details */
    padding: var(--spacing-lg) var(--spacing-xl); /* Was 25px 30px */
}
.movie-detail-page section:not(:last-child) { /* Sections within movie details like synopsis, cast */
    margin-bottom: var(--spacing-xl); /* Was 30px, now consistent */
}
.movie-detail-page section h2 { /* Headings for these sections */
    border-bottom: 1px solid var(--color-border-medium);
    padding-bottom: var(--spacing-sm); /* Was 10px */
    margin-bottom: var(--spacing-md); /* Was 15px */
    font-size: 1.6rem;
}

.movie-main-header { /* Contains poster and main meta info */
    display: flex;
    flex-direction: column; /* Mobile first */
    gap: var(--spacing-lg); /* Was 25px */
    margin-bottom: var(--spacing-xl); /* Space before content columns */
}
.movie-main-header .movie-poster { /* Container for poster image */
    flex-shrink: 0;
    width: 100%;
    max-width: 300px; /* Max width for poster */
    margin: 0 auto; /* Center on mobile */
}
.movie-detail-poster { /* The poster image itself */
    border-radius: var(--border-radius-md);
    box-shadow: var(--shadow-lg); /* Was 0 5px 15px rgba(0,0,0,0.3) */
}
.movie-main-header .movie-meta-info { /* Text info next to poster */
    flex-grow: 1;
}
.movie-meta-info h1 { /* Movie Title */
    font-size: 2.2rem;
    margin-bottom: var(--spacing-xs); /* Was 5px */
}
.movie-meta-info .release-year {
    font-size: 1.5rem;
    color: var(--color-text-darker); /* Was #aaa */
    font-weight: 400;
}
.movie-meta-info .tagline {
    font-style: italic;
    color: var(--color-text-medium); /* Was #ccc */
    margin-bottom: var(--spacing-md); /* Was 15px */
    font-size: 1.1rem;
}
.movie-meta-info .meta-grid { /* For genre, duration etc. */
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--spacing-xs) var(--spacing-md); /* Was 5px 15px */
    margin: var(--spacing-md) 0;
    font-size: 0.9em;
}
.movie-meta-info .meta-grid p {
    margin-bottom: 0; /* Grid handles spacing */
    color: var(--color-text-medium); /* Was #c0c0c0 */
}
.movie-meta-info .meta-grid p strong {
    color: var(--color-text-light);
}
.movie-user-actions, .login-prompt-actions { /* Buttons for watchlist, etc. */
    margin-top: var(--spacing-lg); /* Was 15px/20px */
    display: flex;
    flex-direction: column; /* Stack on mobile */
    gap: var(--spacing-sm); /* Was 10px */
}
.movie-user-actions .button-primary, .movie-user-actions .button-danger {
    width: 100%; /* Full width on mobile */
}

/* Layout for Main Content and Sidebar on Movie Details */
.movie-content-columns {
    display: flex;
    flex-direction: column; /* Mobile first */
    gap: var(--spacing-xl); /* Was 25px */
    /* margin-top: var(--spacing-xl); Already handled by movie-main-header margin-bottom */
}
.main-column {
    flex: 2; /* Takes more space */
    display: flex;
    flex-direction: column;
    gap: var(--spacing-xl); /* Space between sections */
}
.sidebar-column {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-xl);
}
.card-section { /* For sections within the columns, e.g., synopsis, user-interaction */
    /* Basic card styling is inherited from .card if these are also .card */
    /* margin-bottom is handled by parent gap */
}
.card-section h2 {
    margin-top: 0; /* Already handled by h*:first-child */
}

.trailer-container {
    position: relative;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    height: 0;
    overflow: hidden;
    border-radius: var(--border-radius-md);
    background-color: #000; /* Black background for iframe */
}
.trailer-container iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: 0;
}

.cast-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: var(--spacing-lg); /* Was 20px */
}
.actor { /* Individual actor card */
    background-color: var(--color-bg-lighter);
    border-radius: var(--border-radius-md);
    padding: var(--spacing-md); /* Was 12px */
    text-align: center;
    box-shadow: var(--shadow-sm);
}
.actor img {
    width: 100px; /* Fixed width for actor photo */
    height: 150px;
    object-fit: cover;
    border-radius: var(--border-radius-sm);
    margin: 0 auto var(--spacing-sm) auto; /* Was 10px */
}
.actor figcaption { /* Replaced p for semantic HTML */
    font-size: 0.9rem;
    line-height: 1.4;
    color: var(--color-text-dark);
}
.actor figcaption strong {
    color: var(--color-text-light);
    display: block;
}

.user-interaction-section select#rating {
    max-width: 220px; /* Limit width of rating select */
}

.comments-list .comment-item { /* Individual comment */
    background-color: var(--color-bg-lighter);
    padding: var(--spacing-md);
    border-radius: var(--border-radius-md);
    margin-bottom: var(--spacing-md); /* Was 15px */
    border-left: 4px solid var(--color-primary-dark); /* Consistent with .card-list li but darker */
}
.comments-list .comment-meta {
    font-size: 0.9rem;
    margin-bottom: var(--spacing-sm); /* Was 8px */
}
.comments-list .comment-meta strong a {
    font-weight: 600; /* Keep if different from normal 'a strong' */
}
.comments-list .comment-date {
    color: var(--color-text-muted);
    margin-left: var(--spacing-sm); /* Was 8px */
}
.comments-list .comment-text {
    color: var(--color-text-medium); /* Was #d0d0d0 */
    word-wrap: break-word;
}

/* --- User Profiles (Own and View) & User Lists --- */
/* .profile-page .card, .view-profile-page .card, .users-list-page .card use general .card styles */

.profile-header { /* Specific to profile pages */
    /* inherits .card styling */
}
.profile-header .meta-info {
    font-size: 0.95em;
    color: var(--color-text-darker); /* Was #aaa */
    margin-bottom: var(--spacing-md); /* Was 15px */
}
.profile-header .friend-actions {
    margin-top: var(--spacing-lg); /* Was 20px */
    padding-top: var(--spacing-lg);
    border-top: 1px solid var(--color-border-medium);
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-sm); /* Was 10px */
}
.profile-header .friend-actions p {
    margin: 0;
    align-self: center;
}
.inline-form { /* For forms inside list items or flowing with text */
    display: inline-block;
    margin: 0 var(--spacing-xs); /* Was 5px */
}
.inline-form button, .inline-form input[type="submit"] {
    /* Use .button-small styles or define specific smaller padding */
    padding: var(--spacing-xs) var(--spacing-sm); /* Was 6px 12px */
    font-size: 0.9em;
}

/* Friend Request, Friend List, User List (Shared structure) */
.friend-request-list, .friend-list, .users-list-page .user-list {
    /* Use .card-list styles */
}
.friend-request-list li, .friend-list li, .users-list-page .user-list li {
    /* Use .card-list li styles */
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
    gap: var(--spacing-sm); /* Was 10px */
}
/* Actions within these list items */
.friend-request-list li .actions, /* Container for accept/decline buttons */
.friend-list li .inline-form, /* Unfriend button form */
.users-list-page .user-list li .button { /* View profile button */
    margin-left: auto; /* Push to the right */
    flex-shrink: 0;
    display: flex; /* For multiple buttons in .actions */
    gap: var(--spacing-sm); /* Was 10px */
}

.profile-management select#profile_visibility {
    max-width: 300px;
}
.profile-annotations-private.card p {
    font-style: italic;
    color: var(--color-text-darker); /* Was #aaa */
}

/* --- Static Pages (FAQ, Terms) --- */
.static-page h1 {
    margin-bottom: var(--spacing-xl); /* Was 30px */
    text-align: center;
}
.faq-list { /* Container for FAQ items */
    list-style: none;
    padding: 0;
}
.faq-item { /* Individual Q&A block */
    background-color: var(--color-bg-light); /* Consistent with .card */
    padding: var(--spacing-lg);
    margin-bottom: var(--spacing-lg); /* Was 20px */
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-sm);
}
.faq-item dt { /* Question */
    font-weight: 600;
    font-size: 1.2rem;
    color: var(--color-primary);
    margin-bottom: var(--spacing-sm); /* Was 10px */
}
.faq-item dd { /* Answer */
    margin-left: 0;
    color: var(--color-text-medium); /* Was #d0d0d0 */
    line-height: 1.7;
}

.terms-content { /* Container for Terms text */
    background-color: var(--color-bg-light);
    padding: var(--spacing-lg) var(--spacing-xl);
    border-radius: var(--border-radius-lg);
    line-height: 1.7;
}
.terms-content h2 {
    font-size: 1.5rem;
    margin-top: 1.8em;
    margin-bottom: 0.8em;
    border-bottom: 1px solid var(--color-border-medium);
    padding-bottom: var(--spacing-sm); /* Was 8px */
}
.terms-content p {
    margin-bottom: 1.2em;
}
.terms-content strong, .terms-content b { /* More specific than general strong/b if needed */
    color: var(--color-text-light);
}
.terms-content em {
    color: var(--color-text-medium); /* Was #ccc */
}

/* --- Forum Styles --- */
.forum-page .create-thread-link { /* Link to create new thread */
    text-align: right;
    margin-bottom: var(--spacing-lg); /* Was 20px */
}
.create-thread-page .card, /* Form for new thread */
.view-thread-page .card {   /* Cards for posts and reply form */
    margin-bottom: var(--spacing-xl); /* Was 25px */
}

.forum-threads-table { /* Table listing threads */
    width: 100%;
    border-collapse: collapse;
    font-size: 0.9rem;
}
.forum-threads-table th,
.forum-threads-table td {
    padding: var(--spacing-sm) var(--spacing-md); /* Was 10px 12px */
    border-bottom: 1px solid var(--color-border-dark); /* Was #3a3a3a */
    text-align: left;
    vertical-align: middle;
}
.forum-threads-table th {
    background-color: var(--color-bg-lighter);
    color: var(--color-primary);
    font-weight: 600;
}
.forum-threads-table tbody tr:hover {
    background-color: color-mix(in srgb, var(--color-bg-dark) 50%, var(--color-bg-lighter)); /* Slightly darker than row bg */
}
.forum-threads-table td:first-child { /* Thread title column */
    font-weight: 500;
}
.forum-threads-table td.replies-column, /* Example class for replies count */
.forum-threads-table td.activity-column { /* Example class for last activity */
    text-align: center;
    font-size: 0.85rem;
    color: var(--color-text-darker); /* Was #aaa */
}

/* Movie Search Dropdown (for create thread) */
.movie-search-results-dropdown {
    position: relative; /* Can be absolute if positioned relative to input */
    background-color: var(--color-bg-lighter);
    border: 1px solid var(--color-border-light);
    border-top: none;
    border-radius: 0 0 var(--border-radius-sm) var(--border-radius-sm);
    max-height: 200px;
    overflow-y: auto;
    z-index: 1000;
    display: none; /* JS toggles this */
}
.movie-search-results-dropdown ul {
    list-style: none;
    padding: 0;
    margin: 0;
}
.movie-search-results-dropdown li {
    padding: var(--spacing-sm) var(--spacing-md); /* Was 8px 12px */
    cursor: pointer;
    border-bottom: 1px solid var(--color-border-dark); /* Was #3a3a3a */
}
.movie-search-results-dropdown li:last-child {
    border-bottom: none;
}
.movie-search-results-dropdown li:hover {
    background-color: var(--color-primary);
    color: var(--color-primary-contrast);
}
.selected-movie-text { /* Text showing selected movie */
    margin-top: var(--spacing-sm); /* Was 8px */
    font-size: 0.9em;
    color: var(--color-text-medium); /* Was #ccc */
}
.selected-movie-text strong {
    color: var(--color-primary);
}

/* View Thread Page Specifics */
.forum-breadcrumb {
    margin-bottom: var(--spacing-lg); /* Was 20px */
    font-size: 0.9em;
}
.forum-breadcrumb ol {
    list-style: none;
    padding: 0;
    margin: 0;
}
.forum-breadcrumb li {
    display: inline;
    color: var(--color-text-darker); /* Was #aaa */
}
.forum-breadcrumb li:not(:last-child)::after {
    content: ' / ';
    margin: 0 var(--spacing-xs); /* Was 5px */
    color: var(--color-text-muted); /* Was #777 */
}
.forum-breadcrumb a {
    color: var(--color-primary);
}
.view-thread-page h1 { /* Thread title */
    margin-bottom: var(--spacing-xs); /* Was 5px */
}
.thread-meta { /* Info about movie associated with thread */
    font-size: 0.9em;
    color: var(--color-text-darker); /* Was #aaa */
    margin-bottom: var(--spacing-xl); /* Was 25px */
}

.forum-post { /* Original post and replies container */
    /* Inherits .card if applied, or define base here */
    padding: var(--spacing-md) var(--spacing-lg); /* Was 15px 20px */
    margin-bottom: var(--spacing-lg); /* Was 20px */
}
.forum-post .post-header {
    margin-bottom: var(--spacing-sm); /* Was 10px */
    padding-bottom: var(--spacing-sm);
    border-bottom: 1px solid var(--color-border-dark); /* Was #333 */
    font-size: 0.9em;
}
.forum-post .post-header strong { /* Author username */
    font-size: 1.1em;
}
.forum-post .post-date {
    color: var(--color-text-muted); /* Was #888 */
    margin-left: var(--spacing-sm); /* Was 10px */
}
.forum-post .post-content {
    line-height: 1.7;
    word-wrap: break-word;
}
.forum-post footer { /* For reply links, etc. */
    margin-top: var(--spacing-md); /* Was 15px */
    text-align: right;
}
.reply-to-post-link {
    font-size: 0.85em;
}
.reply-form-section h2 { /* "Leave a Reply" heading */
    margin-bottom: var(--spacing-md); /* Was 15px */
}

/* --- Scene Annotation Specifics --- */
.scene-details-fieldset { /* Fieldset for scene details in create thread form */
    border: 1px solid var(--color-border-medium);
    padding: var(--spacing-md) var(--spacing-lg);
    margin-bottom: var(--spacing-lg); /* Was 20px */
    border-radius: var(--border-radius-md);
}
.scene-details-fieldset legend {
    padding: 0 var(--spacing-sm); /* Was 10px */
    font-weight: 500;
    color: var(--color-primary);
}
.scene-annotation-tag { /* Small tag in forum list */
    font-size: 0.8em;
    color: var(--color-primary);
    margin-left: var(--spacing-xs); /* Was 5px */
    font-weight: normal;
    display: inline-block;
    background-color: color-mix(in srgb, var(--color-primary) 10%, transparent); /* Light teal background */
    padding: 2px var(--spacing-xs); /* Was 5px */
    border-radius: var(--border-radius-sm); /* Was 3px */
}

/* Scene Info Display (view thread, movie details) */
.scene-annotation-info.card { /* Used in view_thread_page */
    background-color: color-mix(in srgb, var(--color-bg-light) 90%, black); /* Slightly different from default card */
    border-left: 4px solid var(--color-primary-dark);
    padding: var(--spacing-md);
    margin-bottom: var(--spacing-lg); /* Was 20px */
}
.scene-annotation-info h3 {
    margin-top: 0;
    margin-bottom: var(--spacing-sm); /* Was 10px */
    font-size: 1.2rem;
    color: var(--color-text-light);
}
.scene-annotation-info .scene-desc,
.scene-annotation-info .scene-time {
    margin-bottom: var(--spacing-xs); /* Was 5px */
    color: var(--color-text-medium); /* Was #ccc */
}
.scene-annotation-info .scene-time strong,
.scene-annotation-info .scene-desc strong {
    color: var(--color-text-light); /* Was #d5d5d5 */
}

/* Annotations List (movie details, profile) */
.annotate-scene-action.card { /* Card prompting to annotate */
    text-align: center;
}
.annotate-scene-action h2 {
    margin-bottom: var(--spacing-sm); /* Was 10px */
}
.annotate-scene-action p {
    margin-bottom: var(--spacing-md); /* Was 15px */
}

.annotations-list { /* ul container */
    list-style: none;
    padding: 0;
}
.annotations-list .annotation-item { /* li item */
    background-color: var(--color-bg-lighter);
    padding: var(--spacing-md);
    margin-bottom: var(--spacing-md); /* Was 15px */
    border-radius: var(--border-radius-md);
    border-left: 3px solid var(--color-primary);
}
.annotations-list .annotation-item:last-child {
    margin-bottom: 0;
}
.annotations-list .annotation-title strong {
    font-size: 1.1rem;
    color: var(--color-text-light);
}
.annotations-list .annotation-title:hover strong {
    color: var(--color-primary);
}
.annotations-list .scene-desc-preview,
.annotations-list .scene-time-preview,
.annotations-list .movie-link { /* Sub-info for annotation */
    font-size: 0.9em;
    color: var(--color-text-dark);
    margin: var(--spacing-xs) 0; /* Was 5px */
}
.annotations-list .annotation-meta { /* Author, date */
    font-size: 0.85em;
    color: var(--color-text-muted); /* Was #888 */
    margin-top: var(--spacing-sm); /* Was 8px */
}

/* --- Admin Panel --- */
.admin-panel-page .card {
    padding: var(--spacing-lg) var(--spacing-xl); /* Was 20px 25px */
}
.admin-users-table { /* Shared by user management and FAQ list */
    width: 100%;
    border-collapse: collapse;
    margin-top: var(--spacing-lg); /* Was 20px */
    font-size: 0.9rem;
}
.admin-users-table th,
.admin-users-table td {
    text-align: left;
    padding: var(--spacing-sm) var(--spacing-md); /* Was 10px 12px */
    border-bottom: 1px solid var(--color-border-dark); /* Was #3a3a3a */
}
.admin-users-table th {
    background-color: var(--color-bg-lighter);
    color: var(--color-primary);
    font-weight: 600;
}
.admin-users-table tbody tr:nth-child(even) {
    background-color: color-mix(in srgb, var(--color-bg-dark) 70%, var(--color-bg-lighter)); /* Slightly different for even rows */
}
.admin-users-table tbody tr:hover {
    background-color: color-mix(in srgb, var(--color-bg-dark) 50%, var(--color-bg-lighter));
}
.admin-users-table .status-banned {
    color: color-mix(in srgb, var(--color-danger) 80%, var(--color-text-light)); /* Lighter red */
    font-weight: bold;
}
.admin-users-table .status-active {
    color: color-mix(in srgb, var(--color-success) 80%, var(--color-text-light)); /* Lighter green */
}
.admin-users-table .inline-form { /* Ensure forms in table cells don't add extra margin */
    margin: 0;
}

/* ==========================================================================
   8. MONETIZATION STYLES (Ads, Streaming Links)
   ========================================================================== */
/* --- Placeholder Advertisements --- */
.advertisement-slot {
    margin: var(--spacing-xl) 0; /* Was 20px or 25px */
    padding: var(--spacing-lg); /* Was 15px or 20px */
    background-color: var(--color-bg-medium); /* Was #222 or #2a2a2a */
    border: 1px dashed var(--color-border-medium);
    text-align: center;
    min-height: 100px;
    border-radius: var(--border-radius-md); /* Was 6px or none */
}
/* .advertisement-slot h4 (Removed as it wasn't used consistently) */
.placeholder-ad-content {
    /* border: 2px dashed var(--color-border-light); Optional inner border */
    padding: var(--spacing-md);
    /* background-color: var(--color-bg-lighter); Optional inner bg */
    color: var(--color-text-darker); /* Was #aaa */
    min-height: 90px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}
.placeholder-ad-content p {
    margin-bottom: var(--spacing-xs); /* Was 5px or 8px */
    line-height: 1.4;
}
.placeholder-ad-content strong {
    color: var(--color-text-medium); /* Was #ccc */
    font-size: 1.1em;
}
.ad-sidebar { /* If specific sidebar ad styling is needed */
    max-width: 300px;
    margin-left: auto;
    margin-right: auto;
}
/* .adsbygoogle (Remains as is, for potential real AdSense) */
.adsbygoogle {
    display: block;
}

/* --- Streaming Options Section (Movie Details) --- */
.movie-streaming-options { /* Container for streaming links */
    margin-top: var(--spacing-lg); /* Was 15px or 20px */
    padding-top: var(--spacing-lg);
    border-top: 1px solid var(--color-border-dark); /* Was #333 or #3a3a3a */
}
.movie-streaming-options.card { /* If it has .card class */
    background-color: color-mix(in srgb, var(--color-bg-light) 90%, black); /* Slightly distinct */
    border-left: 4px solid var(--color-streaming-link-hover); /* Example accent */
}
.movie-streaming-options h3 {
    margin-top: 0;
    margin-bottom: var(--spacing-md); /* Was 15px */
    font-size: 1.2rem; /* Consistent with scene-annotation-info h3 */
    color: var(--color-text-light);
}
.streaming-providers-list {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-sm); /* Was 10px or 15px */
    align-items: center;
    margin-bottom: var(--spacing-sm); /* Was 5px or 10px */
}
.streaming-provider-link {
    display: inline-flex;
    align-items: center;
    padding: var(--spacing-xs) var(--spacing-sm); /* Was 6px 10px or 8px 12px */
    background-color: var(--color-bg-lighter); /* Was #333 or #383838 */
    color: var(--color-text-medium); /* Was #e0e0e0 or #d0d0d0 */
    border-radius: var(--border-radius-sm); /* Was 4px or 5px */
    text-decoration: none;
    transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;
    border: 1px solid var(--color-border-light); /* Was #484848 or none */
}
.streaming-provider-link:hover {
    background-color: var(--color-primary); /* Was #007bff or #00bfa5 */
    color: var(--color-primary-contrast); /* Was #fff or #111 */
    border-color: var(--color-primary);
}
.streaming-provider-link img {
    width: 20px; /* Was 20px or 24px */
    height: 20px;
    object-fit: contain;
    margin-right: var(--spacing-sm); /* Was 8px */
    vertical-align: middle; /* Good practice */
}
.streaming-provider-link span {
    font-size: 0.85rem; /* Was 0.85rem or 0.9rem */
    font-weight: 500;
    white-space: nowrap;
}
.affiliate-disclosure {
    display: block;
    font-size: 0.8em;
    color: var(--color-text-muted); /* Was #888 or #999 */
    margin-top: var(--spacing-sm); /* Was 10px or 15px */
    text-align: left; /* Or center, consistent with previous */
}


/* ==========================================================================
   9. MEDIA QUERIES (Responsive Adjustments)
   ========================================================================== */
/* Tablets and larger mobiles */
@media (min-width: 576px) {
    .movies-grid, .watchlist-grid {
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    }
    .trending-movies-container {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }
    .cast-list {
        grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));
    }
    .movie-user-actions { /* Buttons side-by-side */
        flex-direction: row;
    }
    .movie-user-actions .button-primary, .movie-user-actions .button-danger {
        width: auto; /* Auto width for buttons */
    }
    .comments-list .comment-date {
        display: inline; /* Show date inline */
    }
}

/* Tablets */
@media (min-width: 768px) {
    html { font-size: 17px; }
    .container { padding: 0 var(--spacing-lg); } /* Was 20px */
    h1 { font-size: 2.8rem; }
    h2 { font-size: 2.2rem; }

    .main-navigation .nav-link { margin: 0 var(--spacing-md); } /* Was 15px */
    .search-box { flex-wrap: nowrap; } /* Prevent search input/button wrapping */

    .movie-main-header {
        flex-direction: row; /* Poster and meta info side-by-side */
        align-items: flex-start;
    }
    .movie-main-header .movie-poster {
        width: 250px;
        margin: 0; /* Reset mobile margin */
        margin-right: var(--spacing-xl); /* Space between poster and text */
    }
    .friend-request-list li, .friend-list li, .users-list-page .user-list li {
        flex-wrap: nowrap; /* Prevent wrapping of content and actions */
    }

    /* Responsive Forum Table */
    .forum-threads-table th.author-column, /* Add classes to th/td for targeting */
    .forum-threads-table td.author-column,
    .forum-threads-table th.activity-column,
    .forum-threads-table td.activity-column {
        /* display: none; /* Hide less critical columns */
        /* Consider making them visible but with less priority or smaller font if space is an issue */
    }
     .forum-threads-table th.film-column,
    .forum-threads-table td.film-column {
        /* display: none; */
    }

    /* Admin Table Responsiveness */
    .user-management-section { /* Parent of admin table */
        display: block;
        width: 100%;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }
    .admin-users-table {
        min-width: 800px; /* Ensure table has enough width for all columns */
    }
    .admin-users-table th,
    .admin-users-table td {
        white-space: nowrap; /* Prevent text wrapping in cells */
    }

    /* Main Navigation on smaller tablets */
    .main-navigation .nav-link {
        margin: 0 var(--spacing-xs); /* Was 5px */
        padding: var(--spacing-sm); /* Was 8px 8px */
        font-size: 0.9rem;
    }
}

/* Desktops */
@media (min-width: 992px) {
    .movies-grid, .watchlist-grid {
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    }
     .trending-movies-container {
        grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
    }
    .cast-list {
        grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
    }
    .movie-main-header .movie-poster {
        width: 280px;
    }
    .movie-content-columns { /* Movie details content and sidebar */
        flex-direction: row;
    }
}

/* Large Desktops */
@media (min-width: 1200px) {
    html { font-size: 18px; }
    .movies-grid, .watchlist-grid {
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
    }
     .trending-movies-container {
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    }
    .movie-main-header .movie-poster {
        width: 300px;
    }
}

/* assets/style.css */

/* ... (vos styles existants pour .advertisement-slot et .placeholder-ad-content) ... */

/* Styles pour le contenu des fausses publicités générées */
.fake-ad-content {
    padding: var(--spacing-md);
    text-align: left; /* Ou center si vous préférez pour le contenu de la pub */
    border-left: 5px solid var(--color-primary); /* Couleur par défaut */
    display: flex;
    flex-direction: column;
    align-items: flex-start; /* Aligner à gauche */
    gap: var(--spacing-sm);
}

.fake-ad-title {
    color: var(--color-primary); /* Couleur par défaut */
    margin-bottom: var(--spacing-xs);
    font-size: 1.1em;
    font-weight: 600;
}

.fake-ad-text {
    font-size: 0.9em;
    line-height: 1.5;
    color: var(--color-text-dark); /* Un peu plus clair que le texte normal muted */
    margin-bottom: var(--spacing-sm);
}

.fake-ad-cta { /* Style pour le bouton Call To Action */
    border-color: var(--color-primary); /* Couleur par défaut */
    color: var(--color-primary);
    align-self: flex-start; /* Bouton à gauche */
}
.fake-ad-cta:hover {
    background-color: var(--color-primary);
    color: var(--color-primary-contrast);
}

/* Exemple de style thématique si vous utilisez des classes comme .ad-theme-blockbuster-de-l-ete */
.ad-theme-blockbuster-de-l-ete .fake-ad-title,
.ad-theme-blockbuster-de-l-ete .fake-ad-cta {
    color: #FFD700; /* Or */
    border-color: #FFD700;
}
.ad-theme-blockbuster-de-l-ete { border-left-color: #FFD700; }

.ad-theme-soiree-cinema-parfaite .fake-ad-title,
.ad-theme-soiree-cinema-parfaite .fake-ad-cta {
    color: #DA70D6; /* Orchidée */
    border-color: #DA70D6;
}
.ad-theme-soiree-cinema-parfaite { border-left-color: #DA70D6; }

/* Ajoutez des styles similaires pour les autres thèmes... */
.ad-theme-les-classiques-remasterises .fake-ad-title,
.ad-theme-les-classiques-remasterises .fake-ad-cta {
    color: #77B5FE; /* Bleu ciel */
    border-color: #77B5FE;
}
.ad-theme-les-classiques-remasterises { border-left-color: #77B5FE; }

.ad-theme-festival-du-film-independant .fake-ad-title,
.ad-theme-festival-du-film-independant .fake-ad-cta {
    color: #32CD32; /* Vert citron */
    border-color: #32CD32;
}
.ad-theme-festival-du-film-independant { border-left-color: #32CD32; }

.ad-theme-le-podcast-cinema .fake-ad-title,
.ad-theme-le-podcast-cinema .fake-ad-cta {
    color: #FF7F50; /* Corail */
    border-color: #FF7F50;
}
.ad-theme-le-podcast-cinema { border-left-color: #FF7F50; }


/* Assurez-vous que .advertisement-slot est bien stylé */
.advertisement-slot {
    background-color: var(--color-bg-medium); /* Ou une autre couleur de fond pour la pub */
    border: 1px solid var(--color-border-medium); /* Une bordure pour délimiter */
    padding: var(--spacing-sm); /* Un peu de padding interne pour ne pas coller le contenu */
    /* text-align: center; (si le contenu interne doit être centré, sinon left) */
}

/* assets/style.css */

/* Styles pour le conteneur global du slot publicitaire */
.advertisement-slot {
    /* Vos styles existants sont probablement bons :
       margin, padding, background-color, border, border-radius */
}

/* Contenu interne généré par la fonction PHP */
.simulated-ad-content {
    padding: var(--spacing-md);
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
    position: relative; /* Pour le positionnement du tag "Publicité" */
    background-color: var(--color-bg-lighter); /* Un fond pour le contenu de la pub elle-même */
    border-radius: var(--border-radius-sm); /* Coins arrondis */
    box-shadow: inset 0 0 5px rgba(0,0,0,0.1); /* Légère ombre intérieure */
}

.ad-title {
    font-size: 1.1em;
    font-weight: 600;
    margin-bottom: var(--spacing-xs);
    color: var(--color-text-light); /* Couleur de base */
}

.ad-text {
    font-size: 0.9em;
    line-height: 1.4;
    color: var(--color-text-dark);
    margin-bottom: var(--spacing-sm);
}

.ad-price {
    font-size: 1em;
    font-weight: bold;
    color: var(--color-success); /* Vert pour le prix, par exemple */
    margin-bottom: var(--spacing-sm);
}

.ad-cta { /* Style du bouton Call To Action */
    /* Hérite des styles .button .button-small */
    /* Des styles spécifiques peuvent être ajoutés ici ou via les classes thématiques */
    align-self: flex-start; /* Pour les pubs textuelles */
}

.ad-image-banner { /* Pour les images de type bannière */
    width: 100%;
    height: auto;
    border-radius: var(--border-radius-sm);
    display: block;
}

.ad-image-product { /* Pour les images de produits */
    max-width: 150px; /* Ou une taille appropriée */
    height: auto;
    margin: 0 auto var(--spacing-sm) auto; /* Centrer l'image produit */
    border-radius: var(--border-radius-sm);
    border: 1px solid var(--color-border-light);
}

.ad-sponsored-tag {
    position: absolute;
    top: var(--spacing-xs);
    right: var(--spacing-xs);
    font-size: 0.7em;
    color: var(--color-text-muted);
    background-color: color-mix(in srgb, var(--color-bg-dark) 50%, transparent);
    padding: 2px 5px;
    border-radius: var(--border-radius-sm);
}

/* Styles thématiques (exemples, à développer) */
.ad-theme-gold .ad-title, .ad-theme-gold .ad-cta { color: #FFD700; border-color: #FFD700; }
.ad-theme-gold.simulated-ad-content { border-left: 5px solid #FFD700; } /* si vous voulez la bordure latérale */

.ad-theme-blue .ad-title, .ad-theme-blue .ad-cta { color: #77B5FE; border-color: #77B5FE; }
.ad-theme-blue.simulated-ad-content { border-left: 5px solid #77B5FE; }

.ad-theme-scifi .ad-title { color: #DA70D6; /* Orchidée pour sci-fi */ }
.ad-theme-scifi .ad-cta { color: #DA70D6; border-color: #DA70D6; }
.ad-theme-scifi.simulated-ad-content { border-left: 5px solid #DA70D6; }

.ad-theme-classic .ad-title { color: #D2B48C; /* Tan pour classique */ }
.ad-theme-classic .ad-cta { color: #D2B48C; border-color: #D2B48C; }
.ad-theme-classic.simulated-ad-content { border-left: 5px solid #D2B48C; }

.ad-theme-brand .ad-title { color: var(--color-primary); /* Utilise la couleur primaire du site */ }
.ad-theme-brand .ad-cta { color: var(--color-primary); border-color: var(--color-primary); }
.ad-theme-brand.simulated-ad-content { border-left: 5px solid var(--color-primary); }

.ad-theme-tech .ad-title { color: #00C1D4; /* Un bleu tech/cyan */ }
.ad-theme-tech .ad-cta { color: #00C1D4; border-color: #00C1D4; }
.ad-theme-tech.simulated-ad-content { border-left: 5px solid #00C1D4; }

/* Ajustement pour que les boutons CTA ne prennent pas toute la largeur dans certains flex contexts */
.simulated-ad-content > .ad-cta {
    align-self: flex-start;
}
.simulated-ad-content.ad-banner > a { /* L'image bannière est le lien, pas de bouton séparé */
    display:block;
}
/* --------------------
   SITE HEADER & NAVIGATION (Mises à jour)
   -------------------- */
.site-header {
    background-color: #1f1f1f;
    padding: 10px 0; /* Ajuster le padding */
    box-shadow: 0 2px 10px rgba(0,0,0,0.3);
    margin-bottom: 30px;
    position: sticky; /* Optionnel: rendre le header collant en haut */
    top: 0;
    z-index: 1000; /* Assurer qu'il est au-dessus des autres contenus si collant */
}

.header-container {
    display: flex;
    justify-content: space-between; /* Éléments espacés */
    align-items: center;
    flex-wrap: wrap; /* Permettre le retour à la ligne sur petits écrans */
    gap: 15px; /* Espace entre les éléments du header */
}

.site-branding .site-logo-link {
    text-decoration: none;
}
.site-branding .site-title-header {
    font-size: 1.8rem; /* Ajuster la taille */
    font-weight: 700;
    color: #00bfa5; /* Couleur du thème */
    text-decoration: none;
}
.site-branding .site-title-header:hover {
    color: #008c7a;
}


.main-navigation ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex; /* Aligner les liens horizontalement */
    flex-wrap: wrap; /* Permettre le retour à la ligne */
    gap: 5px; /* Espace entre les liens */
}

.main-navigation li {
    /* Pas de style spécifique nécessaire pour li ici si gap est sur ul */
}

.main-navigation .nav-link {
    color: #e0e0e0;
    font-weight: 500;
    margin: 0; /* Retirer les marges si gap est utilisé sur ul/li */
    padding: 8px 12px;
    border-radius: 4px;
    transition: background-color 0.2s ease, color 0.2s ease;
    display: inline-block;
    text-decoration: none; /* Assurer qu'il n'y a pas de soulignement par défaut */
}
.main-navigation .nav-link:hover,
.main-navigation .nav-link:focus,
.main-navigation .nav-link.active {
    background-color: #00bfa5;
    color: #111;
    text-decoration: none;
}

/* Barre de recherche dans le header */
.header-search-bar {
    /* Flex grow/shrink/basis peuvent être utilisés si vous voulez un contrôle plus fin
       par rapport à la navigation sur les grands écrans */
    /* min-width: 200px; /* Assurer une largeur minimale */
}

.search-form-header {
    display: flex;
    align-items: center;
    background-color: #2c2c2c; /* Fond similaire aux inputs */
    border-radius: 20px; /* Coins arrondis pour la barre */
    padding: 2px 5px 2px 10px; /* Petit padding interne */
    border: 1px solid #444;
    max-width: 300px; /* Limiter la largeur maximale */
}
.search-form-header:focus-within { /* Style quand l'input a le focus */
    border-color: #00bfa5;
    box-shadow: 0 0 0 2px rgba(0, 191, 165, 0.2);
}

.search-form-header input[type="text"] {
    flex-grow: 1; /* L'input prend l'espace disponible */
    background-color: transparent; /* Fond transparent, hérite de .search-form-header */
    color: #e0e0e0;
    border: none; /* Pas de bordure pour l'input lui-même */
    padding: 8px 5px; /* Padding pour l'input */
    font-size: 0.9rem;
    outline: none; /* Pas d'outline par défaut */
    width: 100%; /* S'assurer qu'il remplit l'espace */
}
.search-form-header input[type="text"]::placeholder {
    color: #888;
}

.search-form-header .search-button-header {
    background-color: transparent;
    border: none;
    color: #aaa; /* Couleur de l'icône */
    padding: 8px;
    cursor: pointer;
    display: flex; /* Pour bien centrer l'icône SVG */
    align-items: center;
    justify-content: center;
    border-radius: 50%; /* Bouton rond */
}
.search-form-header .search-button-header:hover,
.search-form-header .search-button-header:focus {
    color: #00bfa5; /* Couleur au survol/focus */
    background-color: rgba(0, 191, 165, 0.1); /* Léger fond au survol */
}
.search-form-header .search-button-header svg {
    width: 1em;  /* Taille de l'icône relative à la police */
    height: 1em;
}

/* Media Queries pour la responsivité du header */
@media (max-width: 992px) { /* Ajuster ce point de rupture si nécessaire */
    .header-container {
        flex-direction: column; /* Empiler les éléments verticalement */
        align-items: flex-start; /* Aligner à gauche */
    }
    .main-navigation {
        width: 100%; /* La navigation prend toute la largeur */
        margin-top: 10px;
        margin-bottom: 10px;
    }
    .main-navigation ul {
        justify-content: flex-start; /* Aligner les liens de nav à gauche */
    }
    .header-search-bar {
        width: 100%; /* La barre de recherche prend toute la largeur */
        margin-top: 10px;
    }
    .search-form-header {
        max-width: none; /* Permettre à la barre de recherche de prendre toute la largeur */
    }
}

@media (max-width: 768px) {
    .site-branding .site-title-header {
        font-size: 1.5rem;
    }
    .main-navigation .nav-link {
        padding: 8px 10px;
        font-size: 0.9rem;
    }
     .main-navigation ul {
        gap: 0px 5px; /* réduire l'espacement horizontal sur mobile */
        justify-content: center; /* Centrer les liens sur très petits écrans */
    }
}

/* --------------------
   SITE HEADER & NAVIGATION (Mises à jour pour logo et style de recherche)
   -------------------- */
.site-header {
    background-color: #1f1f1f; /* Ou #1a1a1a si vous voulez qu'il corresponde exactement au fond du body */
    padding: 10px 0;
    box-shadow: 0 2px 10px rgba(0,0,0,0.3);
    margin-bottom: 30px;
    position: sticky;
    top: 0;
    z-index: 1000;
}

.header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 15px;
}

/* --- Site Branding avec Logo --- */
.site-branding .site-logo-link {
    display: flex; /* Pour aligner le logo et le titre sur la même ligne */
    align-items: center; /* Centrer verticalement */
    text-decoration: none;
    color: #00bfa5; /* Couleur du thème pour le titre à côté du logo */
}
.site-branding .site-logo-link:hover {
    color: #008c7a; /* Assombrir au survol */
}

.site-branding .site-logo-image {
    height: 40px; /* Ajustez la hauteur de votre logo */
    width: auto;   /* La largeur s'ajustera proportionnellement */
    margin-right: 10px; /* Espace entre le logo et le titre */
    object-fit: contain; /* S'assure que le logo n'est pas déformé */
}

.site-branding .site-title-header {
    font-size: 1.8rem;
    font-weight: 700;
    /* La couleur est héritée de .site-logo-link ou peut être définie ici */
}


.main-navigation ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
}

.main-navigation .nav-link {
    color: #e0e0e0;
    font-weight: 500;
    padding: 8px 12px;
    border-radius: 4px;
    transition: background-color 0.2s ease, color 0.2s ease;
    display: inline-block;
    text-decoration: none;
}
.main-navigation .nav-link:hover,
.main-navigation .nav-link:focus,
.main-navigation .nav-link.active {
    background-color: #00bfa5; /* Turquoise pour le lien actif/survol */
    color: #111; /* Texte foncé pour le contraste */
}

/* --- Barre de recherche dans le header (style de la page d'accueil) --- */
.header-search-bar {
    /* margin-left: auto; /* Pour pousser la barre de recherche vers la droite sur les grands écrans si besoin */
}

.search-form-header {
    display: flex;
    align-items: center;
    /* Style inspiré de votre image de page d'accueil */
    background-color: #2c2c2c; /* Fond un peu plus clair que #1a1a1a */
    border: 1px solid #444; /* Bordure subtile */
    border-radius: 6px; /* Coins légèrement arrondis, comme sur l'image */
    padding: 0; /* Le padding sera sur l'input et le bouton */
    max-width: 350px; /* Ou la largeur désirée */
    overflow: hidden; /* Pour que les coins arrondis s'appliquent bien */
}
.search-form-header:focus-within {
    border-color: #00bfa5;
    box-shadow: 0 0 0 2px rgba(0, 191, 165, 0.2);
}

.search-form-header input[type="text"] {
    flex-grow: 1;
    background-color: transparent;
    color: #e0e0e0;
    border: none;
    padding: 10px 15px; /* Padding plus généreux */
    font-size: 0.95rem; /* Un peu plus grand */
    outline: none;
    width: calc(100% - 40px); /* Laisser de la place pour le bouton */
}
.search-form-header input[type="text"]::placeholder {
    color: #888;
}

.search-form-header .search-button-header {
    background-color: transparent; /* Pas de fond pour le bouton de l'icône */
    border: none;
    color: #aaa;
    padding: 10px; /* Padding pour que l'icône soit cliquable facilement */
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    border-left: 1px solid #444; /* Séparateur optionnel entre input et bouton */
    transition: color 0.2s ease;
}
.search-form-header .search-button-header:hover,
.search-form-header .search-button-header:focus {
    color: #00bfa5;
    background-color: transparent; /* Pas de changement de fond au survol ici */
}
.search-form-header .search-button-header svg {
    width: 1em;
    height: 1em;
}

/* Media Queries pour la responsivité du header */
@media (max-width: 1024px) { /* Ajuster le point de rupture pour quand la nav et la recherche doivent s'empiler */
    .header-container {
        flex-direction: column;
        align-items: flex-start;
    }
    .site-branding {
        width: 100%; /* Le logo/titre prend toute la largeur */
        margin-bottom: 10px;
        text-align: center; /* Centrer le logo/titre sur mobile */
    }
    .site-branding .site-logo-link {
        justify-content: center; /* Centrer le logo et le titre si flex */
    }

    .main-navigation {
        width: 100%;
        margin-bottom: 10px;
    }
    .main-navigation ul {
        justify-content: center; /* Centrer les liens de navigation */
        flex-wrap: wrap;
    }
    .header-search-bar {
        width: 100%; /* La barre de recherche prend toute la largeur */
    }
    .search-form-header {
        max-width: none; /* S'étend sur toute la largeur disponible */
    }
}

@media (max-width: 768px) {
    .site-branding .site-title-header {
        font-size: 1.6rem; /* Un peu plus petit */
    }
    .site-branding .site-logo-image {
        height: 35px; /* Logo un peu plus petit */
    }
    .main-navigation .nav-link {
        padding: 8px 8px;
        font-size: 0.85rem;
    }
}
/* ... autres styles ... */

/* Colonnes pour le contenu principal et la sidebar */
.movie-content-columns {
    display: flex;
    flex-direction: column; /* Mobile first: stack columns */
    gap: 25px;
    margin-top: 25px;
}

.main-column {
    flex: 2; /* La colonne principale prend plus de place */
    /* min-width: 0; /* Aide à prévenir le débordement de contenu flex */
}

.sidebar-column {
    flex: 1; /* La sidebar prend moins de place */
    display: flex;
    flex-direction: column;
    gap: 25px; /* Espace entre les éléments de la sidebar */
    /* min-width: 0; */
}

/* Publicité dans la sidebar */
.advertisement-slot.sticky-sidebar-ad {
    /* Styles pour la pub de la sidebar */
    /* Optionnel: pour la rendre "collante" (sticky) */
    /* position: sticky; */
    /* top: 80px; /* Ajustez en fonction de la hauteur de votre header s'il est sticky */
    /* max-height: calc(100vh - 100px); /* Limiter la hauteur pour le scroll */
    /* overflow-y: auto; */ /* Si le contenu de la pub est plus grand */
}

/* Publicité en bas de page */
.advertisement-slot.bottom-ad-slot {
    margin-top: 30px; /* Espace au-dessus de la pub du bas */
    padding: 15px;
    text-align: center; /* Centrer le contenu si c'est une image/GIF */
    /* background-color: #252525; /* Ou une autre couleur de fond si besoin */
}


/* Styles généraux pour les images/GIFs publicitaires */
.placeholder-ad-image-gif {
    max-width: 100%; /* S'assurer que l'image est responsive */
    height: auto;
    display: block; /* Évite les espaces indésirables en dessous */
    margin-left: auto; /* Centrer si le conteneur est plus large */
    margin-right: auto;
}


@media (min-width: 992px) { /* Appliquer la disposition en colonnes pour les grands écrans */
    .movie-content-columns {
        flex-direction: row;
    }
}

/* ... autres styles ... */


--- FILE : db/setup.sql ---


CREATE DATABASE IF NOT EXISTS eiganights CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
USE eiganights;

-- Drop tables in reverse order of dependency to avoid foreign key constraint errors
DROP TABLE IF EXISTS friendships;
DROP TABLE IF EXISTS watchlist;
DROP TABLE IF EXISTS ratings;
DROP TABLE IF EXISTS comments;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS faq_items;
DROP TABLE IF EXISTS site_content;
DROP TABLE IF EXISTS forum_posts;
DROP TABLE IF EXISTS forum_threads;

-- DROP TABLE IF EXISTS forum_categories; -- Optional for later, if you want categories

-- (Optional: Categories - can be added later if needed)
/*
CREATE TABLE forum_categories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    description TEXT,
    sort_order INT DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
*/

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    bio TEXT DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    profile_visibility ENUM('public', 'friends_only', 'private') DEFAULT 'public',
    role ENUM('user', 'admin') DEFAULT 'user' NOT NULL,
    is_banned TINYINT(1) DEFAULT 0 NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;


CREATE TABLE forum_threads (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    movie_id INT NOT NULL,
    movie_title VARCHAR(255) NOT NULL,
    title VARCHAR(255) NOT NULL, -- This will be the user's title for the annotation/scene discussion

    -- >> NEW SCENE-SPECIFIC COLUMNS <<
    scene_start_time VARCHAR(12) DEFAULT NULL, -- e.g., "00:45:12" (HH:MM:SS) or just seconds
    scene_end_time VARCHAR(12) DEFAULT NULL,   -- e.g., "00:46:05" (Optional for MVP)
    scene_description_short TEXT DEFAULT NULL, -- A brief user description of what happens in the scene

    initial_post_content TEXT NOT NULL, -- This is the actual annotation/discussion starter
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    INDEX idx_movie_id (movie_id),
    INDEX idx_user_id (user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;


CREATE TABLE forum_posts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    thread_id INT NOT NULL,
    user_id INT NOT NULL,
    parent_post_id INT DEFAULT NULL, -- For threaded replies (optional for MVP)
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (thread_id) REFERENCES forum_threads(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (parent_post_id) REFERENCES forum_posts(id) ON DELETE CASCADE, -- For threaded replies
    INDEX idx_thread_id (thread_id),
    INDEX idx_user_id (user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;


-- Create table for FAQ items
CREATE TABLE faq_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    question TEXT NOT NULL,
    answer TEXT NOT NULL,
    sort_order INT DEFAULT 0, -- For ordering FAQs
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;


-- Create table for general site content (like Terms, Privacy Policy)
CREATE TABLE site_content (
    id INT AUTO_INCREMENT PRIMARY KEY,
    slug VARCHAR(50) NOT NULL UNIQUE, -- e.g., 'terms-and-conditions', 'privacy-policy'
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;




-- Create watchlist table
CREATE TABLE watchlist (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    movie_id INT NOT NULL, -- This is the TMDB movie ID
    movie_title VARCHAR(255) NOT NULL,
    poster_path VARCHAR(255) DEFAULT NULL,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE KEY uk_user_movie (user_id, movie_id) -- Ensures a user can't add the same movie multiple times
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- Create ratings table
CREATE TABLE ratings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    movie_id INT NOT NULL, -- TMDB movie ID
    rating INT NOT NULL, -- e.g., 1 to 10
    rated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE KEY uk_user_movie_rating (user_id, movie_id) -- A user can only rate a movie once (record updated if re-rated)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- Create comments table
CREATE TABLE comments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    movie_id INT NOT NULL, -- TMDB movie ID
    comment TEXT NOT NULL,
    commented_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
    -- No unique key on (user_id, movie_id) here to allow multiple comments per movie per user,
    -- or if you only want one, the application logic in rate_comment.php handles update-if-exists.
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- Create friendships table
CREATE TABLE friendships (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_one_id INT NOT NULL, 
    user_two_id INT NOT NULL, 
    status ENUM('pending', 'accepted', 'declined') NOT NULL, -- 'blocked' status removed
    action_user_id INT NOT NULL, -- ID of the user who performed the last action (sent request, accepted, etc.)
    requested_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_one_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (user_two_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (action_user_id) REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE KEY uk_unique_friendship (user_one_id, user_two_id), -- Ensures one record per pair
    CONSTRAINT chk_user_order CHECK (user_one_id < user_two_id) -- Ensures user_one_id is always less than user_two_id
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;




--- FILE : includes/footer.php ---


<?php
/*
 * includes/footer.php
 * Common footer for all pages.
 */
?>
</div> <!-- Closing .container .page-content (or just .container) from header.php -->

<footer class="site-footer-main">
    <div class="container footer-content">
        <p>© <?php echo date("Y"); ?> <?php echo defined('SITE_NAME') ? htmlspecialchars(SITE_NAME, ENT_QUOTES, 'UTF-8') : 'Eiganights'; ?> - Tous droits réservés.</p>
        <p>
            <a href="faq.php">FAQ</a> |
            <a href="terms.php">Conditions d'Utilisation</a> |
            <a href="contact.php">Contactez-nous</a>
        </p>
    </div>
</footer>

<?php
// Optional: Close database connection if it was opened in config.php and not needed further.
// However, PHP automatically closes MySQLi connections at the end of script execution
// unless they are persistent connections. For most non-persistent connections, explicit close is good form but not strictly critical.
if (isset($conn) && $conn instanceof mysqli) {
    // $conn->close(); // Uncomment if you prefer explicit closing.
}
?>
</body>
</html>


--- FILE : includes/function.php ---


<?php // eiganights/includes/functions.php

if (!function_exists('generate_simulated_ad_slot_content')) {
    /**
     * Génère le contenu HTML pour un emplacement publicitaire simulé,
     * en choisissant un GIF aléatoire dans le dossier configuré.
     *
     * @return string Le code HTML de la publicité simulée ou une chaîne vide.
     */
    function generate_simulated_ad_slot_content() {
        // Vérifier si les publicités simulées sont activées globalement
        if (!defined('PLACEHOLDER_ADS_ENABLED') || !PLACEHOLDER_ADS_ENABLED) {
            return '';
        }

        // Vérifier si le dossier des GIFs publicitaires est configuré
        if (!defined('RANDOM_GIF_ADS_DIRECTORY') || empty(RANDOM_GIF_ADS_DIRECTORY)) {
            error_log("CONFIG ERROR: La constante RANDOM_GIF_ADS_DIRECTORY n'est pas définie ou est vide dans config.php.");
            return '<div class="placeholder-ad-content-textual"><p><strong>Erreur config pub</strong></p><p>Dossier GIFs non spécifié.</p></div>';
        }

        $gif_directory_relative = RANDOM_GIF_ADS_DIRECTORY;
        // Construire le chemin absolu sur le serveur pour lire le dossier
        $gif_directory_server_path = realpath(__DIR__ . '/../' . rtrim($gif_directory_relative, '/'));

        if (!$gif_directory_server_path || !is_dir($gif_directory_server_path)) {
            error_log("CONFIG ERROR: Dossier GIFs introuvable. Relatif: '" . $gif_directory_relative . "' Résolu en: '" . $gif_directory_server_path . "'");
            return '<div class="placeholder-ad-content-textual"><p><strong>Erreur config pub</strong></p><p>Dossier GIFs introuvable: ' . htmlspecialchars($gif_directory_relative) . '</p></div>';
        }

        // Scanner le dossier pour les fichiers .gif
        $all_files = @scandir($gif_directory_server_path);
        $gif_files = [];

        if ($all_files) {
            foreach ($all_files as $file) {
                if (is_file($gif_directory_server_path . DIRECTORY_SEPARATOR . $file) && strtolower(pathinfo($file, PATHINFO_EXTENSION)) === 'gif') {
                    $gif_files[] = $file;
                }
            }
        }

        if (empty($gif_files)) {
            error_log("INFO: Aucun fichier .gif trouvé dans le dossier: " . $gif_directory_relative);
            return '<div class="placeholder-ad-content-textual"><p><strong>Espace Publicitaire</strong></p><p>Aucune publicité GIF disponible dans le dossier configuré.</p></div>';
        }

        $random_gif_filename = $gif_files[array_rand($gif_files)];
        $ad_path_web = rtrim(BASE_URL, '/') . '/' . rtrim($gif_directory_relative, '/') . '/' . $random_gif_filename;
        $alt_text = defined('DEFAULT_AD_GIF_ALT_TEXT') ? DEFAULT_AD_GIF_ALT_TEXT : 'Publicité animée';
        $ad_link = defined('DEFAULT_AD_GIF_LINK') ? DEFAULT_AD_GIF_LINK : null;
        $output = '';

        if ($ad_link && filter_var($ad_link, FILTER_VALIDATE_URL)) {
             $output .= '<a href="' . htmlspecialchars($ad_link) . '" target="_blank" rel="noopener sponsored nofollow" class="simulated-ad-link">';
        }
        $output .= '<img src="' . htmlspecialchars($ad_path_web) . '" alt="' . htmlspecialchars($alt_text) . '" class="placeholder-ad-image-gif">';
        if ($ad_link && filter_var($ad_link, FILTER_VALIDATE_URL)) {
            $output .= '</a>';
        }
        return $output;
    }
}
?>


--- FILE : includes/header.php ---


<?php
/*
 * includes/header.php
 * Common header for all pages.
 * Assumes config.php (which starts the session) has been included before this file.
 */

// --- DÉFINITION DE $logoutText ICI ---
$logoutText = "Déconnexion"; // Ou toute autre traduction que vous souhaitez
// ------------------------------------

// Page Title - should be set in the including page before this header is included.
// Default title if not set.
$currentPageTitle = isset($pageTitle) ? htmlspecialchars($pageTitle, ENT_QUOTES, 'UTF-8') : (defined('SITE_NAME') ? htmlspecialchars(SITE_NAME, ENT_QUOTES, 'UTF-8') : 'Eiganights');
$siteName = defined('SITE_NAME') ? htmlspecialchars(SITE_NAME, ENT_QUOTES, 'UTF-8') : 'Eiganights';

if (isset($pageTitle) && ($pageTitle === $siteName || strpos($pageTitle, $siteName) !== false)) {
    $fullTitle = $currentPageTitle;
} else {
    $fullTitle = $currentPageTitle . ' - ' . $siteName;
}

$headerSearchQuery = isset($_GET['search']) ? htmlspecialchars(trim($_GET['search']), ENT_QUOTES, 'UTF-8') : '';
$logoPath = BASE_URL . 'assets/images/eiganights_logov2.png'; // Ou le nom de votre fichier logo
$siteNameForDisplay = defined('SITE_NAME') ? htmlspecialchars(SITE_NAME, ENT_QUOTES, 'UTF-8') : 'Eiganights';

?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Eiganights - Découvrez, notez et discutez de films. Créez votre watchlist et partagez avec vos amis.">
    <title><?php echo $fullTitle; ?></title>
    <link rel="stylesheet" href="<?php echo htmlspecialchars(BASE_URL . 'assets/style.css', ENT_QUOTES, 'UTF-8'); ?>" />
    <!-- <link rel="icon" href="<?php echo htmlspecialchars(BASE_URL . 'assets/images/favicon.png', ENT_QUOTES, 'UTF-8'); ?>" type="image/png"> -->
</head>
<body>

<header class="site-header">
    <div class="header-container container">
        <div class="site-branding">
             <a href="<?php echo BASE_URL; ?>index.php" class="site-logo-link" aria-label="Page d'accueil <?php echo $siteNameForDisplay; ?>">
                <img src="<?php echo htmlspecialchars($logoPath, ENT_QUOTES, 'UTF-8'); ?>" alt="Logo icône <?php echo $siteNameForDisplay; ?>" class="site-logo-image">
                <span class="site-title-header"><?php echo $siteNameForDisplay; ?></span>
             </a>
        </div>

        <nav class="main-navigation" aria-label="Navigation principale">
            <ul>
                <li><a href="<?php echo BASE_URL; ?>index.php" class="nav-link <?php echo basename($_SERVER['PHP_SELF']) == 'index.php' ? 'active' : ''; ?>">Accueil</a></li>
                <li><a href="<?php echo BASE_URL; ?>forum.php" class="nav-link <?php echo in_array(basename($_SERVER['PHP_SELF']), ['forum.php', 'forum_view_thread.php', 'forum_create_thread.php']) ? 'active' : ''; ?>">Forum</a></li>
                <li><a href="<?php echo BASE_URL; ?>users_list.php" class="nav-link <?php echo basename($_SERVER['PHP_SELF']) == 'users_list.php' ? 'active' : ''; ?>">Utilisateurs</a></li>
                <?php if (isset($_SESSION['user_id'])): ?>
                    <?php if (isset($_SESSION['role']) && $_SESSION['role'] === 'admin'): ?>
                        <li><a href="<?php echo BASE_URL; ?>admin_panel.php" class="nav-link <?php echo basename($_SERVER['PHP_SELF']) == 'admin_panel.php' ? 'active' : ''; ?>">Admin</a></li>
                    <?php endif; ?>
                    <li><a href="<?php echo BASE_URL; ?>profile.php" class="nav-link <?php echo basename($_SERVER['PHP_SELF']) == 'profile.php' ? 'active' : ''; ?>">Mon Profil</a></li>
                    <?php // Ligne 48 (ou proche) - Utilisation de $logoutText ?>
                    <li><a href="<?php echo BASE_URL; ?>logout.php" class="nav-link"><?php echo htmlspecialchars($logoutText, ENT_QUOTES, 'UTF-8'); ?></a></li>
                <?php else: ?>
                    <li><a href="<?php echo BASE_URL; ?>login.php" class="nav-link <?php echo basename($_SERVER['PHP_SELF']) == 'login.php' ? 'active' : ''; ?>">Connexion</a></li>
                    <li><a href="<?php echo BASE_URL; ?>register.php" class="nav-link <?php echo basename($_SERVER['PHP_SELF']) == 'register.php' ? 'active' : ''; ?>">Inscription</a></li>
                <?php endif; ?>
            </ul>
        </nav>

        <div class="header-search-bar">
            <form method="GET" action="<?php echo BASE_URL; ?>index.php" class="search-form-header" role="search">
                <label for="header-search-input" class="visually-hidden">Rechercher un film</label>
                <input type="text" id="header-search-input" name="search" placeholder="Rechercher un film..." value="<?php echo $headerSearchQuery; ?>" aria-label="Champ de recherche de film" />
                <button type="submit" class="search-button-header" aria-label="Lancer la recherche">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                        <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0"/>
                    </svg>
                </button>
            </form>
        </div>
    </div>
</header>

<div class="container page-content">
    <?php // Page content starts here ?>


